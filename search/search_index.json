{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"TODO: text about the Skycoin Project, the vision, how to contribute/apply, contacts and so on","title":"About"},{"location":"brand/","text":"Welcome to the Brand-Site! Here you will find everything that you will need to make merchandise products, stickers or wallpapers. Brand Guidelines https://downloads.skycoin.com/branding/Skycoin-Brand_Guidelines-v1.6.pdf Skycoin Font https://downloads.skycoin.com/branding/Skycoin-Sans.zip Official Logos https://downloads.skycoin.com/branding/Skycoin-Logos.zip Icon & Cloud","title":"Welcome to the Brand-Site!"},{"location":"brand/#welcome-to-the-brand-site","text":"Here you will find everything that you will need to make merchandise products, stickers or wallpapers.","title":"Welcome to the Brand-Site!"},{"location":"brand/#brand-guidelines","text":"https://downloads.skycoin.com/branding/Skycoin-Brand_Guidelines-v1.6.pdf","title":"Brand Guidelines"},{"location":"brand/#skycoin-font","text":"https://downloads.skycoin.com/branding/Skycoin-Sans.zip","title":"Skycoin Font"},{"location":"brand/#official-logos","text":"https://downloads.skycoin.com/branding/Skycoin-Logos.zip","title":"Official Logos"},{"location":"brand/#icon-cloud","text":"","title":"Icon &amp; Cloud"},{"location":"buywithsky/","text":"Where to use SKY and SCH Buy Site Information SKY SCH 6dollarshirts.com T-Shirt with the skycoin logo hostwithsky.com Host your Website by \"staking\" SKY skycoinhour.com Skycoin CoinHour Market Telegram Bots and Groups Bots from skyfleet are listed here","title":"Where to use SKY and SCH"},{"location":"buywithsky/#where-to-use-sky-and-sch","text":"","title":"Where to use SKY and SCH"},{"location":"buywithsky/#buy","text":"Site Information SKY SCH 6dollarshirts.com T-Shirt with the skycoin logo hostwithsky.com Host your Website by \"staking\" SKY skycoinhour.com Skycoin CoinHour Market","title":"Buy"},{"location":"buywithsky/#telegram-bots-and-groups","text":"Bots from skyfleet are listed here","title":"Telegram Bots and Groups"},{"location":"contribute/","text":"Contribute If you want to help to make this wiki great you have got different options. Either you install all dependencies or you open an issue. DIY (git & mkdocs) Clone this repository Install Dependencies Install Material for MkDocs with pip install mkdocs-material see also here Install git-revision-date plugin with pip3 install mkdocs-git-revision-date-plugin Install macros-plugin with pip install mkdocs-macros-plugin Test your changes with local build move into folder wiki and start with command mkdocs serve Start your browser and go to the displayed IP (e.g. htps://localhost:8000) Note You can now change your files and save them, mkdocs will recognize this and rebuild the site locally. Pull-Request your changes DIY (edit online) Click on the pencil icon on the site you want to edit Sign in to github with your github account Edit the site and do a pull-request Open an issue Click on the issue icon on the site you want to open an issue for Sign in to github with your github account Insert a title for your issue and describe it in the comment section","title":"Contribute"},{"location":"contribute/#contribute","text":"If you want to help to make this wiki great you have got different options. Either you install all dependencies or you open an issue. DIY (git & mkdocs) Clone this repository Install Dependencies Install Material for MkDocs with pip install mkdocs-material see also here Install git-revision-date plugin with pip3 install mkdocs-git-revision-date-plugin Install macros-plugin with pip install mkdocs-macros-plugin Test your changes with local build move into folder wiki and start with command mkdocs serve Start your browser and go to the displayed IP (e.g. htps://localhost:8000) Note You can now change your files and save them, mkdocs will recognize this and rebuild the site locally. Pull-Request your changes DIY (edit online) Click on the pencil icon on the site you want to edit Sign in to github with your github account Edit the site and do a pull-request Open an issue Click on the issue icon on the site you want to open an issue for Sign in to github with your github account Insert a title for your issue and describe it in the comment section","title":"Contribute"},{"location":"exchanges/","text":"Centralized Exchanges Name SKY-Pairs SCH-Pairs Binance BTC, BNB - Bitbns USDT, INR - Coinsbit BTC,ETH,USD - ExMarkets USDT - FINEXBOX BTC - HotBit USDT - LATOKEN BTC, ETH, USDT - LBank BTC,LBCN - P2PB2B USDT - Resfinex GRT, USDT - WhiteBIT USDT - Decentralized Exchanges Name SKY-Pairs SCH-Pairs XBTS DEX any any Coin Swaps Name SKY-Pairs SCH-Pairs Coinsuper any - Coinswitch any - Exolis any - InstaEx any - InstaSwap any - SimpleSwap any - StealthEX any - Swaplab any - SwapSpace any - Fiat Name SKY-Pairs SCH-Pairs bitladon EUR - skycoin USD, EUR -","title":"Exchanges"},{"location":"exchanges/#centralized-exchanges","text":"Name SKY-Pairs SCH-Pairs Binance BTC, BNB - Bitbns USDT, INR - Coinsbit BTC,ETH,USD - ExMarkets USDT - FINEXBOX BTC - HotBit USDT - LATOKEN BTC, ETH, USDT - LBank BTC,LBCN - P2PB2B USDT - Resfinex GRT, USDT - WhiteBIT USDT -","title":"Centralized Exchanges"},{"location":"exchanges/#decentralized-exchanges","text":"Name SKY-Pairs SCH-Pairs XBTS DEX any any","title":"Decentralized Exchanges"},{"location":"exchanges/#coin-swaps","text":"Name SKY-Pairs SCH-Pairs Coinsuper any - Coinswitch any - Exolis any - InstaEx any - InstaSwap any - SimpleSwap any - StealthEX any - Swaplab any - SwapSpace any -","title":"Coin Swaps"},{"location":"exchanges/#fiat","text":"Name SKY-Pairs SCH-Pairs bitladon EUR - skycoin USD, EUR -","title":"Fiat"},{"location":"info/","text":"Macros Plugin Environment General List All available variables and filters within the macros plugin: Variable Type Content extra dict social = [{'icon': 'fontawesome/solid/globe', 'link': 'https://www.skycoin.com/'}, {'icon': 'fontawesome/brands/twitter', 'link': 'https://twitter.com/Skycoinproject'}, {'icon': 'fontawesome/brands/linkedin', 'link': 'https://www.linkedin.com/company/skycoin'}, {'icon': 'fontawesome/brands/telegram', 'link': 'https://t.me/Skycoin'}, {'icon': 'fontawesome/brands/discord', 'link': 'https://discord.gg/EgBenrW'}, {'icon': 'fontawesome/brands/medium', 'link': 'https://medium.com/skycoin'}, {'icon': 'fontawesome/brands/reddit', 'link': 'https://www.reddit.com/r/skycoin'}, {'icon': 'fontawesome/brands/instagram', 'link': 'https://www.instagram.com/skycoinproject/'}, {'icon': 'fontawesome/brands/youtube', 'link': 'https://www.youtube.com/channel/UC_rRSG_Db1D-rnmU20b_kRg'}, {'icon': 'fontawesome/brands/facebook', 'link': 'https://www.facebook.com/SkycoinOfficial/'}], issue_url = 'https://github.com/skycoin/wiki/issues' config Config config_file_path = '/home/rudi/go/src/github.com/skycoin/wiki/mkdocs.yml', site_name = 'Skycoin Wiki', nav = [{'Home': 'index.md'}, {'Software': [{'Overview': 'software/index.md'}, {'Skycoin': [{'Overview': 'software/skycoin/index.md'}, {'About': 'software/skycoin/about.md'}, {'Social': 'software/skycoin/social.md'}, {'Explorer': 'https://explorer.skycoin.com/app/blocks/1'}]}, {'Fiber': [{'Overview': 'software/fiber/index.md'}, {'Fiber-Projects': 'software/fiber/fiber-coins.md'}]}, {'Skywire': [{'Overview': 'software/skywire/index.md'}, {'Setup': [{'macOS': 'software/skywire/setup/macos.md'}, {'Windows': 'software/skywire/setup/windows.md'}, {'Linux': 'software/skywire/setup/linux.md'}, {'Docker': 'software/skywire/setup/docker.md'}, {'Static Build': 'software/skywire/setup/static-build.md'}]}, {'Configuration': [{'Hypervisor Mode': 'software/skywire/configuration/hypervisor-mode.md'}, {'Visor Mode': 'software/skywire/configuration/visor-mode.md'}, {'Network Configuration': 'software/skywire/configuration/network-config.md'}, {'VPN Configuration': [{'VPN Client': 'software/skywire/configuration/vpn-config/vpn-client.md'}, {'VPN Server': 'software/skywire/configuration/vpn-config/vpn-server.md'}]}]}, {'Dev Docs': [{'Terminology': 'software/skywire/devdocs/terminology.md'}, {'Architecture': 'software/skywire/devdocs/architecture.md'}]}]}, {'CX': [{'Overview': 'software/cx/index.md'}, {'About': 'software/cx/about.md'}, {'Setup': [{'Overview': 'software/cx/setup/overview.md'}, {'Windows': 'software/cx/setup/windows.md'}, {'macOS': 'software/cx/setup/macos.md'}, {'Linux': 'software/cx/setup/linux.md'}, {'Programming Tools': [{'VS Code': 'software/cx/setup/vscode.md'}, {'Emacs': 'software/cx/setup/emacs.md'}, {'Atom': 'software/cx/setup/atom.md'}]}]}, {'User Docs': [{'Overview': 'software/cx/userdocs/overview.md'}, {'Basics': [{'Syntax': 'software/cx/userdocs/basics-syntax.md'}, {'Runtime': 'software/cx/userdocs/basics-runtime.md'}, {'Native Functions': 'software/cx/userdocs/basics-native-functions.md'}, {'Running CX': 'software/cx/userdocs/basics-running-cx.md'}, {'REPL': 'software/cx/userdocs/basics-repl.md'}]}, {'Native Packages': [{'time': 'software/cx/userdocs/package-time.md'}, {'os': 'software/cx/userdocs/package-os.md'}, {'gl': 'software/cx/userdocs/package-gl.md'}, {'glfw': 'software/cx/userdocs/package-glfw.md'}, {'gltext': 'software/cx/userdocs/package-gltext.md'}]}]}, {'Social': 'software/cx/social.md'}, {'CX Tracker': 'https://cx-tracker.skycoin.com/'}]}, {'CXO': [{'Overview': 'software/cxo/index.md'}, {'About': 'software/cxo/about.md'}, {'CXO Tracker': 'https://cxo.skycoin.com/'}]}, {'CXFX': [{'Overview': 'software/cxfx/index.md'}, {'About': 'software/cxfx/about.md'}, {'Roadmap': 'software/cxfx/roadmap.md'}]}, {'DMSG': [{'DMSG Build': 'software/dmsg/dmsg.md'}, {'Docker': 'software/dmsg/docker.md'}, {'DMSGPTY': 'software/dmsg/dmsgpty.md'}, {'DMSGGET': 'software/dmsg/dmsgget.md'}]}, {'System Admin': [{'Dmsg Server': 'software/sys-admin/dmsg-server.md'}, {'Public Visor': 'software/sys-admin/public-visor.md'}, {'VPN Server': 'software/sys-admin/vpn-server.md'}]}]}, {'Hardware': [{'Overview': 'hardware/index.md'}, {'Skyminer': [{'Overview': 'hardware/skyminer/index.md'}, {'About': 'hardware/skyminer/about.md'}, {'Setup': 'hardware/skyminer/setup.md'}, {'Software': 'hardware/skyminer/setup_software.md'}, {'Networking': 'hardware/skyminer/networking.md'}]}, {'Skywallet': [{'Overview': 'hardware/skywallet/index.md'}, {'About': 'hardware/skywallet/about.md'}]}, {'Skywallet HDK': 'hardware/skywalletdk/index.md'}]}, {'Contribute': 'contribute.md'}, {'About': 'about.md'}], pages [ NoneType ], site_url = '', site_description = 'Welcome to our wiki! Navigate with the buttons below or search for a keyword.', site_author [ NoneType ], theme [ Theme ], docs_dir = '/home/rudi/go/src/github.com/skycoin/wiki/docs', site_dir = '/home/rudi/go/src/github.com/skycoin/wiki/site', copyright [ NoneType ], google_analytics [ NoneType ], dev_addr [ Address ], use_directory_urls = True, repo_url = 'https://github.com/skycoin/', repo_name = 'github.com/skycoin', edit_uri = 'wiki/blob/master/docs/', extra_css = ['stylesheets/extra.css'], extra_javascript = [], extra_templates = [], markdown_extensions = ['toc', 'tables', 'fenced_code', 'meta', 'admonition', 'pymdownx.details', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.smartsymbols', 'pymdownx.caret', 'pymdownx.mark', 'pymdownx.tilde', 'footnotes', 'attr_list', 'def_list', 'pymdownx.tasklist', 'pymdownx.emoji'], mdx_configs [ dict ], strict = False, remote_branch = 'gh-pages', remote_name = 'origin', extra [ SubConfig ], plugins [ PluginCollection ] environment dict system = 'Linux', system_version = '5.14.14-1-MANJARO', python_version = '3.9.7', mkdocs_version = '1.2.2', macros_plugin_version = '0.6.0', jinja2_version = '3.0.1' plugin Config module_name = 'main', modules = [], include_dir = '', include_yaml = [], j2_block_start_string = '', j2_block_end_string = '', j2_variable_start_string = '', j2_variable_end_string = '', verbose = False git dict status = True, date [ datetime ], short_commit = '7bb91c4', commit = '7bb91c4e4eea5c0893daa0cd0b274eb66430d44d', author = 'Erich K\u00e4stner', tag = '', date_ISO = '2021-11-13 12:40:02 +0100', message = 'Merge pull request #22 from libronlopes/docs/dmsg-docs\\n\\nAdd dmsg setup instructions', raw = 'commit 7bb91c4e4eea5c0893daa0cd0b274eb66430d44d\\nMerge: 9974928 4259325\\nAuthor: Erich K\u00e4stner < 36450093+jdknives@users.noreply.github.com>\\nDate: Sat Nov 13 12:40:02 2021 +0100\\n\\n Merge pull request #22 from libronlopes/docs/dmsg-docs\\n \\n Add dmsg setup instructions', root_dir = '/home/rudi/go/src/github.com/skycoin/wiki' social list [{'icon': 'fontawesome/solid/globe', 'link': 'https://www.skycoin.com/'}, {'icon': 'fontawesome/brands/twitter', 'link': 'https://twitter.com/Skycoinproject'}, {'icon': 'fontawesome/brands/linkedin', 'link': 'https://www.linkedin.com/company/skycoin'}, {'icon': 'fontawesome/brands/telegram', 'link': 'https://t.me/Skycoin'}, {'icon': 'fontawesome/brands/discord', 'link': 'https://discord.gg/EgBenrW'}, {'icon': 'fontawesome/brands/medium', 'link': 'https://medium.com/skycoin'}, {'icon': 'fontawesome/brands/reddit', 'link': 'https://www.reddit.com/r/skycoin'}, {'icon': 'fontawesome/brands/instagram', 'link': 'https://www.instagram.com/skycoinproject/'}, {'icon': 'fontawesome/brands/youtube', 'link': 'https://www.youtube.com/channel/UC_rRSG_Db1D-rnmU20b_kRg'}, {'icon': 'fontawesome/brands/facebook', 'link': 'https://www.facebook.com/SkycoinOfficial/'}] issue_url str 'https://github.com/skycoin/wiki/issues' macros SuperDict context [ function ], macros_info [ function ], now [ function ], fix_url [ function ] filters dict pretty [ function ] filters_builtin dict abs [ builtin_function_or_method ], attr [ function ], batch [ function ], capitalize [ function ], center [ function ], count [ builtin_function_or_method ], d [ function ], default [ function ], dictsort [ function ], e [ builtin_function_or_method ], escape [ builtin_function_or_method ], filesizeformat [ function ], first [ function ], float [ function ], forceescape [ function ], format [ function ], groupby [ function ], indent [ function ], int [ function ], join [ function ], last [ function ], length [ builtin_function_or_method ], list [ function ], lower [ function ], map [ function ], min [ function ], max [ function ], pprint [ function ], random [ function ], reject [ function ], rejectattr [ function ], replace [ function ], reverse [ function ], round [ function ], safe [ function ], select [ function ], selectattr [ function ], slice [ function ], sort [ function ], string [ builtin_function_or_method ], striptags [ function ], sum [ function ], title [ function ], trim [ function ], truncate [ function ], unique [ function ], upper [ function ], urlencode [ function ], urlize [ function ], wordcount [ function ], wordwrap [ function ], xmlattr [ function ], tojson [ function ] navigation Navigation Page(title='Home', url='.') Section(title='Software') Page(title='Overview', url='software/') Section(title='Skycoin') Page(title='Overview', url='software/skycoin/') Page(title='About', url='software/skycoin/about/') Page(title='Social', url='software/skycoin/social/') Link(title='Explorer', url='https://explorer.skycoin.com/app/blocks/1') Section(title='Fiber') Page(title='Overview', url='software/fiber/') Page(title='Fiber-Projects', url='software/fiber/fiber-coins/') Section(title='Skywire') Page(title='Overview', url='software/skywire/') Section(title='Setup') Page(title='macOS', url='software/skywire/setup/macos/') Page(title='Windows', url='software/skywire/setup/windows/') Page(title='Linux', url='software/skywire/setup/linux/') Page(title='Docker', url='software/skywire/setup/docker/') Page(title='Static Build', url='software/skywire/setup/static-build/') Section(title='Configuration') Page(title='Hypervisor Mode', url='software/skywire/configuration/hypervisor-mode/') Page(title='Visor Mode', url='software/skywire/configuration/visor-mode/') Page(title='Network Configuration', url='software/skywire/configuration/network-config/') Section(title='VPN Configuration') Page(title='VPN Client', url='software/skywire/configuration/vpn-config/vpn-client/') Page(title='VPN Server', url='software/skywire/configuration/vpn-config/vpn-server/') Section(title='Dev Docs') Page(title='Terminology', url='software/skywire/devdocs/terminology/') Page(title='Architecture', url='software/skywire/devdocs/architecture/') Section(title='CX') Page(title='Overview', url='software/cx/') Page(title='About', url='software/cx/about/') Section(title='Setup') Page(title='Overview', url='software/cx/setup/overview/') Page(title='Windows', url='software/cx/setup/windows/') Page(title='macOS', url='software/cx/setup/macos/') Page(title='Linux', url='software/cx/setup/linux/') Section(title='Programming Tools') Page(title='VS Code', url='software/cx/setup/vscode/') Page(title='Emacs', url='software/cx/setup/emacs/') Page(title='Atom', url='software/cx/setup/atom/') Section(title='User Docs') Page(title='Overview', url='software/cx/userdocs/overview/') Section(title='Basics') Page(title='Syntax', url='software/cx/userdocs/basics-syntax/') Page(title='Runtime', url='software/cx/userdocs/basics-runtime/') Page(title='Native Functions', url='software/cx/userdocs/basics-native-functions/') Page(title='Running CX', url='software/cx/userdocs/basics-running-cx/') Page(title='REPL', url='software/cx/userdocs/basics-repl/') Section(title='Native Packages') Page(title='time', url='software/cx/userdocs/package-time/') Page(title='os', url='software/cx/userdocs/package-os/') Page(title='gl', url='software/cx/userdocs/package-gl/') Page(title='glfw', url='software/cx/userdocs/package-glfw/') Page(title='gltext', url='software/cx/userdocs/package-gltext/') Page(title='Social', url='software/cx/social/') Link(title='CX Tracker', url='https://cx-tracker.skycoin.com/') Section(title='CXO') Page(title='Overview', url='software/cxo/') Page(title='About', url='software/cxo/about/') Link(title='CXO Tracker', url='https://cxo.skycoin.com/') Section(title='CXFX') Page(title='Overview', url='software/cxfx/') Page(title='About', url='software/cxfx/about/') Page(title='Roadmap', url='software/cxfx/roadmap/') Section(title='DMSG') Page(title='DMSG Build', url='software/dmsg/dmsg/') Page(title='Docker', url='software/dmsg/docker/') Page(title='DMSGPTY', url='software/dmsg/dmsgpty/') Page(title='DMSGGET', url='software/dmsg/dmsgget/') Section(title='System Admin') Page(title='Dmsg Server', url='software/sys-admin/dmsg-server/') Page(title='Public Visor', url='software/sys-admin/public-visor/') Page(title='VPN Server', url='software/sys-admin/vpn-server/') Section(title='Hardware') Page(title='Overview', url='hardware/') Section(title='Skyminer') Page(title='Overview', url='hardware/skyminer/') Page(title='About', url='hardware/skyminer/about/') Page(title='Setup', url='hardware/skyminer/setup/') Page(title='Software', url='hardware/skyminer/setup_software/') Page(title='Networking', url='hardware/skyminer/networking/') Section(title='Skywallet') Page(title='Overview', url='hardware/skywallet/') Page(title='About', url='hardware/skywallet/about/') Page(title='Skywallet HDK', url='hardware/skywalletdk/') Page(title='Contribute', url='contribute/') Page(title='About', url='about/') files Files page Page Page(title='Info', url='info/') Config Information Standard MkDocs configuration information. Do not try to modify. e.g. {{ config.docs_dir }} See also the MkDocs documentation on the config object . Variable Type Content config_file_path str '/home/rudi/go/src/github.com/skycoin/wiki/mkdocs.yml' site_name str 'Skycoin Wiki' nav list [{'Home': 'index.md'}, {'Software': [{'Overview': 'software/index.md'}, {'Skycoin': [{'Overview': 'software/skycoin/index.md'}, {'About': 'software/skycoin/about.md'}, {'Social': 'software/skycoin/social.md'}, {'Explorer': 'https://explorer.skycoin.com/app/blocks/1'}]}, {'Fiber': [{'Overview': 'software/fiber/index.md'}, {'Fiber-Projects': 'software/fiber/fiber-coins.md'}]}, {'Skywire': [{'Overview': 'software/skywire/index.md'}, {'Setup': [{'macOS': 'software/skywire/setup/macos.md'}, {'Windows': 'software/skywire/setup/windows.md'}, {'Linux': 'software/skywire/setup/linux.md'}, {'Docker': 'software/skywire/setup/docker.md'}, {'Static Build': 'software/skywire/setup/static-build.md'}]}, {'Configuration': [{'Hypervisor Mode': 'software/skywire/configuration/hypervisor-mode.md'}, {'Visor Mode': 'software/skywire/configuration/visor-mode.md'}, {'Network Configuration': 'software/skywire/configuration/network-config.md'}, {'VPN Configuration': [{'VPN Client': 'software/skywire/configuration/vpn-config/vpn-client.md'}, {'VPN Server': 'software/skywire/configuration/vpn-config/vpn-server.md'}]}]}, {'Dev Docs': [{'Terminology': 'software/skywire/devdocs/terminology.md'}, {'Architecture': 'software/skywire/devdocs/architecture.md'}]}]}, {'CX': [{'Overview': 'software/cx/index.md'}, {'About': 'software/cx/about.md'}, {'Setup': [{'Overview': 'software/cx/setup/overview.md'}, {'Windows': 'software/cx/setup/windows.md'}, {'macOS': 'software/cx/setup/macos.md'}, {'Linux': 'software/cx/setup/linux.md'}, {'Programming Tools': [{'VS Code': 'software/cx/setup/vscode.md'}, {'Emacs': 'software/cx/setup/emacs.md'}, {'Atom': 'software/cx/setup/atom.md'}]}]}, {'User Docs': [{'Overview': 'software/cx/userdocs/overview.md'}, {'Basics': [{'Syntax': 'software/cx/userdocs/basics-syntax.md'}, {'Runtime': 'software/cx/userdocs/basics-runtime.md'}, {'Native Functions': 'software/cx/userdocs/basics-native-functions.md'}, {'Running CX': 'software/cx/userdocs/basics-running-cx.md'}, {'REPL': 'software/cx/userdocs/basics-repl.md'}]}, {'Native Packages': [{'time': 'software/cx/userdocs/package-time.md'}, {'os': 'software/cx/userdocs/package-os.md'}, {'gl': 'software/cx/userdocs/package-gl.md'}, {'glfw': 'software/cx/userdocs/package-glfw.md'}, {'gltext': 'software/cx/userdocs/package-gltext.md'}]}]}, {'Social': 'software/cx/social.md'}, {'CX Tracker': 'https://cx-tracker.skycoin.com/'}]}, {'CXO': [{'Overview': 'software/cxo/index.md'}, {'About': 'software/cxo/about.md'}, {'CXO Tracker': 'https://cxo.skycoin.com/'}]}, {'CXFX': [{'Overview': 'software/cxfx/index.md'}, {'About': 'software/cxfx/about.md'}, {'Roadmap': 'software/cxfx/roadmap.md'}]}, {'DMSG': [{'DMSG Build': 'software/dmsg/dmsg.md'}, {'Docker': 'software/dmsg/docker.md'}, {'DMSGPTY': 'software/dmsg/dmsgpty.md'}, {'DMSGGET': 'software/dmsg/dmsgget.md'}]}, {'System Admin': [{'Dmsg Server': 'software/sys-admin/dmsg-server.md'}, {'Public Visor': 'software/sys-admin/public-visor.md'}, {'VPN Server': 'software/sys-admin/vpn-server.md'}]}]}, {'Hardware': [{'Overview': 'hardware/index.md'}, {'Skyminer': [{'Overview': 'hardware/skyminer/index.md'}, {'About': 'hardware/skyminer/about.md'}, {'Setup': 'hardware/skyminer/setup.md'}, {'Software': 'hardware/skyminer/setup_software.md'}, {'Networking': 'hardware/skyminer/networking.md'}]}, {'Skywallet': [{'Overview': 'hardware/skywallet/index.md'}, {'About': 'hardware/skywallet/about.md'}]}, {'Skywallet HDK': 'hardware/skywalletdk/index.md'}]}, {'Contribute': 'contribute.md'}, {'About': 'about.md'}] pages NoneType None site_url str '' site_description str 'Welcome to our wiki! Navigate with the buttons below or search for a keyword.' site_author NoneType None theme Theme Theme(name='material', dirs=['/home/rudi/go/src/github.com/skycoin/wiki/overrides', '/home/rudi/.local/lib/python3.9/site-packages/material', '/home/rudi/.local/lib/python3.9/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], locale=Locale(language='en', territory=''), language='en', direction=None, features=['header.autohide', 'navigation.instant', 'navigation.tabs', 'toc.autohide'], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='img/Skycoin-Cloud-Blue.png', include_search_page=False, search_index_only=True, logo='img/Skycoin-Cloud-White.png') docs_dir str '/home/rudi/go/src/github.com/skycoin/wiki/docs' site_dir str '/home/rudi/go/src/github.com/skycoin/wiki/site' copyright NoneType None google_analytics NoneType None dev_addr Address Address(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url str 'https://github.com/skycoin/' repo_name str 'github.com/skycoin' edit_uri str 'wiki/blob/master/docs/' extra_css list ['stylesheets/extra.css'] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'meta', 'admonition', 'pymdownx.details', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.smartsymbols', 'pymdownx.caret', 'pymdownx.mark', 'pymdownx.tilde', 'footnotes', 'attr_list', 'def_list', 'pymdownx.tasklist', 'pymdownx.emoji'] mdx_configs dict pymdownx.tasklist [ dict ], pymdownx.emoji [ dict ] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra SubConfig {'social': [{'icon': 'fontawesome/solid/globe', 'link': 'https://www.skycoin.com/'}, {'icon': 'fontawesome/brands/twitter', 'link': 'https://twitter.com/Skycoinproject'}, {'icon': 'fontawesome/brands/linkedin', 'link': 'https://www.linkedin.com/company/skycoin'}, {'icon': 'fontawesome/brands/telegram', 'link': 'https://t.me/Skycoin'}, {'icon': 'fontawesome/brands/discord', 'link': 'https://discord.gg/EgBenrW'}, {'icon': 'fontawesome/brands/medium', 'link': 'https://medium.com/skycoin'}, {'icon': 'fontawesome/brands/reddit', 'link': 'https://www.reddit.com/r/skycoin'}, {'icon': 'fontawesome/brands/instagram', 'link': 'https://www.instagram.com/skycoinproject/'}, {'icon': 'fontawesome/brands/youtube', 'link': 'https://www.youtube.com/channel/UC_rRSG_Db1D-rnmU20b_kRg'}, {'icon': 'fontawesome/brands/facebook', 'link': 'https://www.facebook.com/SkycoinOfficial/'}], 'issue_url': 'https://github.com/skycoin/wiki/issues'} plugins PluginCollection git-revision-date [ GitRevisionDatePlugin ], search [ SearchPlugin ], macros [ MacrosPlugin ] Macros These macros have been defined programmatically for this environment (module or pluglets). Variable Type Content context function ( obj, e ) Default mkdocs_macro List the defined variables macros_info function ( ) Test/debug function: list useful documentation on the mkdocs_macro environment. now function ( ) Get the current time (returns a datetime object). Used alone, it provides a timestamp. To get the year use now().year , for the month number now().month , etc. fix_url function ( url, r ) If url is relative, fix it so that it points to the docs diretory. This is necessary because relative links in markdown must be adapted in html ('img/foo.png' => '../img/img.png'). Git Information Information available on the last commit and the git repository containing the documentation project: e.g. {{ git.message }} Variable Type Content status bool True date datetime datetime.datetime(2021, 11, 13, 12, 40, 2, tzinfo=tzoffset(None, 3600)) short_commit str '7bb91c4' commit str '7bb91c4e4eea5c0893daa0cd0b274eb66430d44d' author str 'Erich K\u00e4stner' tag str '' date_ISO str '2021-11-13 12:40:02 +0100' message str 'Merge pull request #22 from libronlopes/docs/dmsg-docs\\n\\nAdd dmsg setup instructions' raw str 'commit 7bb91c4e4eea5c0893daa0cd0b274eb66430d44d\\nMerge: 9974928 4259325\\nAuthor: Erich K\u00e4stner < 36450093+jdknives@users.noreply.github.com>\\nDate: Sat Nov 13 12:40:02 2021 +0100\\n\\n Merge pull request #22 from libronlopes/docs/dmsg-docs\\n \\n Add dmsg setup instructions' root_dir str '/home/rudi/go/src/github.com/skycoin/wiki' Page Attributes Provided by MkDocs. These attributes change for every page (the attributes shown are for this page). e.g. {{ page.title }} See also the MkDocs documentation on the page object . Variable Type Content file File page [ Page ], src_path = 'info.md', abs_src_path = '/home/rudi/go/src/github.com/skycoin/wiki/docs/info.md', name = 'info', dest_path = 'info/index.html', abs_dest_path = '/home/rudi/go/src/github.com/skycoin/wiki/site/info/index.html', url = 'info/' title str 'Info' parent NoneType None children NoneType None previous_page NoneType None next_page NoneType None _Page__active bool False is_section bool False is_page bool True is_link bool False update_date str '2021-11-13' canonical_url NoneType None abs_url NoneType None edit_url str 'https://github.com/skycoin/wiki/blob/master/docs/info.md' markdown str '{{ macros_info() }}' content NoneType None toc list [] meta dict revision_date = '2020-11-17' To have all titles of all pages, use: {% for page in navigation.pages %} - {{ page.title }} {% endfor% } Plugin Filters These filters are provided as a standard by the macros plugin. Variable Type Content pretty function ( var_list, rows, header, e ) Default mkdocs_macro Prettify a dictionary or object (used for environment documentation, or debugging). Builtin Jinja2 Filters These filters are provided by Jinja2 as a standard. See also the Jinja2 documentation on builtin filters ). Variable Type Content abs builtin_function_or_method Return the absolute value of the argument. attr function ( environment, obj, name, value ) Get an attribute of an object. foo|attr(\"bar\") works like foo.bar just that always an attribute is returned and items are not looked up. batch function ( value, linecount, fill_with, tmp, item ) A filter that batches items. It works pretty much like slice just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example. capitalize function ( s ) Capitalize a value. The first character will be uppercase, all others lowercase. center function ( value, width ) Centers the value in a field of a given width. count builtin_function_or_method Return the number of items in a container. d function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. default function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. dictsort function ( value, case_sensitive, by, reverse, sort_func ) Sort a dict and yield (key, value) pairs. Python dicts may not be in the order you want to display them in, so sort them first. e builtin_function_or_method Replace the characters & , < , > , ' , and \" in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. escape builtin_function_or_method Replace the characters & , < , > , ' , and \" in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. filesizeformat function ( value, binary, bytes, base, prefixes, i, prefix, unit ) Format the value like a 'human-readable' file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to True the binary prefixes are used (Mebi, Gibi). first function ( args, kwargs, b ) Return the first item of a sequence. float function ( value, default ) Convert the value into a floating point number. If the conversion doesn't work it will return 0.0 . You can override this default using the first parameter. forceescape function ( value ) Enforce HTML escaping. This will probably double escape variables. format function ( value, args, kwargs ) Apply the given values to a printf-style _ format string, like string % values . groupby function ( args, kwargs, b ) Group a sequence of objects by an attribute using Python's :func: itertools.groupby . The attribute can use dot notation for nested access, like \"address.city\" . Unlike Python's groupby , the values are sorted first so only one group is returned for each unique value. indent function ( s, width, first, blank, newline, rv, lines ) Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default. int function ( value, default, base ) Convert the value into an integer. If the conversion doesn't work it will return 0 . You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values. join function ( args, kwargs, b ) Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter. last function ( environment, seq ) Return the last item of a sequence. length builtin_function_or_method Return the number of items in a container. list function ( args, kwargs, b ) Convert the value into a list. If it was a string the returned list will be a list of characters. lower function ( s ) Convert a value to lowercase. map function ( args, kwargs, b ) Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it. min function ( environment, value, case_sensitive, attribute ) Return the smallest item from the sequence. max function ( environment, value, case_sensitive, attribute ) Return the largest item from the sequence. pprint function ( value ) Pretty print a variable. Useful for debugging. random function ( context, seq ) Return a random item from the sequence. reject function ( args, kwargs, b ) Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding. rejectattr function ( args, kwargs, b ) Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding. replace function ( eval_ctx, s, old, new, count ) Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced. reverse function ( value, rv ) Reverse the object or return an iterator that iterates over it the other way round. round function ( value, precision, method, func ) Round the number to a given precision. The first parameter specifies the precision (default is 0 ), the second the rounding method. safe function ( value ) Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped. select function ( args, kwargs, b ) Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding. selectattr function ( args, kwargs, b ) Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding. slice function ( args, kwargs, b ) Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns. sort function ( environment, value, reverse, case_sensitive, attribute, key_func ) Sort an iterable using Python's :func: sorted . string builtin_function_or_method Convert an object to a string if it isn't already. This preserves a :class: Markup string rather than converting it back to a basic string, so it will still be marked as safe and won't be escaped again. striptags function ( value ) Strip SGML/XML tags and replace adjacent whitespace by one space. sum function ( args, kwargs, b ) Returns the sum of a sequence of numbers plus the value of parameter 'start' (which defaults to 0). When the sequence is empty it returns start. title function ( s ) Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase. trim function ( value, chars ) Strip leading and trailing characters, by default whitespace. truncate function ( env, s, length, killwords, end, leeway, result ) Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255 . If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign ( \"...\" ). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated. unique function ( environment, value, case_sensitive, attribute, getter, seen, item, key ) Returns a list of unique items from the given iterable. upper function ( s ) Convert a value to uppercase. urlencode function ( value, items ) Quote data for use in a URL path or query using UTF-8. urlize function ( eval_ctx, value, trim_url_limit, nofollow, target, rel, extra_schemes, policies, rel_parts, scheme, rv ) Convert URLs in text into clickable links. wordcount function ( s ) Count the words in that string. wordwrap function ( environment, s, width, break_long_words, wrapstring, break_on_hyphens ) Wrap a string to the given width. Existing newlines are treated as paragraphs to be wrapped separately. xmlattr function ( eval_ctx, d, autospace, rv ) Create an SGML/XML attribute string based on the items in a dict. All values that are neither none nor undefined are automatically escaped. tojson function ( eval_ctx, value, indent, policies, dumps, kwargs ) Serialize an object to a string of JSON, and mark it safe to render in HTML. This filter is only for use in HTML documents.","title":"Info"},{"location":"info/#macros-plugin-environment","text":"","title":"Macros Plugin Environment"},{"location":"info/#general-list","text":"All available variables and filters within the macros plugin: Variable Type Content extra dict social = [{'icon': 'fontawesome/solid/globe', 'link': 'https://www.skycoin.com/'}, {'icon': 'fontawesome/brands/twitter', 'link': 'https://twitter.com/Skycoinproject'}, {'icon': 'fontawesome/brands/linkedin', 'link': 'https://www.linkedin.com/company/skycoin'}, {'icon': 'fontawesome/brands/telegram', 'link': 'https://t.me/Skycoin'}, {'icon': 'fontawesome/brands/discord', 'link': 'https://discord.gg/EgBenrW'}, {'icon': 'fontawesome/brands/medium', 'link': 'https://medium.com/skycoin'}, {'icon': 'fontawesome/brands/reddit', 'link': 'https://www.reddit.com/r/skycoin'}, {'icon': 'fontawesome/brands/instagram', 'link': 'https://www.instagram.com/skycoinproject/'}, {'icon': 'fontawesome/brands/youtube', 'link': 'https://www.youtube.com/channel/UC_rRSG_Db1D-rnmU20b_kRg'}, {'icon': 'fontawesome/brands/facebook', 'link': 'https://www.facebook.com/SkycoinOfficial/'}], issue_url = 'https://github.com/skycoin/wiki/issues' config Config config_file_path = '/home/rudi/go/src/github.com/skycoin/wiki/mkdocs.yml', site_name = 'Skycoin Wiki', nav = [{'Home': 'index.md'}, {'Software': [{'Overview': 'software/index.md'}, {'Skycoin': [{'Overview': 'software/skycoin/index.md'}, {'About': 'software/skycoin/about.md'}, {'Social': 'software/skycoin/social.md'}, {'Explorer': 'https://explorer.skycoin.com/app/blocks/1'}]}, {'Fiber': [{'Overview': 'software/fiber/index.md'}, {'Fiber-Projects': 'software/fiber/fiber-coins.md'}]}, {'Skywire': [{'Overview': 'software/skywire/index.md'}, {'Setup': [{'macOS': 'software/skywire/setup/macos.md'}, {'Windows': 'software/skywire/setup/windows.md'}, {'Linux': 'software/skywire/setup/linux.md'}, {'Docker': 'software/skywire/setup/docker.md'}, {'Static Build': 'software/skywire/setup/static-build.md'}]}, {'Configuration': [{'Hypervisor Mode': 'software/skywire/configuration/hypervisor-mode.md'}, {'Visor Mode': 'software/skywire/configuration/visor-mode.md'}, {'Network Configuration': 'software/skywire/configuration/network-config.md'}, {'VPN Configuration': [{'VPN Client': 'software/skywire/configuration/vpn-config/vpn-client.md'}, {'VPN Server': 'software/skywire/configuration/vpn-config/vpn-server.md'}]}]}, {'Dev Docs': [{'Terminology': 'software/skywire/devdocs/terminology.md'}, {'Architecture': 'software/skywire/devdocs/architecture.md'}]}]}, {'CX': [{'Overview': 'software/cx/index.md'}, {'About': 'software/cx/about.md'}, {'Setup': [{'Overview': 'software/cx/setup/overview.md'}, {'Windows': 'software/cx/setup/windows.md'}, {'macOS': 'software/cx/setup/macos.md'}, {'Linux': 'software/cx/setup/linux.md'}, {'Programming Tools': [{'VS Code': 'software/cx/setup/vscode.md'}, {'Emacs': 'software/cx/setup/emacs.md'}, {'Atom': 'software/cx/setup/atom.md'}]}]}, {'User Docs': [{'Overview': 'software/cx/userdocs/overview.md'}, {'Basics': [{'Syntax': 'software/cx/userdocs/basics-syntax.md'}, {'Runtime': 'software/cx/userdocs/basics-runtime.md'}, {'Native Functions': 'software/cx/userdocs/basics-native-functions.md'}, {'Running CX': 'software/cx/userdocs/basics-running-cx.md'}, {'REPL': 'software/cx/userdocs/basics-repl.md'}]}, {'Native Packages': [{'time': 'software/cx/userdocs/package-time.md'}, {'os': 'software/cx/userdocs/package-os.md'}, {'gl': 'software/cx/userdocs/package-gl.md'}, {'glfw': 'software/cx/userdocs/package-glfw.md'}, {'gltext': 'software/cx/userdocs/package-gltext.md'}]}]}, {'Social': 'software/cx/social.md'}, {'CX Tracker': 'https://cx-tracker.skycoin.com/'}]}, {'CXO': [{'Overview': 'software/cxo/index.md'}, {'About': 'software/cxo/about.md'}, {'CXO Tracker': 'https://cxo.skycoin.com/'}]}, {'CXFX': [{'Overview': 'software/cxfx/index.md'}, {'About': 'software/cxfx/about.md'}, {'Roadmap': 'software/cxfx/roadmap.md'}]}, {'DMSG': [{'DMSG Build': 'software/dmsg/dmsg.md'}, {'Docker': 'software/dmsg/docker.md'}, {'DMSGPTY': 'software/dmsg/dmsgpty.md'}, {'DMSGGET': 'software/dmsg/dmsgget.md'}]}, {'System Admin': [{'Dmsg Server': 'software/sys-admin/dmsg-server.md'}, {'Public Visor': 'software/sys-admin/public-visor.md'}, {'VPN Server': 'software/sys-admin/vpn-server.md'}]}]}, {'Hardware': [{'Overview': 'hardware/index.md'}, {'Skyminer': [{'Overview': 'hardware/skyminer/index.md'}, {'About': 'hardware/skyminer/about.md'}, {'Setup': 'hardware/skyminer/setup.md'}, {'Software': 'hardware/skyminer/setup_software.md'}, {'Networking': 'hardware/skyminer/networking.md'}]}, {'Skywallet': [{'Overview': 'hardware/skywallet/index.md'}, {'About': 'hardware/skywallet/about.md'}]}, {'Skywallet HDK': 'hardware/skywalletdk/index.md'}]}, {'Contribute': 'contribute.md'}, {'About': 'about.md'}], pages [ NoneType ], site_url = '', site_description = 'Welcome to our wiki! Navigate with the buttons below or search for a keyword.', site_author [ NoneType ], theme [ Theme ], docs_dir = '/home/rudi/go/src/github.com/skycoin/wiki/docs', site_dir = '/home/rudi/go/src/github.com/skycoin/wiki/site', copyright [ NoneType ], google_analytics [ NoneType ], dev_addr [ Address ], use_directory_urls = True, repo_url = 'https://github.com/skycoin/', repo_name = 'github.com/skycoin', edit_uri = 'wiki/blob/master/docs/', extra_css = ['stylesheets/extra.css'], extra_javascript = [], extra_templates = [], markdown_extensions = ['toc', 'tables', 'fenced_code', 'meta', 'admonition', 'pymdownx.details', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.smartsymbols', 'pymdownx.caret', 'pymdownx.mark', 'pymdownx.tilde', 'footnotes', 'attr_list', 'def_list', 'pymdownx.tasklist', 'pymdownx.emoji'], mdx_configs [ dict ], strict = False, remote_branch = 'gh-pages', remote_name = 'origin', extra [ SubConfig ], plugins [ PluginCollection ] environment dict system = 'Linux', system_version = '5.14.14-1-MANJARO', python_version = '3.9.7', mkdocs_version = '1.2.2', macros_plugin_version = '0.6.0', jinja2_version = '3.0.1' plugin Config module_name = 'main', modules = [], include_dir = '', include_yaml = [], j2_block_start_string = '', j2_block_end_string = '', j2_variable_start_string = '', j2_variable_end_string = '', verbose = False git dict status = True, date [ datetime ], short_commit = '7bb91c4', commit = '7bb91c4e4eea5c0893daa0cd0b274eb66430d44d', author = 'Erich K\u00e4stner', tag = '', date_ISO = '2021-11-13 12:40:02 +0100', message = 'Merge pull request #22 from libronlopes/docs/dmsg-docs\\n\\nAdd dmsg setup instructions', raw = 'commit 7bb91c4e4eea5c0893daa0cd0b274eb66430d44d\\nMerge: 9974928 4259325\\nAuthor: Erich K\u00e4stner < 36450093+jdknives@users.noreply.github.com>\\nDate: Sat Nov 13 12:40:02 2021 +0100\\n\\n Merge pull request #22 from libronlopes/docs/dmsg-docs\\n \\n Add dmsg setup instructions', root_dir = '/home/rudi/go/src/github.com/skycoin/wiki' social list [{'icon': 'fontawesome/solid/globe', 'link': 'https://www.skycoin.com/'}, {'icon': 'fontawesome/brands/twitter', 'link': 'https://twitter.com/Skycoinproject'}, {'icon': 'fontawesome/brands/linkedin', 'link': 'https://www.linkedin.com/company/skycoin'}, {'icon': 'fontawesome/brands/telegram', 'link': 'https://t.me/Skycoin'}, {'icon': 'fontawesome/brands/discord', 'link': 'https://discord.gg/EgBenrW'}, {'icon': 'fontawesome/brands/medium', 'link': 'https://medium.com/skycoin'}, {'icon': 'fontawesome/brands/reddit', 'link': 'https://www.reddit.com/r/skycoin'}, {'icon': 'fontawesome/brands/instagram', 'link': 'https://www.instagram.com/skycoinproject/'}, {'icon': 'fontawesome/brands/youtube', 'link': 'https://www.youtube.com/channel/UC_rRSG_Db1D-rnmU20b_kRg'}, {'icon': 'fontawesome/brands/facebook', 'link': 'https://www.facebook.com/SkycoinOfficial/'}] issue_url str 'https://github.com/skycoin/wiki/issues' macros SuperDict context [ function ], macros_info [ function ], now [ function ], fix_url [ function ] filters dict pretty [ function ] filters_builtin dict abs [ builtin_function_or_method ], attr [ function ], batch [ function ], capitalize [ function ], center [ function ], count [ builtin_function_or_method ], d [ function ], default [ function ], dictsort [ function ], e [ builtin_function_or_method ], escape [ builtin_function_or_method ], filesizeformat [ function ], first [ function ], float [ function ], forceescape [ function ], format [ function ], groupby [ function ], indent [ function ], int [ function ], join [ function ], last [ function ], length [ builtin_function_or_method ], list [ function ], lower [ function ], map [ function ], min [ function ], max [ function ], pprint [ function ], random [ function ], reject [ function ], rejectattr [ function ], replace [ function ], reverse [ function ], round [ function ], safe [ function ], select [ function ], selectattr [ function ], slice [ function ], sort [ function ], string [ builtin_function_or_method ], striptags [ function ], sum [ function ], title [ function ], trim [ function ], truncate [ function ], unique [ function ], upper [ function ], urlencode [ function ], urlize [ function ], wordcount [ function ], wordwrap [ function ], xmlattr [ function ], tojson [ function ] navigation Navigation Page(title='Home', url='.') Section(title='Software') Page(title='Overview', url='software/') Section(title='Skycoin') Page(title='Overview', url='software/skycoin/') Page(title='About', url='software/skycoin/about/') Page(title='Social', url='software/skycoin/social/') Link(title='Explorer', url='https://explorer.skycoin.com/app/blocks/1') Section(title='Fiber') Page(title='Overview', url='software/fiber/') Page(title='Fiber-Projects', url='software/fiber/fiber-coins/') Section(title='Skywire') Page(title='Overview', url='software/skywire/') Section(title='Setup') Page(title='macOS', url='software/skywire/setup/macos/') Page(title='Windows', url='software/skywire/setup/windows/') Page(title='Linux', url='software/skywire/setup/linux/') Page(title='Docker', url='software/skywire/setup/docker/') Page(title='Static Build', url='software/skywire/setup/static-build/') Section(title='Configuration') Page(title='Hypervisor Mode', url='software/skywire/configuration/hypervisor-mode/') Page(title='Visor Mode', url='software/skywire/configuration/visor-mode/') Page(title='Network Configuration', url='software/skywire/configuration/network-config/') Section(title='VPN Configuration') Page(title='VPN Client', url='software/skywire/configuration/vpn-config/vpn-client/') Page(title='VPN Server', url='software/skywire/configuration/vpn-config/vpn-server/') Section(title='Dev Docs') Page(title='Terminology', url='software/skywire/devdocs/terminology/') Page(title='Architecture', url='software/skywire/devdocs/architecture/') Section(title='CX') Page(title='Overview', url='software/cx/') Page(title='About', url='software/cx/about/') Section(title='Setup') Page(title='Overview', url='software/cx/setup/overview/') Page(title='Windows', url='software/cx/setup/windows/') Page(title='macOS', url='software/cx/setup/macos/') Page(title='Linux', url='software/cx/setup/linux/') Section(title='Programming Tools') Page(title='VS Code', url='software/cx/setup/vscode/') Page(title='Emacs', url='software/cx/setup/emacs/') Page(title='Atom', url='software/cx/setup/atom/') Section(title='User Docs') Page(title='Overview', url='software/cx/userdocs/overview/') Section(title='Basics') Page(title='Syntax', url='software/cx/userdocs/basics-syntax/') Page(title='Runtime', url='software/cx/userdocs/basics-runtime/') Page(title='Native Functions', url='software/cx/userdocs/basics-native-functions/') Page(title='Running CX', url='software/cx/userdocs/basics-running-cx/') Page(title='REPL', url='software/cx/userdocs/basics-repl/') Section(title='Native Packages') Page(title='time', url='software/cx/userdocs/package-time/') Page(title='os', url='software/cx/userdocs/package-os/') Page(title='gl', url='software/cx/userdocs/package-gl/') Page(title='glfw', url='software/cx/userdocs/package-glfw/') Page(title='gltext', url='software/cx/userdocs/package-gltext/') Page(title='Social', url='software/cx/social/') Link(title='CX Tracker', url='https://cx-tracker.skycoin.com/') Section(title='CXO') Page(title='Overview', url='software/cxo/') Page(title='About', url='software/cxo/about/') Link(title='CXO Tracker', url='https://cxo.skycoin.com/') Section(title='CXFX') Page(title='Overview', url='software/cxfx/') Page(title='About', url='software/cxfx/about/') Page(title='Roadmap', url='software/cxfx/roadmap/') Section(title='DMSG') Page(title='DMSG Build', url='software/dmsg/dmsg/') Page(title='Docker', url='software/dmsg/docker/') Page(title='DMSGPTY', url='software/dmsg/dmsgpty/') Page(title='DMSGGET', url='software/dmsg/dmsgget/') Section(title='System Admin') Page(title='Dmsg Server', url='software/sys-admin/dmsg-server/') Page(title='Public Visor', url='software/sys-admin/public-visor/') Page(title='VPN Server', url='software/sys-admin/vpn-server/') Section(title='Hardware') Page(title='Overview', url='hardware/') Section(title='Skyminer') Page(title='Overview', url='hardware/skyminer/') Page(title='About', url='hardware/skyminer/about/') Page(title='Setup', url='hardware/skyminer/setup/') Page(title='Software', url='hardware/skyminer/setup_software/') Page(title='Networking', url='hardware/skyminer/networking/') Section(title='Skywallet') Page(title='Overview', url='hardware/skywallet/') Page(title='About', url='hardware/skywallet/about/') Page(title='Skywallet HDK', url='hardware/skywalletdk/') Page(title='Contribute', url='contribute/') Page(title='About', url='about/') files Files page Page Page(title='Info', url='info/')","title":"General List"},{"location":"info/#config-information","text":"Standard MkDocs configuration information. Do not try to modify. e.g. {{ config.docs_dir }} See also the MkDocs documentation on the config object . Variable Type Content config_file_path str '/home/rudi/go/src/github.com/skycoin/wiki/mkdocs.yml' site_name str 'Skycoin Wiki' nav list [{'Home': 'index.md'}, {'Software': [{'Overview': 'software/index.md'}, {'Skycoin': [{'Overview': 'software/skycoin/index.md'}, {'About': 'software/skycoin/about.md'}, {'Social': 'software/skycoin/social.md'}, {'Explorer': 'https://explorer.skycoin.com/app/blocks/1'}]}, {'Fiber': [{'Overview': 'software/fiber/index.md'}, {'Fiber-Projects': 'software/fiber/fiber-coins.md'}]}, {'Skywire': [{'Overview': 'software/skywire/index.md'}, {'Setup': [{'macOS': 'software/skywire/setup/macos.md'}, {'Windows': 'software/skywire/setup/windows.md'}, {'Linux': 'software/skywire/setup/linux.md'}, {'Docker': 'software/skywire/setup/docker.md'}, {'Static Build': 'software/skywire/setup/static-build.md'}]}, {'Configuration': [{'Hypervisor Mode': 'software/skywire/configuration/hypervisor-mode.md'}, {'Visor Mode': 'software/skywire/configuration/visor-mode.md'}, {'Network Configuration': 'software/skywire/configuration/network-config.md'}, {'VPN Configuration': [{'VPN Client': 'software/skywire/configuration/vpn-config/vpn-client.md'}, {'VPN Server': 'software/skywire/configuration/vpn-config/vpn-server.md'}]}]}, {'Dev Docs': [{'Terminology': 'software/skywire/devdocs/terminology.md'}, {'Architecture': 'software/skywire/devdocs/architecture.md'}]}]}, {'CX': [{'Overview': 'software/cx/index.md'}, {'About': 'software/cx/about.md'}, {'Setup': [{'Overview': 'software/cx/setup/overview.md'}, {'Windows': 'software/cx/setup/windows.md'}, {'macOS': 'software/cx/setup/macos.md'}, {'Linux': 'software/cx/setup/linux.md'}, {'Programming Tools': [{'VS Code': 'software/cx/setup/vscode.md'}, {'Emacs': 'software/cx/setup/emacs.md'}, {'Atom': 'software/cx/setup/atom.md'}]}]}, {'User Docs': [{'Overview': 'software/cx/userdocs/overview.md'}, {'Basics': [{'Syntax': 'software/cx/userdocs/basics-syntax.md'}, {'Runtime': 'software/cx/userdocs/basics-runtime.md'}, {'Native Functions': 'software/cx/userdocs/basics-native-functions.md'}, {'Running CX': 'software/cx/userdocs/basics-running-cx.md'}, {'REPL': 'software/cx/userdocs/basics-repl.md'}]}, {'Native Packages': [{'time': 'software/cx/userdocs/package-time.md'}, {'os': 'software/cx/userdocs/package-os.md'}, {'gl': 'software/cx/userdocs/package-gl.md'}, {'glfw': 'software/cx/userdocs/package-glfw.md'}, {'gltext': 'software/cx/userdocs/package-gltext.md'}]}]}, {'Social': 'software/cx/social.md'}, {'CX Tracker': 'https://cx-tracker.skycoin.com/'}]}, {'CXO': [{'Overview': 'software/cxo/index.md'}, {'About': 'software/cxo/about.md'}, {'CXO Tracker': 'https://cxo.skycoin.com/'}]}, {'CXFX': [{'Overview': 'software/cxfx/index.md'}, {'About': 'software/cxfx/about.md'}, {'Roadmap': 'software/cxfx/roadmap.md'}]}, {'DMSG': [{'DMSG Build': 'software/dmsg/dmsg.md'}, {'Docker': 'software/dmsg/docker.md'}, {'DMSGPTY': 'software/dmsg/dmsgpty.md'}, {'DMSGGET': 'software/dmsg/dmsgget.md'}]}, {'System Admin': [{'Dmsg Server': 'software/sys-admin/dmsg-server.md'}, {'Public Visor': 'software/sys-admin/public-visor.md'}, {'VPN Server': 'software/sys-admin/vpn-server.md'}]}]}, {'Hardware': [{'Overview': 'hardware/index.md'}, {'Skyminer': [{'Overview': 'hardware/skyminer/index.md'}, {'About': 'hardware/skyminer/about.md'}, {'Setup': 'hardware/skyminer/setup.md'}, {'Software': 'hardware/skyminer/setup_software.md'}, {'Networking': 'hardware/skyminer/networking.md'}]}, {'Skywallet': [{'Overview': 'hardware/skywallet/index.md'}, {'About': 'hardware/skywallet/about.md'}]}, {'Skywallet HDK': 'hardware/skywalletdk/index.md'}]}, {'Contribute': 'contribute.md'}, {'About': 'about.md'}] pages NoneType None site_url str '' site_description str 'Welcome to our wiki! Navigate with the buttons below or search for a keyword.' site_author NoneType None theme Theme Theme(name='material', dirs=['/home/rudi/go/src/github.com/skycoin/wiki/overrides', '/home/rudi/.local/lib/python3.9/site-packages/material', '/home/rudi/.local/lib/python3.9/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], locale=Locale(language='en', territory=''), language='en', direction=None, features=['header.autohide', 'navigation.instant', 'navigation.tabs', 'toc.autohide'], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='img/Skycoin-Cloud-Blue.png', include_search_page=False, search_index_only=True, logo='img/Skycoin-Cloud-White.png') docs_dir str '/home/rudi/go/src/github.com/skycoin/wiki/docs' site_dir str '/home/rudi/go/src/github.com/skycoin/wiki/site' copyright NoneType None google_analytics NoneType None dev_addr Address Address(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url str 'https://github.com/skycoin/' repo_name str 'github.com/skycoin' edit_uri str 'wiki/blob/master/docs/' extra_css list ['stylesheets/extra.css'] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'meta', 'admonition', 'pymdownx.details', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.smartsymbols', 'pymdownx.caret', 'pymdownx.mark', 'pymdownx.tilde', 'footnotes', 'attr_list', 'def_list', 'pymdownx.tasklist', 'pymdownx.emoji'] mdx_configs dict pymdownx.tasklist [ dict ], pymdownx.emoji [ dict ] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra SubConfig {'social': [{'icon': 'fontawesome/solid/globe', 'link': 'https://www.skycoin.com/'}, {'icon': 'fontawesome/brands/twitter', 'link': 'https://twitter.com/Skycoinproject'}, {'icon': 'fontawesome/brands/linkedin', 'link': 'https://www.linkedin.com/company/skycoin'}, {'icon': 'fontawesome/brands/telegram', 'link': 'https://t.me/Skycoin'}, {'icon': 'fontawesome/brands/discord', 'link': 'https://discord.gg/EgBenrW'}, {'icon': 'fontawesome/brands/medium', 'link': 'https://medium.com/skycoin'}, {'icon': 'fontawesome/brands/reddit', 'link': 'https://www.reddit.com/r/skycoin'}, {'icon': 'fontawesome/brands/instagram', 'link': 'https://www.instagram.com/skycoinproject/'}, {'icon': 'fontawesome/brands/youtube', 'link': 'https://www.youtube.com/channel/UC_rRSG_Db1D-rnmU20b_kRg'}, {'icon': 'fontawesome/brands/facebook', 'link': 'https://www.facebook.com/SkycoinOfficial/'}], 'issue_url': 'https://github.com/skycoin/wiki/issues'} plugins PluginCollection git-revision-date [ GitRevisionDatePlugin ], search [ SearchPlugin ], macros [ MacrosPlugin ]","title":"Config Information"},{"location":"info/#macros","text":"These macros have been defined programmatically for this environment (module or pluglets). Variable Type Content context function ( obj, e ) Default mkdocs_macro List the defined variables macros_info function ( ) Test/debug function: list useful documentation on the mkdocs_macro environment. now function ( ) Get the current time (returns a datetime object). Used alone, it provides a timestamp. To get the year use now().year , for the month number now().month , etc. fix_url function ( url, r ) If url is relative, fix it so that it points to the docs diretory. This is necessary because relative links in markdown must be adapted in html ('img/foo.png' => '../img/img.png').","title":"Macros"},{"location":"info/#git-information","text":"Information available on the last commit and the git repository containing the documentation project: e.g. {{ git.message }} Variable Type Content status bool True date datetime datetime.datetime(2021, 11, 13, 12, 40, 2, tzinfo=tzoffset(None, 3600)) short_commit str '7bb91c4' commit str '7bb91c4e4eea5c0893daa0cd0b274eb66430d44d' author str 'Erich K\u00e4stner' tag str '' date_ISO str '2021-11-13 12:40:02 +0100' message str 'Merge pull request #22 from libronlopes/docs/dmsg-docs\\n\\nAdd dmsg setup instructions' raw str 'commit 7bb91c4e4eea5c0893daa0cd0b274eb66430d44d\\nMerge: 9974928 4259325\\nAuthor: Erich K\u00e4stner < 36450093+jdknives@users.noreply.github.com>\\nDate: Sat Nov 13 12:40:02 2021 +0100\\n\\n Merge pull request #22 from libronlopes/docs/dmsg-docs\\n \\n Add dmsg setup instructions' root_dir str '/home/rudi/go/src/github.com/skycoin/wiki'","title":"Git Information"},{"location":"info/#page-attributes","text":"Provided by MkDocs. These attributes change for every page (the attributes shown are for this page). e.g. {{ page.title }} See also the MkDocs documentation on the page object . Variable Type Content file File page [ Page ], src_path = 'info.md', abs_src_path = '/home/rudi/go/src/github.com/skycoin/wiki/docs/info.md', name = 'info', dest_path = 'info/index.html', abs_dest_path = '/home/rudi/go/src/github.com/skycoin/wiki/site/info/index.html', url = 'info/' title str 'Info' parent NoneType None children NoneType None previous_page NoneType None next_page NoneType None _Page__active bool False is_section bool False is_page bool True is_link bool False update_date str '2021-11-13' canonical_url NoneType None abs_url NoneType None edit_url str 'https://github.com/skycoin/wiki/blob/master/docs/info.md' markdown str '{{ macros_info() }}' content NoneType None toc list [] meta dict revision_date = '2020-11-17' To have all titles of all pages, use: {% for page in navigation.pages %} - {{ page.title }} {% endfor% }","title":"Page Attributes"},{"location":"info/#plugin-filters","text":"These filters are provided as a standard by the macros plugin. Variable Type Content pretty function ( var_list, rows, header, e ) Default mkdocs_macro Prettify a dictionary or object (used for environment documentation, or debugging).","title":"Plugin Filters"},{"location":"info/#builtin-jinja2-filters","text":"These filters are provided by Jinja2 as a standard. See also the Jinja2 documentation on builtin filters ). Variable Type Content abs builtin_function_or_method Return the absolute value of the argument. attr function ( environment, obj, name, value ) Get an attribute of an object. foo|attr(\"bar\") works like foo.bar just that always an attribute is returned and items are not looked up. batch function ( value, linecount, fill_with, tmp, item ) A filter that batches items. It works pretty much like slice just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example. capitalize function ( s ) Capitalize a value. The first character will be uppercase, all others lowercase. center function ( value, width ) Centers the value in a field of a given width. count builtin_function_or_method Return the number of items in a container. d function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. default function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. dictsort function ( value, case_sensitive, by, reverse, sort_func ) Sort a dict and yield (key, value) pairs. Python dicts may not be in the order you want to display them in, so sort them first. e builtin_function_or_method Replace the characters & , < , > , ' , and \" in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. escape builtin_function_or_method Replace the characters & , < , > , ' , and \" in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. filesizeformat function ( value, binary, bytes, base, prefixes, i, prefix, unit ) Format the value like a 'human-readable' file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to True the binary prefixes are used (Mebi, Gibi). first function ( args, kwargs, b ) Return the first item of a sequence. float function ( value, default ) Convert the value into a floating point number. If the conversion doesn't work it will return 0.0 . You can override this default using the first parameter. forceescape function ( value ) Enforce HTML escaping. This will probably double escape variables. format function ( value, args, kwargs ) Apply the given values to a printf-style _ format string, like string % values . groupby function ( args, kwargs, b ) Group a sequence of objects by an attribute using Python's :func: itertools.groupby . The attribute can use dot notation for nested access, like \"address.city\" . Unlike Python's groupby , the values are sorted first so only one group is returned for each unique value. indent function ( s, width, first, blank, newline, rv, lines ) Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default. int function ( value, default, base ) Convert the value into an integer. If the conversion doesn't work it will return 0 . You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values. join function ( args, kwargs, b ) Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter. last function ( environment, seq ) Return the last item of a sequence. length builtin_function_or_method Return the number of items in a container. list function ( args, kwargs, b ) Convert the value into a list. If it was a string the returned list will be a list of characters. lower function ( s ) Convert a value to lowercase. map function ( args, kwargs, b ) Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it. min function ( environment, value, case_sensitive, attribute ) Return the smallest item from the sequence. max function ( environment, value, case_sensitive, attribute ) Return the largest item from the sequence. pprint function ( value ) Pretty print a variable. Useful for debugging. random function ( context, seq ) Return a random item from the sequence. reject function ( args, kwargs, b ) Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding. rejectattr function ( args, kwargs, b ) Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding. replace function ( eval_ctx, s, old, new, count ) Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced. reverse function ( value, rv ) Reverse the object or return an iterator that iterates over it the other way round. round function ( value, precision, method, func ) Round the number to a given precision. The first parameter specifies the precision (default is 0 ), the second the rounding method. safe function ( value ) Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped. select function ( args, kwargs, b ) Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding. selectattr function ( args, kwargs, b ) Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding. slice function ( args, kwargs, b ) Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns. sort function ( environment, value, reverse, case_sensitive, attribute, key_func ) Sort an iterable using Python's :func: sorted . string builtin_function_or_method Convert an object to a string if it isn't already. This preserves a :class: Markup string rather than converting it back to a basic string, so it will still be marked as safe and won't be escaped again. striptags function ( value ) Strip SGML/XML tags and replace adjacent whitespace by one space. sum function ( args, kwargs, b ) Returns the sum of a sequence of numbers plus the value of parameter 'start' (which defaults to 0). When the sequence is empty it returns start. title function ( s ) Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase. trim function ( value, chars ) Strip leading and trailing characters, by default whitespace. truncate function ( env, s, length, killwords, end, leeway, result ) Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255 . If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign ( \"...\" ). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated. unique function ( environment, value, case_sensitive, attribute, getter, seen, item, key ) Returns a list of unique items from the given iterable. upper function ( s ) Convert a value to uppercase. urlencode function ( value, items ) Quote data for use in a URL path or query using UTF-8. urlize function ( eval_ctx, value, trim_url_limit, nofollow, target, rel, extra_schemes, policies, rel_parts, scheme, rv ) Convert URLs in text into clickable links. wordcount function ( s ) Count the words in that string. wordwrap function ( environment, s, width, break_long_words, wrapstring, break_on_hyphens ) Wrap a string to the given width. Existing newlines are treated as paragraphs to be wrapped separately. xmlattr function ( eval_ctx, d, autospace, rv ) Create an SGML/XML attribute string based on the items in a dict. All values that are neither none nor undefined are automatically escaped. tojson function ( eval_ctx, value, indent, policies, dumps, kwargs ) Serialize an object to a string of JSON, and mark it safe to render in HTML. This filter is only for use in HTML documents.","title":"Builtin Jinja2 Filters"},{"location":"meetups/","text":"Join the Skycoin Meetups Telegram Group for more information. Thursday, 2019 Oct 17 th 6-8pm at the New York City Blockchain Center Saturday, 2019 Oct 19 th 4pm at the Cryptospace Los Angeles Thursday, 2019 Dec 5 th 6-8pm at the New York City Blockchain Center Saturday, 2019 Dec 7 th 4pm at the Cryptospace Los Angeles Friday, 2020 May 8 th 7-9pm at Meetup.com (FR) Workshops Here we will list and or link all upcoming workshops regarding Skycoin's projects.","title":"Meetups"},{"location":"meetups/#workshops","text":"Here we will list and or link all upcoming workshops regarding Skycoin's projects.","title":"Workshops"},{"location":"news/","text":"Sources Skycoin-Blog RSS-Feed Articles 2020/05/06 Cointelegraph - Bitcoin Is a Digital Asset Says Intermediate People's Court in China Medium - Total Vindication for Skycoin Founder in 'Kidnapping' Case Medium - Skycoin lawsuit affirms Bitcoin is legitimate property in China","title":"News"},{"location":"news/#sources","text":"Skycoin-Blog RSS-Feed","title":"Sources"},{"location":"news/#articles","text":"","title":"Articles"},{"location":"news/#20200506","text":"Cointelegraph - Bitcoin Is a Digital Asset Says Intermediate People's Court in China Medium - Total Vindication for Skycoin Founder in 'Kidnapping' Case Medium - Skycoin lawsuit affirms Bitcoin is legitimate property in China","title":"2020/05/06"},{"location":"partnerships/","text":"UNWYRED ISP LBank - Genesis Community Node NYC Blockchain Center - Growth Level member Jiangxi University of Software Professional Technology","title":"Partnerships"},{"location":"roadmap/","text":"Skycoin's Todo-list Here is a list of things that skycoin is working on in the near future: Note There is a reason why there are no dates given as it is impossible to set a date because of potential priority changes CX v1.0 release CXO next milestone to enable integration of Obelisk Obelisk as soon as CX with CX-Chains and CXO is enabling the integration. Skywire (Github Projects) v0.3.1 Patch for Skywire v3. Fixes a host of smaller Skybian UX issues as well as two major bugs for Skywire v3. fix nonce issue for Skywire-services fix potential security issue for Skywire VPN adds -p flag for config generation v0.4 This release will include the following features: Automatic transport setup VPN UI Combine Visor and Hypervisor concepts Route multiplexing Debian package Skycoin (Github Projects) reduce SCH burn to 1% Hardware Wallet Integration of BTC Integration of ETH Wiki Serve documentation for all products (for users and developers)","title":"Skycoin's Todo-list"},{"location":"roadmap/#skycoins-todo-list","text":"Here is a list of things that skycoin is working on in the near future: Note There is a reason why there are no dates given as it is impossible to set a date because of potential priority changes","title":"Skycoin's Todo-list"},{"location":"roadmap/#cx","text":"v1.0 release","title":"CX"},{"location":"roadmap/#cxo","text":"next milestone to enable integration of Obelisk","title":"CXO"},{"location":"roadmap/#obelisk","text":"as soon as CX with CX-Chains and CXO is enabling the integration.","title":"Obelisk"},{"location":"roadmap/#skywire-github-projects","text":"v0.3.1 Patch for Skywire v3. Fixes a host of smaller Skybian UX issues as well as two major bugs for Skywire v3. fix nonce issue for Skywire-services fix potential security issue for Skywire VPN adds -p flag for config generation v0.4 This release will include the following features: Automatic transport setup VPN UI Combine Visor and Hypervisor concepts Route multiplexing Debian package","title":"Skywire (Github Projects)"},{"location":"roadmap/#skycoin-github-projects","text":"reduce SCH burn to 1%","title":"Skycoin (Github Projects)"},{"location":"roadmap/#hardware-wallet","text":"Integration of BTC Integration of ETH","title":"Hardware Wallet"},{"location":"roadmap/#wiki","text":"Serve documentation for all products (for users and developers)","title":"Wiki"},{"location":"timeline/","text":"Format: YYYY/MM/DD 2020/12/01 Wiki First time wiki is online. 2020/10/11 Skywire VPN beta Blog Article 2020/04/06 Skywire Mainnet Blog Article 2020/03/06 CXO2 1 st Milestone Blog Article 2019/06/13 CX v0.7 Blog Article 2018/12/01 Gold Label Binance Blog Article 2018/11/15 iOS Wallet Blog Article 2018/08/17 Android Wallet","title":"Timeline"},{"location":"timeline/#20201201-wiki","text":"First time wiki is online.","title":"2020/12/01 Wiki"},{"location":"timeline/#20201011-skywire-vpn-beta","text":"Blog Article","title":"2020/10/11 Skywire VPN beta"},{"location":"timeline/#20200406-skywire-mainnet","text":"Blog Article","title":"2020/04/06 Skywire Mainnet"},{"location":"timeline/#20200306-cxo2-1st-milestone","text":"Blog Article","title":"2020/03/06 CXO2 1st Milestone"},{"location":"timeline/#20190613-cx-v07","text":"Blog Article","title":"2019/06/13 CX v0.7"},{"location":"timeline/#20181201-gold-label-binance","text":"Blog Article","title":"2018/12/01 Gold Label Binance"},{"location":"timeline/#20181115-ios-wallet","text":"Blog Article","title":"2018/11/15 iOS Wallet"},{"location":"timeline/#20180817-android-wallet","text":"","title":"2018/08/17 Android Wallet"},{"location":"videos/","text":"Videos Official Channels Skycoin Roadmap Talks Synth Talks - Skycoin Roadmap 1 2 3 4","title":"Videos"},{"location":"videos/#videos","text":"","title":"Videos"},{"location":"videos/#official-channels","text":"Skycoin","title":"Official Channels"},{"location":"videos/#roadmap-talks","text":"Synth Talks - Skycoin Roadmap 1 2 3 4","title":"Roadmap Talks"},{"location":"hardware/","text":"Hardware Overview Skywallet Skywallet HDK Skyminer","title":"Overview"},{"location":"hardware/#hardware-overview","text":"Skywallet Skywallet HDK Skyminer","title":"Hardware Overview"},{"location":"hardware/skyminer/","text":"Skyminer TODO: copy from skywire wiki and write new content","title":"Overview"},{"location":"hardware/skyminer/#skyminer","text":"TODO: copy from skywire wiki and write new content","title":"Skyminer"},{"location":"hardware/skyminer/about/","text":"TO DO","title":"About"},{"location":"hardware/skyminer/networking/","text":"Networking Guide Official Skyminer This guide assumes that you have read and understood the readme.md, downloaded the official images and do every step exactly the way it is described. Misconduct will lead to the inability to connect and to potential reflashing. It is very important that there is no IP collision with your existing home router subnet. The default settings of the official images, as well as the router of the Skyminer, are using the 192.168.0.0/24 subnet while deviating IP configurations may work. Introduction After finishing off all the steps in this guide you will be able to access the hypervisorUI from within your home network, access the devices in the subnet of the Skyminer router via SSH and of course, capable of using the SOCKS5 Skywire proxy. The Skyminer router has 8 LAN ports, so during this guide, you will need to unplug one from the router to gain access with your computer, later on, you will have to plug it back in. Before you're starting with this guide please turn off all pi's, none of them need to run until you are being told to turn them on. Requirements in Hardware & Software Official Skyminer router. You are advised to flash the sd cards of the orange pi prime's with the official images, refer to the Skyimager Guide for instructions or build Skywire from source . Manual installation of Skywire works just as fine but needs manual adjustments of setting up systemd services etc. Computer/laptop with LAN port LAN cable Setup Before you do the following steps make sure that there is no cable attached to the WAN port of the Skyminer router. Restart both the Skyminer router and your computer. Accessing the interface of the router Connect your computer to a LAN port of the Skyminer router, it doesn't matter which one. Then open a browser window and type: 192.168.0.1 The router interface should come up, looking like this: If you are queried to type in a password it is 'admin'. As you can see the default language is in Chinese, to proceed we need to change it to English. To accomplish this go the rightmost tab: Choose the 2 nd option in the drop-down menu and click on the right button. After that refresh the page, it should look like this: Port Forwarding rules Now that the language is changed we can proceed and set up the necessary port forwarding rules to access the Skywire manager from outside the subnet of the Skyminer router (i.e. when you're not connected to one of its LAN ports). Change to the port forwarding menu: Turn Port Forwarding on: The screen you are now looking at looks like this: Now you need to add four port forwarding rules. Rule 1 will allow you to access the manager pi via ssh connection: IP Address: 192.168.0.2 Protocol: TCP+UDP Internal Port: 22 External Port: 22 Description: SSH Click on 'Add', then proceed with rule 2. Rule 2 will allow you to access the hypervisorUI : IP Address: 192.168.0.2 Protocol: TCP+UDP Internal Port: 8000 External Port: 8000 Description: Manager Rule 3 and rule 4 will only allow access to the SOCKS5 proxy & Skychat app of the board with IP address 192.168.0.4 If you decide to use a board with a different IP address for using the SOCKS5 proxy or the Skychat app later on you must adjust these rules accordingly. Click on 'Add' and proceed with rule 3. Rule 3 will allow you to use the SOCKS5 proxy of the board with IP address 192.168.0.4 after establishing a connection within the Skywire network: IP Address: 192.168.0.4 Protocol: TCP+UDP Internal Port: 1080 External Port: 1080 Description: SOCKS5 Click on 'Add' and proceed with rule 4. Rule 4 will allow you to use the Skychat app of the board with IP address 192.168.0.4 after establishing a connection within the Skywire network. IP Address: 192.168.0.4 Protocol: TCP+UDP Internal Port: 8001 External Port: 8001 Description: Skychat Once all rules are added it should look like this: This part is finished, disconnect your computer from the LAN port and plug the remaining pi back in. Now please turn off the Skyminer router. Optional: assign static IP address for the Skyminer router Now that the configuration of the Skyminer router is finished you can specify a static IP for it inside your home router. This will add convenience once you want to view the manager and access the nodes during the testnet. To do this, you need to log into your home router (if you're not sure how to do this read this https://www.lifewire.com/how-to-find-your-default-gateway-ip-address-2626072). Once you're in you can go to static leases or a similar term (located somewhere in LAN settings; highly dependent on your router model, this is a very broad description. Please download the manual of your router to get a detailed guide how to accomplish this) and assign the static IP lease for the Skyminer router. You will need the MAC address of the Skyminer router for this, you can find it on the 'Home'-page of the router interface or in your home router's web interface: Usage Please refer to the - Run HypervisorUI on local machine guide or - Run HypervisorUI on manager board (official images) dependent on where the hypervisorUI is running. Obtain IP Address within your home network Now you need to plug in a cable into the WAN port of the Skyminer router going into a LAN port of your home router and turn on your Skyminer router. To access the manager or any device within the subnet of the Skyminer router you need the IP that it got assigned by your home router. To obtain it you have 3 options (they increase in difficulty from one to three): 1) Visit the Skyminer router interface and obtain the IP address from the 'Home'page. The IP is displayed under 'Internet -> Status', if you connected a LAN cable to the WAN port of the Skyminer router it will be displayed inside the red rectangle: To do the following two steps you need to disconnect your computer from the Skyminer router and connect it to your home router. 2) Login to your home router and go to 'Connected Devices', you'll see a device called 'myap', this is the Skyminer router. 3) Use network scan software like for example nmap to scan the subnet of your home router. The following is an example for the 192.168.1.1/24 subnet nmap -sP 192.168.1.1/24 Will give you all active devices within the subnet. If you aren't familiar with using the command line you can use the multi-platform tool Zenmap, which provides a UI for nmap . Please note down the IP address, we'll need it to access the hypervisorUI . Viewing the HypervisorUI Please refer to: - this guide if you setup the hypervisor to be executed on one of the boards - this guide if you setup the hypervisor to run locally on your own machine Troubleshooting Reset Router Several different issues may require you to reset the router. An example would be if the language doesn't change immediately don't panic, numerous people experienced this. Try the following steps: * Refresh the page * Switch the language back and forth multiple times * Clean your browser cache * Try a different browser * Reset the router with the factory reset button by pressing it for ~ 20 seconds Keep in mind that resetting the router removes any port forwarding rules you put in place!","title":"Networking"},{"location":"hardware/skyminer/networking/#networking-guide-official-skyminer","text":"This guide assumes that you have read and understood the readme.md, downloaded the official images and do every step exactly the way it is described. Misconduct will lead to the inability to connect and to potential reflashing. It is very important that there is no IP collision with your existing home router subnet. The default settings of the official images, as well as the router of the Skyminer, are using the 192.168.0.0/24 subnet while deviating IP configurations may work.","title":"Networking Guide Official Skyminer"},{"location":"hardware/skyminer/networking/#introduction","text":"After finishing off all the steps in this guide you will be able to access the hypervisorUI from within your home network, access the devices in the subnet of the Skyminer router via SSH and of course, capable of using the SOCKS5 Skywire proxy. The Skyminer router has 8 LAN ports, so during this guide, you will need to unplug one from the router to gain access with your computer, later on, you will have to plug it back in. Before you're starting with this guide please turn off all pi's, none of them need to run until you are being told to turn them on.","title":"Introduction"},{"location":"hardware/skyminer/networking/#requirements-in-hardware-software","text":"Official Skyminer router. You are advised to flash the sd cards of the orange pi prime's with the official images, refer to the Skyimager Guide for instructions or build Skywire from source . Manual installation of Skywire works just as fine but needs manual adjustments of setting up systemd services etc. Computer/laptop with LAN port LAN cable","title":"Requirements in Hardware &amp; Software"},{"location":"hardware/skyminer/networking/#setup","text":"Before you do the following steps make sure that there is no cable attached to the WAN port of the Skyminer router. Restart both the Skyminer router and your computer.","title":"Setup"},{"location":"hardware/skyminer/networking/#accessing-the-interface-of-the-router","text":"Connect your computer to a LAN port of the Skyminer router, it doesn't matter which one. Then open a browser window and type: 192.168.0.1 The router interface should come up, looking like this: If you are queried to type in a password it is 'admin'. As you can see the default language is in Chinese, to proceed we need to change it to English. To accomplish this go the rightmost tab: Choose the 2 nd option in the drop-down menu and click on the right button. After that refresh the page, it should look like this:","title":"Accessing the interface of the router"},{"location":"hardware/skyminer/networking/#port-forwarding-rules","text":"Now that the language is changed we can proceed and set up the necessary port forwarding rules to access the Skywire manager from outside the subnet of the Skyminer router (i.e. when you're not connected to one of its LAN ports). Change to the port forwarding menu: Turn Port Forwarding on: The screen you are now looking at looks like this: Now you need to add four port forwarding rules. Rule 1 will allow you to access the manager pi via ssh connection: IP Address: 192.168.0.2 Protocol: TCP+UDP Internal Port: 22 External Port: 22 Description: SSH Click on 'Add', then proceed with rule 2. Rule 2 will allow you to access the hypervisorUI : IP Address: 192.168.0.2 Protocol: TCP+UDP Internal Port: 8000 External Port: 8000 Description: Manager Rule 3 and rule 4 will only allow access to the SOCKS5 proxy & Skychat app of the board with IP address 192.168.0.4 If you decide to use a board with a different IP address for using the SOCKS5 proxy or the Skychat app later on you must adjust these rules accordingly. Click on 'Add' and proceed with rule 3. Rule 3 will allow you to use the SOCKS5 proxy of the board with IP address 192.168.0.4 after establishing a connection within the Skywire network: IP Address: 192.168.0.4 Protocol: TCP+UDP Internal Port: 1080 External Port: 1080 Description: SOCKS5 Click on 'Add' and proceed with rule 4. Rule 4 will allow you to use the Skychat app of the board with IP address 192.168.0.4 after establishing a connection within the Skywire network. IP Address: 192.168.0.4 Protocol: TCP+UDP Internal Port: 8001 External Port: 8001 Description: Skychat Once all rules are added it should look like this: This part is finished, disconnect your computer from the LAN port and plug the remaining pi back in. Now please turn off the Skyminer router.","title":"Port Forwarding rules"},{"location":"hardware/skyminer/networking/#optional-assign-static-ip-address-for-the-skyminer-router","text":"Now that the configuration of the Skyminer router is finished you can specify a static IP for it inside your home router. This will add convenience once you want to view the manager and access the nodes during the testnet. To do this, you need to log into your home router (if you're not sure how to do this read this https://www.lifewire.com/how-to-find-your-default-gateway-ip-address-2626072). Once you're in you can go to static leases or a similar term (located somewhere in LAN settings; highly dependent on your router model, this is a very broad description. Please download the manual of your router to get a detailed guide how to accomplish this) and assign the static IP lease for the Skyminer router. You will need the MAC address of the Skyminer router for this, you can find it on the 'Home'-page of the router interface or in your home router's web interface:","title":"Optional: assign static IP address for the Skyminer router"},{"location":"hardware/skyminer/networking/#usage","text":"Please refer to the - Run HypervisorUI on local machine guide or - Run HypervisorUI on manager board (official images) dependent on where the hypervisorUI is running.","title":"Usage"},{"location":"hardware/skyminer/networking/#obtain-ip-address-within-your-home-network","text":"Now you need to plug in a cable into the WAN port of the Skyminer router going into a LAN port of your home router and turn on your Skyminer router. To access the manager or any device within the subnet of the Skyminer router you need the IP that it got assigned by your home router. To obtain it you have 3 options (they increase in difficulty from one to three): 1) Visit the Skyminer router interface and obtain the IP address from the 'Home'page. The IP is displayed under 'Internet -> Status', if you connected a LAN cable to the WAN port of the Skyminer router it will be displayed inside the red rectangle: To do the following two steps you need to disconnect your computer from the Skyminer router and connect it to your home router. 2) Login to your home router and go to 'Connected Devices', you'll see a device called 'myap', this is the Skyminer router. 3) Use network scan software like for example nmap to scan the subnet of your home router. The following is an example for the 192.168.1.1/24 subnet nmap -sP 192.168.1.1/24 Will give you all active devices within the subnet. If you aren't familiar with using the command line you can use the multi-platform tool Zenmap, which provides a UI for nmap . Please note down the IP address, we'll need it to access the hypervisorUI .","title":"Obtain IP Address within your home network"},{"location":"hardware/skyminer/networking/#viewing-the-hypervisorui","text":"Please refer to: - this guide if you setup the hypervisor to be executed on one of the boards - this guide if you setup the hypervisor to run locally on your own machine","title":"Viewing the HypervisorUI"},{"location":"hardware/skyminer/networking/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"hardware/skyminer/networking/#reset-router","text":"Several different issues may require you to reset the router. An example would be if the language doesn't change immediately don't panic, numerous people experienced this. Try the following steps: * Refresh the page * Switch the language back and forth multiple times * Clean your browser cache * Try a different browser * Reset the router with the factory reset button by pressing it for ~ 20 seconds Keep in mind that resetting the router removes any port forwarding rules you put in place!","title":"Reset Router"},{"location":"hardware/skyminer/setup/","text":"You can find a comprehensive assembly manual here","title":"Setup"},{"location":"hardware/skyminer/setup_software/","text":"Depending on your experience / technical know-how you can: Use Skybian via the Skyimager by following the Skyimager User Guide to get up and running (preferred option, very easy & straightforward) Install Skywire from source . This option requires previous technical experience but will give you a better understanding of how your official Skyminer is configured. After the registration please make sure to registrate your Skyminer on the Skywire Whitelisting System ( user guide )","title":"Software"},{"location":"hardware/skywallet/","text":"Skywallet The Hardware Wallet of the Skycoin Project is able to hold your private keys for you so your lovely coins can't get stolen. At the moment the wallet only supports Skycoin and CoinHours, but in the future you will be able to store a lot of other coins or even use your Wallet for authentification and more. Skywallet - Coming to a Sky-store near you! Supported Coins Name Symbol Info Skycoin SKY also SCH Bitcoin BTC \u2190 soon Ethereum ETH \u2190 soon ETH-Tokens ERC-20 \u2190 soon Support Telegram Support Page Email Support Store store.skycoin.com","title":"Overview"},{"location":"hardware/skywallet/#skywallet","text":"The Hardware Wallet of the Skycoin Project is able to hold your private keys for you so your lovely coins can't get stolen. At the moment the wallet only supports Skycoin and CoinHours, but in the future you will be able to store a lot of other coins or even use your Wallet for authentification and more. Skywallet - Coming to a Sky-store near you!","title":"Skywallet"},{"location":"hardware/skywallet/#supported-coins","text":"Name Symbol Info Skycoin SKY also SCH Bitcoin BTC \u2190 soon Ethereum ETH \u2190 soon ETH-Tokens ERC-20 \u2190 soon","title":"Supported Coins"},{"location":"hardware/skywallet/#support","text":"Telegram Support Page Email Support","title":"Support"},{"location":"hardware/skywallet/#store","text":"store.skycoin.com","title":"Store"},{"location":"hardware/skywallet/about/","text":"TO DO","title":"About"},{"location":"hardware/skywalletdk/","text":"Skywallet HDK Manual TODO Support Telegram Support Page Email Support Store store.skycoin.com","title":"Skywallet HDK"},{"location":"hardware/skywalletdk/#skywallet-hdk","text":"","title":"Skywallet HDK"},{"location":"hardware/skywalletdk/#manual","text":"TODO","title":"Manual"},{"location":"hardware/skywalletdk/#support","text":"Telegram Support Page Email Support","title":"Support"},{"location":"hardware/skywalletdk/#store","text":"store.skycoin.com","title":"Store"},{"location":"software/","text":"Software Overview Skycoin Fiber Skywire CX CXO CXFX","title":"Overview"},{"location":"software/#software-overview","text":"Skycoin Fiber Skywire CX CXO CXFX","title":"Software Overview"},{"location":"software/cx/","text":"About Setup User Documentation Developer Documentation Social Networks","title":"Overview"},{"location":"software/cx/about/","text":"CX is Skycoin's original programming language. CX is a general purpose programming language that focuses on the design of distributed, blockchain-based applications. CX provides developers with high-level meta-programming features, such as affordances , runtime stepping and a REPL capable of modifying running programs at a low granularity level. CX is: deterministic integrates with blockchains works with immutable data structures incorporates our new paradigm of affordances is compiled and interpreted uses garbage collection has a strict typing system has other valuable tools built in CX has multiple powerful libraries including CXO for immutable objects sharing, CXFX for its graphics engine, and more being developed. CX is written with Go's syntax to ensure professionals can quickly switch over and newcomers can easily learn it. CX will eventually be written entirely in CX. Here you find a collection of all the knowledge you need to start with CX. If you have further questions, you are always welcomed on Telegram and Reddit . Roadmap for the Development of CX","title":"About"},{"location":"software/cx/social/","text":"Social Networks Telegram CX:Blockchain Programming Language CX-Labs Code Bootcamp Reddit CX_Language","title":"Social"},{"location":"software/cx/social/#social-networks","text":"","title":"Social Networks"},{"location":"software/cx/social/#telegram","text":"CX:Blockchain Programming Language CX-Labs Code Bootcamp","title":"Telegram"},{"location":"software/cx/social/#reddit","text":"CX_Language","title":"Reddit"},{"location":"software/cx/setup/atom/","text":"Setup Atom for CX The most important thing in writing code is to easy identify the keywords of the language. In the next steps you get to know how to setup Atom for writing CX code. Setup keyword highlighting Download the latest version of Atom from https://atom.io/ and install it. Move to ~/.atom and open config.cson \\ For Windows: C:\\Users\\Username\\.atom add the following lines: core : cus t omFileTypes : \"source.go\" : [ \"cx\" ] Now Atom will use the golang syntax highlighting for every cx file.","title":"Atom"},{"location":"software/cx/setup/atom/#setup-atom-for-cx","text":"The most important thing in writing code is to easy identify the keywords of the language. In the next steps you get to know how to setup Atom for writing CX code.","title":"Setup Atom for CX"},{"location":"software/cx/setup/atom/#setup-keyword-highlighting","text":"Download the latest version of Atom from https://atom.io/ and install it. Move to ~/.atom and open config.cson \\ For Windows: C:\\Users\\Username\\.atom add the following lines: core : cus t omFileTypes : \"source.go\" : [ \"cx\" ] Now Atom will use the golang syntax highlighting for every cx file.","title":"Setup keyword highlighting"},{"location":"software/cx/setup/emacs/","text":"Setup Emacs for CX The most important thing in writing code is to easy identify the keywords of the language. In the next steps you get to know how to setup Emacs for writing CX code. ATM we will use a golang mode to recognize .cx files, but hopefully we will see a cx-mode in the future. Setup keyword highlighting Download the latest version of emacs from https://www.gnu.org/software/emacs/ After the installation run your emacs version. Git clone or download the following repo: https://github.com/dominikh/go-mode.el and save it/unizip it to your prefered directory. Press Ctrl + x , then Ctrl + f and type ~/.emacs.d/init.el and press Enter \\ emacs command syntax: C-x C-f ~/.emacs.d/init.el Now add the following lines: ( add-to-list 'load-path \"directory/of/the/cloned/repository\" ) ( autoload 'go-mode \"go-mode\" nil t ) ( add-to-list 'auto-mode-alist ' ( \"\\\\.cx\\\\'\" . go-mode )) Save and exit the file by pressing Ctrl + x and then Ctrl + s . Close emacs by pressing Ctrl + x and then Ctrl + c Now emacs will show all known keywords of golang when you edit cx-files. Setup Terminal To run your code directly from emacs you have to setup the Terminal depending on your operating system. Windows Open the init file with by pressing Ctrl + x , then Ctrl + f and typing ~/.emacs.d/init.el and pressing Enter Add the following lines: ( defun run-cmdexe () ( interactive ) ( let (( shell-file-name \"cmd.exe\" )) ( shell \"*cmd.exe*\" ))) Save and exit the file by pressing Ctrl + x and then Ctrl + s . Close emacs by pressing Ctrl + x and then Ctrl + c Restart emacs Now you can run cmd.exe in emacs by pressing Alt + x and then typing run-cmdexe \\ emacs command syntax: M-x run-cmdexe hello-world.cx Open emacs and make a new file called hello-world.cx by pressing Ctrl + x , then Ctrl + f and typing ~/.emacs.d/hello-world.cx Type in the following code: package main func main (){ str . print ( \"Hello, World!\" ) } Save and exit the file by pressing Ctrl + x and then Ctrl + s . Start cmd.exe in emacs by pressing Alt + x and then typing run-cmdexe emacs command syntax: M-x run-cmdexe Run the file by changing into the file direction and then typing the cx command: cd %USERPROFILE%/AppData/Roaming/.emacs.d cx hello-world.cx macOS TODO Linux TODO","title":"Emacs"},{"location":"software/cx/setup/emacs/#setup-emacs-for-cx","text":"The most important thing in writing code is to easy identify the keywords of the language. In the next steps you get to know how to setup Emacs for writing CX code. ATM we will use a golang mode to recognize .cx files, but hopefully we will see a cx-mode in the future.","title":"Setup Emacs for CX"},{"location":"software/cx/setup/emacs/#setup-keyword-highlighting","text":"Download the latest version of emacs from https://www.gnu.org/software/emacs/ After the installation run your emacs version. Git clone or download the following repo: https://github.com/dominikh/go-mode.el and save it/unizip it to your prefered directory. Press Ctrl + x , then Ctrl + f and type ~/.emacs.d/init.el and press Enter \\ emacs command syntax: C-x C-f ~/.emacs.d/init.el Now add the following lines: ( add-to-list 'load-path \"directory/of/the/cloned/repository\" ) ( autoload 'go-mode \"go-mode\" nil t ) ( add-to-list 'auto-mode-alist ' ( \"\\\\.cx\\\\'\" . go-mode )) Save and exit the file by pressing Ctrl + x and then Ctrl + s . Close emacs by pressing Ctrl + x and then Ctrl + c Now emacs will show all known keywords of golang when you edit cx-files.","title":"Setup keyword highlighting"},{"location":"software/cx/setup/emacs/#setup-terminal","text":"To run your code directly from emacs you have to setup the Terminal depending on your operating system. Windows Open the init file with by pressing Ctrl + x , then Ctrl + f and typing ~/.emacs.d/init.el and pressing Enter Add the following lines: ( defun run-cmdexe () ( interactive ) ( let (( shell-file-name \"cmd.exe\" )) ( shell \"*cmd.exe*\" ))) Save and exit the file by pressing Ctrl + x and then Ctrl + s . Close emacs by pressing Ctrl + x and then Ctrl + c Restart emacs Now you can run cmd.exe in emacs by pressing Alt + x and then typing run-cmdexe \\ emacs command syntax: M-x run-cmdexe hello-world.cx Open emacs and make a new file called hello-world.cx by pressing Ctrl + x , then Ctrl + f and typing ~/.emacs.d/hello-world.cx Type in the following code: package main func main (){ str . print ( \"Hello, World!\" ) } Save and exit the file by pressing Ctrl + x and then Ctrl + s . Start cmd.exe in emacs by pressing Alt + x and then typing run-cmdexe emacs command syntax: M-x run-cmdexe Run the file by changing into the file direction and then typing the cx command: cd %USERPROFILE%/AppData/Roaming/.emacs.d cx hello-world.cx macOS TODO Linux TODO","title":"Setup Terminal"},{"location":"software/cx/setup/linux/","text":"CX Installation on Linux Info You have got two options to install CX on Windows. Binary Releases - Fast and safe Installation Compiling from Source - better to customize your cx-options, also necessary for CX-Chains Binary Releases Download the latest version of cx from https://github.com/skycoin/cx/releases TODO: terminal command Unzip into the destination folder you want to have your CX-files. TODO: terminal command Setup the Environmental Variable $PATH so it knows your destination folder. TODO: terminal command Compiling from Source Requirements To compile cx from source you need golang installed! Install Go Source: https://raw.githubusercontent.com/skycoin/skycoin/develop/INSTALLATION.md Installation Packet Manager We need to install linux dependencies on the correct distribution. Ubuntu and Debian sudo apt-get update && sudo apt-get upgrade -y sudo apt-get install -y curl git mercurial make binutils gcc bzr bison libgmp3-dev screen gcc build-essential Centos and Fedora sudo yum update -y && sudo yum upgrade -y sudo yum install -y git curl make gcc mercurial binutils bzr bison screen if [[ \" $( cat /etc/redhat-release | grep -o CentOS ) \" == \"CentOS\" ]] ; then sudo yum install -y build-essential libgmp3-dev ; else sudo yum groupinstall -y \"Development Tools\" \"Development Libraries\" && sudo yum install -y gmp ; fi ; Archlinux First update the system and ensure the dependancies are met sudo pacman -Syy && sudo pacman -Syu sudo pacman -S base-devel Install the latest version of go on Archlinux with: sudo pacman -S go Install Go From Source Let's go to home directory and declare go 's version that you want to download. cd ~ export GOV = 1 .11.1 # golang version After that, let's download and uncompress golang source. curl -sS https://storage.googleapis.com/golang/go $GOV .linux-amd64.tar.gz > go $GOV .linux-amd64.tar.gz tar xvf go $GOV .linux-amd64.tar.gz rm go $GOV .linux-amd64.tar.gz lastly, let's install go . sudo mv go /usr/local/go sudo ln -s /usr/local/go/bin/go /usr/local/bin/go sudo ln -s /usr/local/go/bin/godoc /usr/local/bin/godoc sudo ln -s /usr/local/go/bin/gofmt /usr/local/bin/gofmt Note Find any golang source version at Go Website Setup your GOPATH The $GOPATH environment variable specifies the location of your workspace. It defaults to a directory named go inside your home directory, so $HOME/go on Unix. Create your workspace directory with it's respective inner folders: mkdir -p $HOME /go mkdir -p $HOME /go/bin mkdir -p $HOME /go/src mkdir -p $HOME /go/pkg Setup $GOPATH variable, add it to ~/.bashrc. After editing, run source ~/.bashrc or open a new tab. export GOROOT = /usr/local/go export GOPATH = $HOME /go export GOBIN = $GOPATH /bin export PATH = $PATH : $GOBIN Test your Go installation Create and run the hello.go application described here to check if your Go installation is working. Make sure you have got go1.10+ installed. If not follow the guide above. Download CX's respository with: go get github.com/skycoin/cx/cx/... Navigate to CX's repository and run: make install Test your installation by running: make test Note If you intend to develop games with CX test by running: make test-full To update your CX-Installation just run make install again. Hello, World! TODO Next Step The next step should be to search for a development environment that fits you to code as easy as possible. Have a look into Programming Tools to find and setup your favorite Code Editor.","title":"Linux"},{"location":"software/cx/setup/linux/#cx-installation-on-linux","text":"Info You have got two options to install CX on Windows. Binary Releases - Fast and safe Installation Compiling from Source - better to customize your cx-options, also necessary for CX-Chains Binary Releases Download the latest version of cx from https://github.com/skycoin/cx/releases TODO: terminal command Unzip into the destination folder you want to have your CX-files. TODO: terminal command Setup the Environmental Variable $PATH so it knows your destination folder. TODO: terminal command Compiling from Source Requirements To compile cx from source you need golang installed! Install Go Source: https://raw.githubusercontent.com/skycoin/skycoin/develop/INSTALLATION.md Installation Packet Manager We need to install linux dependencies on the correct distribution. Ubuntu and Debian sudo apt-get update && sudo apt-get upgrade -y sudo apt-get install -y curl git mercurial make binutils gcc bzr bison libgmp3-dev screen gcc build-essential Centos and Fedora sudo yum update -y && sudo yum upgrade -y sudo yum install -y git curl make gcc mercurial binutils bzr bison screen if [[ \" $( cat /etc/redhat-release | grep -o CentOS ) \" == \"CentOS\" ]] ; then sudo yum install -y build-essential libgmp3-dev ; else sudo yum groupinstall -y \"Development Tools\" \"Development Libraries\" && sudo yum install -y gmp ; fi ; Archlinux First update the system and ensure the dependancies are met sudo pacman -Syy && sudo pacman -Syu sudo pacman -S base-devel Install the latest version of go on Archlinux with: sudo pacman -S go Install Go From Source Let's go to home directory and declare go 's version that you want to download. cd ~ export GOV = 1 .11.1 # golang version After that, let's download and uncompress golang source. curl -sS https://storage.googleapis.com/golang/go $GOV .linux-amd64.tar.gz > go $GOV .linux-amd64.tar.gz tar xvf go $GOV .linux-amd64.tar.gz rm go $GOV .linux-amd64.tar.gz lastly, let's install go . sudo mv go /usr/local/go sudo ln -s /usr/local/go/bin/go /usr/local/bin/go sudo ln -s /usr/local/go/bin/godoc /usr/local/bin/godoc sudo ln -s /usr/local/go/bin/gofmt /usr/local/bin/gofmt Note Find any golang source version at Go Website Setup your GOPATH The $GOPATH environment variable specifies the location of your workspace. It defaults to a directory named go inside your home directory, so $HOME/go on Unix. Create your workspace directory with it's respective inner folders: mkdir -p $HOME /go mkdir -p $HOME /go/bin mkdir -p $HOME /go/src mkdir -p $HOME /go/pkg Setup $GOPATH variable, add it to ~/.bashrc. After editing, run source ~/.bashrc or open a new tab. export GOROOT = /usr/local/go export GOPATH = $HOME /go export GOBIN = $GOPATH /bin export PATH = $PATH : $GOBIN Test your Go installation Create and run the hello.go application described here to check if your Go installation is working. Make sure you have got go1.10+ installed. If not follow the guide above. Download CX's respository with: go get github.com/skycoin/cx/cx/... Navigate to CX's repository and run: make install Test your installation by running: make test Note If you intend to develop games with CX test by running: make test-full To update your CX-Installation just run make install again.","title":"CX Installation on Linux"},{"location":"software/cx/setup/linux/#hello-world","text":"TODO","title":"Hello, World!"},{"location":"software/cx/setup/linux/#next-step","text":"The next step should be to search for a development environment that fits you to code as easy as possible. Have a look into Programming Tools to find and setup your favorite Code Editor.","title":"Next Step"},{"location":"software/cx/setup/macos/","text":"CX Installation on macOS Info To install cx on macOS the best way is to use Homebrew . Homebrew-Install Download and install Homebrew by pressing \u2318 + Space and typing in Terminal to start Terminal, then type in the following command: /usr/bin/ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \u201d Installation Press \u2318 + Space and type in Terminal to start Terminal. Type in the following lines to install CX : brew tap skycoin/homebrew-skycoin brew install skycoin-cx To update use the following command: brew update skycoin-cx Hello, World! To check our Installation with something more than a version output we will now make a cx-file to print out 'Hello World!' Make a new text-file and rename it to hello-world.cx Open the file with a text editor and type in the following: package main func main () { str . print ( \"Hello, World!\" ) } Save and close Press \u2318 + Space and type in Terminal to start Terminal. Move to the direction where your hello-world.cx is and type in cx hello-world.cx or just drag and drop your file into the terminal after typing in cx followed by a Space Next Step The next step should be to search for a development environment that fits you to code as easy as possible. Have a look into Programming Tools to find and setup your favorite Code Editor.","title":"macOS"},{"location":"software/cx/setup/macos/#cx-installation-on-macos","text":"Info To install cx on macOS the best way is to use Homebrew . Homebrew-Install Download and install Homebrew by pressing \u2318 + Space and typing in Terminal to start Terminal, then type in the following command: /usr/bin/ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \u201d","title":"CX Installation on macOS"},{"location":"software/cx/setup/macos/#installation","text":"Press \u2318 + Space and type in Terminal to start Terminal. Type in the following lines to install CX : brew tap skycoin/homebrew-skycoin brew install skycoin-cx To update use the following command: brew update skycoin-cx","title":"Installation"},{"location":"software/cx/setup/macos/#hello-world","text":"To check our Installation with something more than a version output we will now make a cx-file to print out 'Hello World!' Make a new text-file and rename it to hello-world.cx Open the file with a text editor and type in the following: package main func main () { str . print ( \"Hello, World!\" ) } Save and close Press \u2318 + Space and type in Terminal to start Terminal. Move to the direction where your hello-world.cx is and type in cx hello-world.cx or just drag and drop your file into the terminal after typing in cx followed by a Space","title":"Hello, World!"},{"location":"software/cx/setup/macos/#next-step","text":"The next step should be to search for a development environment that fits you to code as easy as possible. Have a look into Programming Tools to find and setup your favorite Code Editor.","title":"Next Step"},{"location":"software/cx/setup/overview/","text":"Setup CX and IDEs for Development CX Windows macOS Linux Programming Tools VS Code Emacs Atom","title":"Overview"},{"location":"software/cx/setup/overview/#setup-cx-and-ides-for-development","text":"","title":"Setup CX and IDEs for Development"},{"location":"software/cx/setup/overview/#cx","text":"Windows macOS Linux","title":"CX"},{"location":"software/cx/setup/overview/#programming-tools","text":"VS Code Emacs Atom","title":"Programming Tools"},{"location":"software/cx/setup/vscode/","text":"Setup Visual Studio Code for CX The most important thing in writing code is to easy identify the keywords of the language. In the next steps you get to know how to setup VS Code for writing CX code. Setup keyword highlighting Download the latest version of VS Code from https://code.visualstudio.com/Download After the installation open your CX-Directory: File -> Open Folder.. Activate your hello-world.cx file or another and then press Ctrl + K , release and press M Click on Configure File Association for '.cx'... Select Go Now the keywords known from Go will be highlighted in every .cx file Setup Terminal To run your code directly from VS Code you have to setup the Terminal depending on your operating system Windows If you haven't got open the terminal in VS Code, go to Terminal -> New Terminal To change your default Shell press Ctrl + Shift + P and search for command Terminal: Select Default Shell Select Command Prompt Now you can use the Windows Command Prompt inside VS Code: Move to the direction where your hello-world.cx is and type in cx hello-world.cx or just drag and drop your file into the terminal after typing in cx followed by a Space macOS TODO Linux TODO","title":"VS Code"},{"location":"software/cx/setup/vscode/#setup-visual-studio-code-for-cx","text":"The most important thing in writing code is to easy identify the keywords of the language. In the next steps you get to know how to setup VS Code for writing CX code.","title":"Setup Visual Studio Code for CX"},{"location":"software/cx/setup/vscode/#setup-keyword-highlighting","text":"Download the latest version of VS Code from https://code.visualstudio.com/Download After the installation open your CX-Directory: File -> Open Folder.. Activate your hello-world.cx file or another and then press Ctrl + K , release and press M Click on Configure File Association for '.cx'... Select Go Now the keywords known from Go will be highlighted in every .cx file","title":"Setup keyword highlighting"},{"location":"software/cx/setup/vscode/#setup-terminal","text":"To run your code directly from VS Code you have to setup the Terminal depending on your operating system Windows If you haven't got open the terminal in VS Code, go to Terminal -> New Terminal To change your default Shell press Ctrl + Shift + P and search for command Terminal: Select Default Shell Select Command Prompt Now you can use the Windows Command Prompt inside VS Code: Move to the direction where your hello-world.cx is and type in cx hello-world.cx or just drag and drop your file into the terminal after typing in cx followed by a Space macOS TODO Linux TODO","title":"Setup Terminal"},{"location":"software/cx/setup/windows/","text":"Windows 10 Installation Installation Info You have got two options to install CX on Windows. Binary Releases - Fast and safe Installation Compiling from Source - better to customize your cx-options, also necessary for CX-Chains Binary Releases Download the latest version of cx.exe from https://github.com/skycoin/cx/releases Unzip into the destination folder you want to have your CX-files. For example: D:\\Programs\\CX Setup Environment Variables to get access to your cx.exe through the terminal: Press WIN + R , type in C:\\Windows\\System32\\systempropertiesadvanced.exe and hit ENTER Search for Path in 'User variables for User', select it and press Edit. Make a new environment variable with the path, depending on your destination folder. Here D:\\Programs\\CX Check your installation like described here To update your CX-Installation just get the latest cx.exe and replace the old one. Compiling from Source Requirements To compile cx from source you need golang installed! Install Go Source: https://skywug.net/forum/Thread-Skywire-node-on-Windows Installation Download Go from https://golang.org/dl/ and install it. Setup Environment Variables 1. Press WIN + R to open run and type in C: \\W indows \\S ystem32 \\s ystempropertiesadvanced.exe 2. Select the GOPATH variable and change it's value to: %USERPROFILE% \\g o 3. Make a new variable called GOBIN with the value: %USERPROFILE% \\g o \\b in First make sure you have got GO installed and set up your Environment Variables . If not follow the guide above. You also need git to copy github repos. You can download it from https://git-scm.com/downloads . After the installation make a new Environment Variable like described in the next steps: 3.1 Press WIN + R to open run and type in C: \\W indows \\S ystem32 \\s ystempropertiesadvanced.exe 3.2 Make a new variable called CXPATH with the value: %USERPROFILE% \\g o \\s rc \\g ithub.com \\s kycoin \\c x 3.3 Make sure the Environment Variables from Step 1 are also set: GOPATH = %USERPROFILE% \\g o GOBIN = %USERPROFILE% \\g o \\b in Get the latest version of the github cx-repository 4.1 Press WIN + R , type in cmd.exe and hit ENTER 4.2 get github repo by typing in: mkdir -p %GOPATH% \\s rc \\g ithub.com \\s kycoin \\ cd %GOPATH% \\s rc \\g ithub.com \\s kycoin \\ git clone https://github.com/skycoin/cx.git 4.2 To install cx type in: cd %CXPATH% cx-setup.bat Check your installation by typing in: cd %CXPATH% cx tests \\m ain.cx ++wdir = tests ++disable-tests = issue To update your CX-Installation just run cx-setup.bat again Check Installation Open Terminal with WIN + R and type in cmd.exe In Terminal type in cx -v The output should look like this: CX version X.X.X (the X represent the version you have installed) Hello, World! To check our Installation with something more than a version output we will now make a cx-file to print out 'Hello World!' Make a new text-file in the location where your cx.exe is and rename it to hello-world.cx Open the file with Editor and type in the following: package main func main () { str . print ( \"Hello, World!\" ) } Press Ctrl + S and close Open a terminal with WIN + R and type in cmd.exe Move to the direction where your hello-world.cx is and type in cx hello-world.cx or just drag and drop your file into the terminal after typing in cx followed by a Space Next Step The next step should be to search for a development environment that fits you to code as easy as possible. Have a look into Programming Tools to find your favorite Code Editor.","title":"Windows"},{"location":"software/cx/setup/windows/#windows-10-installation","text":"","title":"Windows 10 Installation"},{"location":"software/cx/setup/windows/#installation","text":"Info You have got two options to install CX on Windows. Binary Releases - Fast and safe Installation Compiling from Source - better to customize your cx-options, also necessary for CX-Chains Binary Releases Download the latest version of cx.exe from https://github.com/skycoin/cx/releases Unzip into the destination folder you want to have your CX-files. For example: D:\\Programs\\CX Setup Environment Variables to get access to your cx.exe through the terminal: Press WIN + R , type in C:\\Windows\\System32\\systempropertiesadvanced.exe and hit ENTER Search for Path in 'User variables for User', select it and press Edit. Make a new environment variable with the path, depending on your destination folder. Here D:\\Programs\\CX Check your installation like described here To update your CX-Installation just get the latest cx.exe and replace the old one. Compiling from Source Requirements To compile cx from source you need golang installed! Install Go Source: https://skywug.net/forum/Thread-Skywire-node-on-Windows Installation Download Go from https://golang.org/dl/ and install it. Setup Environment Variables 1. Press WIN + R to open run and type in C: \\W indows \\S ystem32 \\s ystempropertiesadvanced.exe 2. Select the GOPATH variable and change it's value to: %USERPROFILE% \\g o 3. Make a new variable called GOBIN with the value: %USERPROFILE% \\g o \\b in First make sure you have got GO installed and set up your Environment Variables . If not follow the guide above. You also need git to copy github repos. You can download it from https://git-scm.com/downloads . After the installation make a new Environment Variable like described in the next steps: 3.1 Press WIN + R to open run and type in C: \\W indows \\S ystem32 \\s ystempropertiesadvanced.exe 3.2 Make a new variable called CXPATH with the value: %USERPROFILE% \\g o \\s rc \\g ithub.com \\s kycoin \\c x 3.3 Make sure the Environment Variables from Step 1 are also set: GOPATH = %USERPROFILE% \\g o GOBIN = %USERPROFILE% \\g o \\b in Get the latest version of the github cx-repository 4.1 Press WIN + R , type in cmd.exe and hit ENTER 4.2 get github repo by typing in: mkdir -p %GOPATH% \\s rc \\g ithub.com \\s kycoin \\ cd %GOPATH% \\s rc \\g ithub.com \\s kycoin \\ git clone https://github.com/skycoin/cx.git 4.2 To install cx type in: cd %CXPATH% cx-setup.bat Check your installation by typing in: cd %CXPATH% cx tests \\m ain.cx ++wdir = tests ++disable-tests = issue To update your CX-Installation just run cx-setup.bat again","title":"Installation"},{"location":"software/cx/setup/windows/#check-installation","text":"Open Terminal with WIN + R and type in cmd.exe In Terminal type in cx -v The output should look like this: CX version X.X.X (the X represent the version you have installed)","title":"Check Installation"},{"location":"software/cx/setup/windows/#hello-world","text":"To check our Installation with something more than a version output we will now make a cx-file to print out 'Hello World!' Make a new text-file in the location where your cx.exe is and rename it to hello-world.cx Open the file with Editor and type in the following: package main func main () { str . print ( \"Hello, World!\" ) } Press Ctrl + S and close Open a terminal with WIN + R and type in cmd.exe Move to the direction where your hello-world.cx is and type in cx hello-world.cx or just drag and drop your file into the terminal after typing in cx followed by a Space","title":"Hello, World!"},{"location":"software/cx/setup/windows/#next-step","text":"The next step should be to search for a development environment that fits you to code as easy as possible. Have a look into Programming Tools to find your favorite Code Editor.","title":"Next Step"},{"location":"software/cx/userdocs/basics-native-functions/","text":"Native Functions Type-inferenced Functions CX has a small set of functions that are not associated to a single type signature. For example, instead of using i32.add to add two 32-bit integers, you can use the generalized add function. Furthermore, whenever you use arithmetic operators, such as + , - or % , these are translated to their corresponding \"type-inferenced\" function, e.g. num = 5 + 5 is translated to num = i32.add(5, 5) . These native functions still follow CX's philosophy of having a strict typing system, as the types of the arguments sent to these native functions must be the same. Note that after listing a group of similar \"type-inferenced\" functions below, we list the compatible types for the corresponding functions. eq uneq Note: the preceding functions only work with arguments of type bool , byte , str , i32 , i64 , f32 or f64 . Example package main func main () { bool . print ( eq ( 5 , 5 )) bool . print ( 5 == 5 ) // alternative bool . print ( uneq ( \"hihi\" , \"byebye\" )) bool . print ( \"hihi\" != \"byebye\" ) // alternative } lt gt lteq gteq Note: the preceding function only works with arguments of type byte , bool , str , i32 , i64 , f32 or f64 . Example package main func main () { bool . print ( lt ( 3 B , 4 B )) bool . print ( 3 B < 4 B ) // alternative bool . print ( gt ( \"hello\" , \"hi!\" )) bool . print ( \"hello\" > \"hi!\" ) // alternative bool . print ( lteq ( 5.3 D , 5.3 D )) bool . print ( 5.3 D <= 5.3 D ) // alternative bool . print ( gteq ( 10 L , 3 L )) bool . print ( 10 L >= 3 L ) // alternative } bitand bitor bitxor bitclear bitshl bitshr Note: the preceding functions only work with arguments of type i32 or i64 . Example package main func main () { i32 . print ( bitand ( 5 , 1 )) i32 . print ( 5 & 1 ) // alternative i64 . print ( bitor ( 3 L , 2 L )) i64 . print ( 3 L | 2 L ) // alternative i32 . print ( bitxor ( 10 , 2 )) i32 . print ( 10 ^ 2 ) // alternative i64 . print ( bitclear ( 5 L , 2 L )) i64 . print ( 5 L &^ 2 L ) // alternative i32 . print ( bitshl ( 2 , 3 )) i32 . print ( 2 << 3 ) // alternative i32 . print ( bitshr ( 16 , 3 )) i32 . print ( 16 >> 3 ) // alternative } add sub mul div Note: the preceding functions only work with arguments of type byte , i32 , i64 , f32 or f64 . Example package main func main () { byte . print ( add ( 5 B , 10 B )) byte . print ( 5 B + 10 B ) // alternative i32 . print ( sub ( 3 , 7 )) i32 . print ( 3 - 7 ) // alternative i64 . print ( mul ( 4 L , 5 L )) i64 . print ( 4 L * 5 L ) // alternative f32 . print ( div ( 4.3 , 2.1 )) f32 . print ( 4.3 / 2.1 ) // alternative } mod Note: the preceding function only works with arguments of type byte , i32 or i64 . Example package main func main () { byte . print ( mod ( 5 B , 3 B )) byte . print ( 5 B % 3 B ) // alternative } len Note: the preceding function only works with arguments of type str , arrays or slices . Example package main func main () { var string str var array [ 5 ] i32 var slice [] i32 string = \"this should print 20\" array = [ 5 ] i32 { 1 , 2 , 3 , 4 , 5 } slice = [] i32 { 10 , 20 , 30 } i32 . print ( len ( string )) // prints 20 i32 . print ( len ( array )) // prints 5 i32 . print ( len ( slice )) // prints 3 } printf Note: the preceding function requires a format str as its first argument, followed by any number of arguments of type str , i32 , i64 , f32 or f64 . The format string recognizes the following directives: %s for strings, %d for integers and %f for floating point numbers. Example package main func main () { var name str var age i32 var wrongPI f32 var error f64 name = \"Richard\" age = 14 wrongPI = 3.16 error = 0.0000000000000001 D printf ( \"Hello, %s. My name is %s. I see that you calculated the value of PI wrong (%f). I think this is not so bad, considering your young age of %d. When I was %d years old, I remember I miscalculated it, too (I got %f as a result, using a numerical method). If you are using a numerical method, please consider reaching an error lower than %f to get an acceptable result, and not a ridiculous value such as %f. \\n\\nBest regards!\\n\" , name , \"Edward\" , wrongPI , age , 25 , 3.1417 , error , 0.1 ) } sprintf Note: the preceding function requires a format str as its first argument, followed by any number of arguments of type str , i32 , i64 , f32 or f64 . The format string recognizes the following directives: %s for strings, %d for integers and %f for floating point numbers. package main func main () { var reply str var name str var title str name = \"Edward\" title = \"Richard 8 PI\" reply = sprintf ( \"Thank you for contacting our technical support, %s. We see that you are having trouble with our video game titled '%s', targetted to kids under age %d. If you provide us with your parents e-mail address, we'll be glad to help you!\" , name , title , 14 ) str . print ( reply ) } Slice Functions append Example package main func main () { var slc1 [] i32 slc1 = append ( slc1 , 1 ) slc1 = append ( slc1 , 2 ) var slc2 [] i32 slc2 = append ( slc1 , 3 ) slc2 = append ( slc2 , 4 ) i32 . print ( len ( slc1 )) // prints 2 i32 . print ( len ( slc2 )) // prints 4 } Input/Output Functions The following functions are used to handle input from the user and to print output to a terminal. read Example package main func main () { var password str for true { printf ( \"What's the password, kid? \" ) password = read () if password == \"123\" { str . print ( \"Welcome back.\" ) return } else { str . print ( \"Wrong, but you'll get another chance.\" ) } } } byte.print bool.print str.print i32.print i64.print f32.print f64.print printf Example package main func main () { byte . print ( 5 B ) bool . print ( true ) str . print ( \"Hello!\" ) i32 . print ( 5 ) i64 . print ( 5 L ) f32 . print ( 5.0 ) f64 . print ( 5.0 D ) printf ( \"For a better example, check section Type-inferenced Functions'\" ) } Parse Functions All parse functions follow the same pattern: XXX.YYY where XXX is the receiving type and YYY is the target type. You can read these functions as \"parse XXX to YYY\". byte.str byte.i32 byte.i64 byte.f32 byte.f64 Example package main func main () { var b byte b = 30 B str . print ( str . concat ( \"Hello, \" , byte . str ( b ))) i32 . print ( 5 + byte . i32 ( b )) i64 . print ( 10 L + byte . i64 ( b )) f32 . print ( 33.3 + byte . f32 ( b )) f64 . print ( 50.111 D + byte . f64 ( b )) } i32.byte i32.str i32.i64 i32.f32 i32.f64 Example package main func main () { var num i32 num = 43 str . print ( str . concat ( \"Hello, \" , i32 . str ( num ))) byte . print ( 5 B + i32 . byte ( num )) i64 . print ( 10 L + i32 . i64 ( num )) f32 . print ( 33.3 + i32 . f32 ( num )) f64 . print ( 50.111 D + i32 . f64 ( num )) } i64.byte i64.str i64.i32 i64.f32 i64.f64 Example package main func main () { var num i64 num = 43 L str . print ( str . concat ( \"Hello, \" , i64 . str ( num ))) byte . print ( 5 B + i64 . byte ( num )) i64 . print ( 10 L + i64 . i64 ( num )) f32 . print ( 33.3 + i64 . f32 ( num )) f64 . print ( 50.111 D + i64 . f64 ( num )) } f32.byte f32.str f32.i32 f32.i64 f32.f64 Example package main func main () { var num f32 num = 43.33 str . print ( str . concat ( \"Hello, \" , f32 . str ( num ))) byte . print ( 5 B + f32 . byte ( num )) i32 . print ( 33 + f32 . f32 ( num )) i64 . print ( 10 L + f32 . i64 ( num )) f64 . print ( 50.111 D + f32 . f64 ( num )) } f64.byte f64.str f64.i32 f64.i64 f64.f32 Example package main func main () { var num f64 num = 43.33 D str . print ( str . concat ( \"Hello, \" , f64 . str ( num ))) byte . print ( 5 B + f64 . byte ( num )) i32 . print ( 33 + f64 . f32 ( num )) i64 . print ( 10 L + f64 . i64 ( num )) f32 . print ( 50.111 + f64 . f32 ( num )) } str.byte str.i32 str.i64 str.f32 str.f64 Example package main func main () { var num str num = \"33\" byte . print ( 5 B + str . byte ( num )) i32 . print ( 33 + str . f32 ( num )) i64 . print ( 10 L + str . i64 ( num )) f32 . print ( 50.111 + str . f32 ( num )) f64 . print ( 50.111 D + str . f32 ( num )) } Unit Testing The assert function is used to test the value of an expression against another value. This function is useful to test that a package is working as intended. assert Example package main func foo () ( res str ) { res = \"Working well\" } func main () { var results [] bool results = append ( results , assert ( 5 + 5 , 10 , \"Something went wrong with 5 + 5\" )) results = append ( results , assert ( foo (), \"Working well\" , \"Something went wrong with foo()\" )) var successfulTests i32 for c := 0 ; c < len ( results ); c ++ { if results [ c ] { successfulTests = successfulTests + 1 } } printf ( \"%d tests were performed\\n\" , len ( results )) printf ( \"%d were successful\\n\" , successfulTests ) printf ( \"%d failed\\n\" , len ( results ) - successfulTests ) } bool Type Functions bool.print bool.eq bool.uneq bool.not bool.or bool.and Example package main func main () { bool . print ( bool . eq ( true , true )) bool . print ( bool . uneq ( false , true )) bool . print ( bool . not ( false )) bool . print ( bool . or ( true , false )) bool . print ( bool . and ( true , true )) } Type Functions str Type Functions str.print str.concat Example package main func main () { str . print ( str . concat ( \"Hello, \" , \"World!\" )) } i32 Type Functions The following functions are of general purpose and are restricted to work with data structures of type i32 where it makes sense. i32.print i32.add i32.sub i32.mul i32.div i32.mod i32.abs Example package main func main () { i32 . print ( i32 . add ( 5 , 7 )) i32 . print ( i32 . sub ( 6 , 3 )) i32 . print ( i32 . mul ( 4 , 8 )) i32 . print ( i32 . div ( 15 , 3 )) i32 . print ( i32 . mod ( 5 , 3 )) i32 . print ( i32 . abs ( - 13 )) } i32.log i32.log2 i32.log10 i32.pow i32.sqrt Example package main func main () { i32 . print ( i32 . log ( 13 )) i32 . print ( i32 . log2 ( 3 )) i32 . print ( i32 . log10 ( 12 )) i32 . print ( i32 . pow ( 4 , 4 )) i32 . print ( i32 . sqrt ( 2 )) } i32.gt i32.gteq i32.lt i32.lteq i32.eq i32.uneq Example package main func main () { bool . print ( i32 . gt ( 5 , 3 )) bool . print ( i32 . gteq ( 3 , 8 )) bool . print ( i32 . lt ( 4 , 3 )) bool . print ( i32 . lteq ( 8 , 6 )) bool . print ( i32 . eq ( - 9 , - 9 )) bool . print ( i32 . uneq ( 3 , 3 )) } i32.bitand i32.bitor i32.bitxor i32.bitclear i32.bitshl i32.bitshr Example package main func main () { i32 . print ( i32 . bitand ( 2 , 5 )) i32 . print ( i32 . bitor ( 8 , 3 )) i32 . print ( i32 . bitxor ( 3 , 9 )) i32 . print ( i32 . bitclear ( 4 , 4 )) i32 . print ( i32 . bitshl ( 5 , 9 )) i32 . print ( i32 . bitshr ( 1 , 6 )) } i32.max i32.min Example package main func main () { i32 . print ( i32 . max ( 2 , 5 )) i32 . print ( i32 . min ( 10 , 3 )) } i32.rand Example package main func main () { i32 . print ( i32 . rand ( 0 , 100 )) } i64 Type Functions The following functions are of general purpose and are restricted to work with data structures of type i64 where it makes sense. i64.print i64.add i64.sub i64.mul i64.div i64.mod i64.abs Example package main func main () { i64 . print ( i64 . add ( 5 L , 7 L )) i64 . print ( i64 . sub ( 6 L , 3 L )) i64 . print ( i64 . mul ( 4 L , 8 L )) i64 . print ( i64 . div ( 15 L , 3 L )) i64 . print ( i64 . mod ( 5 L , 3 L )) i64 . print ( i64 . abs ( - 13 L )) } i64.log i64.log2 i64.log10 i64.pow i64.sqrt Example package main func main () { i64 . print ( i64 . log ( 13 L )) i64 . print ( i64 . log2 ( 3 L )) i64 . print ( i64 . log10 ( 12 L )) i64 . print ( i64 . pow ( 4 L , 4 L )) i64 . print ( i64 . sqrt ( 2 L )) } i64.gt i64.gteq i64.lt i64.lteq i64.eq i64.uneq Example package main func main () { bool . print ( i64 . gt ( 5 L , 3 L )) bool . print ( i64 . gteq ( 3 L , 8 L )) bool . print ( i64 . lt ( 4 L , 3 L )) bool . print ( i64 . lteq ( 8 L , 6 L )) bool . print ( i64 . eq ( - 9 L , - 9 L )) bool . print ( i64 . uneq ( 3 L , 3 L )) } i64.bitand i64.bitor i64.bitxor i64.bitclear i64.bitshl i64.bitshr Example package main func main () { i64 . print ( i64 . bitand ( 2 L , 5 L )) i64 . print ( i64 . bitor ( 8 L , 3 L )) i64 . print ( i64 . bitxor ( 3 L , 9 L )) i64 . print ( i64 . bitclear ( 4 L , 4 L )) i64 . print ( i64 . bitshl ( 5 L , 9 L )) i64 . print ( i64 . bitshr ( 1 L , 6 L )) } i64.max i64.min Example package main func main () { i64 . print ( i64 . max ( 2 L , 5 L )) i64 . print ( i64 . min ( 10 L , 3 L )) } i64.rand Example package main func main () { i64 . print ( i64 . rand ( 0 L , 100 L )) } f32 Type Functions The following functions are of general purpose and are restricted to work with data structures of type f32 where it makes sense. f32.print f32.add f32.sub f32.mul f32.div f32.abs Example package main func main () { f32 . print ( f32 . add ( 5.3 , 10.5 )) f32 . print ( f32 . sub ( 3.2 , 6.7 )) f32 . print ( f32 . mul ( - 7.9 , - 7.1 )) f32 . print ( f32 . div ( 10.3 , 2.4 )) f32 . print ( f32 . abs ( - 3.14159 )) } f32.log f32.log2 f32.log10 f32.pow f32.sqrt Example package main func main () { f32 . print ( f32 . log ( 2.3 )) f32 . print ( f32 . log2 ( 3.4 )) f32 . print ( f32 . log10 ( 3.0 )) f32 . print ( f32 . pow ( - 5.3 , 2.0 )) f32 . print ( f32 . sqrt ( 4.0 )) } f32.sin f32.cos Example package main func main () { f32 . print ( f32 . sin ( 1.0 )) f32 . print ( f32 . cos ( 2.0 )) } f32.gt f32.gteq f32.lt f32.lteq f32.eq f32.uneq Example package main func main () { bool . print ( f32 . gt ( 5.3 , 3.1 )) bool . print ( f32 . gteq ( 3.7 , 1.9 )) bool . print ( f32 . lt ( 2.4 , 5.5 )) bool . print ( f32 . lteq ( 8.4 , 3.2 )) bool . print ( f32 . eq ( 10.3 , 10.3 )) bool . print ( f32 . uneq ( 8.9 , 3.3 )) } f32.max f32.min Example package main func main () { f32 . print ( f32 . max ( 3.3 , 4.2 )) f32 . print ( f32 . min ( 5.8 , 9.9 )) } f64 Type Functions The following functions are of general purpose and are restricted to work with data structures of type f64 where it makes sense. f64.print f64.add f64.sub f64.mul f64.div f64.abs Example package main func main () { f64 . print ( f64 . add ( 5.3 D , 10.5 D )) f64 . print ( f64 . sub ( 3.2 D , 6.7 D )) f64 . print ( f64 . mul ( - 7.9 D , - 7.1 D )) f64 . print ( f64 . div ( 10.3 D , 2.4 D )) f64 . print ( f64 . abs ( - 3.14159 D )) } f64.log f64.log2 f64.log10 f64.pow f64.sqrt Example package main func main () { f64 . print ( f64 . log ( 2.3 D )) f64 . print ( f64 . log2 ( 3.4 D )) f64 . print ( f64 . log10 ( 3.0 D )) f64 . print ( f64 . pow ( - 5.3 D , 2.0 D )) f64 . print ( f64 . sqrt ( 4.0 D )) } f64.sin f64.cos Example package main func main () { f64 . print ( f64 . sin ( 1.0 D )) f64 . print ( f64 . cos ( 2.0 D )) } f64.gt f64.gteq f64.lt f64.lteq f64.eq f64.uneq Example package main func main () { bool . print ( f64 . gt ( 5.3 D , 3.1 D )) bool . print ( f64 . gteq ( 3.7 D , 1.9 D )) bool . print ( f64 . lt ( 2.4 D , 5.5 D )) bool . print ( f64 . lteq ( 8.4 D , 3.2 D )) bool . print ( f64 . eq ( 10.3 D , 10.3 D )) bool . print ( f64 . uneq ( 8.9 D , 3.3 D )) } f64.max f64.min Example package main func main () { f64 . print ( f64 . max ( 3.3 D , 4.2 D )) f64 . print ( f64 . min ( 5.8 D , 9.9 D )) }","title":"Native Functions"},{"location":"software/cx/userdocs/basics-native-functions/#native-functions","text":"","title":"Native Functions"},{"location":"software/cx/userdocs/basics-native-functions/#type-inferenced-functions","text":"CX has a small set of functions that are not associated to a single type signature. For example, instead of using i32.add to add two 32-bit integers, you can use the generalized add function. Furthermore, whenever you use arithmetic operators, such as + , - or % , these are translated to their corresponding \"type-inferenced\" function, e.g. num = 5 + 5 is translated to num = i32.add(5, 5) . These native functions still follow CX's philosophy of having a strict typing system, as the types of the arguments sent to these native functions must be the same. Note that after listing a group of similar \"type-inferenced\" functions below, we list the compatible types for the corresponding functions.","title":"Type-inferenced Functions"},{"location":"software/cx/userdocs/basics-native-functions/#eq","text":"","title":"eq"},{"location":"software/cx/userdocs/basics-native-functions/#uneq","text":"Note: the preceding functions only work with arguments of type bool , byte , str , i32 , i64 , f32 or f64 .","title":"uneq"},{"location":"software/cx/userdocs/basics-native-functions/#example","text":"package main func main () { bool . print ( eq ( 5 , 5 )) bool . print ( 5 == 5 ) // alternative bool . print ( uneq ( \"hihi\" , \"byebye\" )) bool . print ( \"hihi\" != \"byebye\" ) // alternative }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#lt","text":"","title":"lt"},{"location":"software/cx/userdocs/basics-native-functions/#gt","text":"","title":"gt"},{"location":"software/cx/userdocs/basics-native-functions/#lteq","text":"","title":"lteq"},{"location":"software/cx/userdocs/basics-native-functions/#gteq","text":"Note: the preceding function only works with arguments of type byte , bool , str , i32 , i64 , f32 or f64 .","title":"gteq"},{"location":"software/cx/userdocs/basics-native-functions/#example_1","text":"package main func main () { bool . print ( lt ( 3 B , 4 B )) bool . print ( 3 B < 4 B ) // alternative bool . print ( gt ( \"hello\" , \"hi!\" )) bool . print ( \"hello\" > \"hi!\" ) // alternative bool . print ( lteq ( 5.3 D , 5.3 D )) bool . print ( 5.3 D <= 5.3 D ) // alternative bool . print ( gteq ( 10 L , 3 L )) bool . print ( 10 L >= 3 L ) // alternative }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#bitand","text":"","title":"bitand"},{"location":"software/cx/userdocs/basics-native-functions/#bitor","text":"","title":"bitor"},{"location":"software/cx/userdocs/basics-native-functions/#bitxor","text":"","title":"bitxor"},{"location":"software/cx/userdocs/basics-native-functions/#bitclear","text":"","title":"bitclear"},{"location":"software/cx/userdocs/basics-native-functions/#bitshl","text":"","title":"bitshl"},{"location":"software/cx/userdocs/basics-native-functions/#bitshr","text":"Note: the preceding functions only work with arguments of type i32 or i64 .","title":"bitshr"},{"location":"software/cx/userdocs/basics-native-functions/#example_2","text":"package main func main () { i32 . print ( bitand ( 5 , 1 )) i32 . print ( 5 & 1 ) // alternative i64 . print ( bitor ( 3 L , 2 L )) i64 . print ( 3 L | 2 L ) // alternative i32 . print ( bitxor ( 10 , 2 )) i32 . print ( 10 ^ 2 ) // alternative i64 . print ( bitclear ( 5 L , 2 L )) i64 . print ( 5 L &^ 2 L ) // alternative i32 . print ( bitshl ( 2 , 3 )) i32 . print ( 2 << 3 ) // alternative i32 . print ( bitshr ( 16 , 3 )) i32 . print ( 16 >> 3 ) // alternative }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#add","text":"","title":"add"},{"location":"software/cx/userdocs/basics-native-functions/#sub","text":"","title":"sub"},{"location":"software/cx/userdocs/basics-native-functions/#mul","text":"","title":"mul"},{"location":"software/cx/userdocs/basics-native-functions/#div","text":"Note: the preceding functions only work with arguments of type byte , i32 , i64 , f32 or f64 .","title":"div"},{"location":"software/cx/userdocs/basics-native-functions/#example_3","text":"package main func main () { byte . print ( add ( 5 B , 10 B )) byte . print ( 5 B + 10 B ) // alternative i32 . print ( sub ( 3 , 7 )) i32 . print ( 3 - 7 ) // alternative i64 . print ( mul ( 4 L , 5 L )) i64 . print ( 4 L * 5 L ) // alternative f32 . print ( div ( 4.3 , 2.1 )) f32 . print ( 4.3 / 2.1 ) // alternative }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#mod","text":"Note: the preceding function only works with arguments of type byte , i32 or i64 .","title":"mod"},{"location":"software/cx/userdocs/basics-native-functions/#example_4","text":"package main func main () { byte . print ( mod ( 5 B , 3 B )) byte . print ( 5 B % 3 B ) // alternative }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#len","text":"Note: the preceding function only works with arguments of type str , arrays or slices .","title":"len"},{"location":"software/cx/userdocs/basics-native-functions/#example_5","text":"package main func main () { var string str var array [ 5 ] i32 var slice [] i32 string = \"this should print 20\" array = [ 5 ] i32 { 1 , 2 , 3 , 4 , 5 } slice = [] i32 { 10 , 20 , 30 } i32 . print ( len ( string )) // prints 20 i32 . print ( len ( array )) // prints 5 i32 . print ( len ( slice )) // prints 3 }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#printf","text":"Note: the preceding function requires a format str as its first argument, followed by any number of arguments of type str , i32 , i64 , f32 or f64 . The format string recognizes the following directives: %s for strings, %d for integers and %f for floating point numbers.","title":"printf"},{"location":"software/cx/userdocs/basics-native-functions/#example_6","text":"package main func main () { var name str var age i32 var wrongPI f32 var error f64 name = \"Richard\" age = 14 wrongPI = 3.16 error = 0.0000000000000001 D printf ( \"Hello, %s. My name is %s. I see that you calculated the value of PI wrong (%f). I think this is not so bad, considering your young age of %d. When I was %d years old, I remember I miscalculated it, too (I got %f as a result, using a numerical method). If you are using a numerical method, please consider reaching an error lower than %f to get an acceptable result, and not a ridiculous value such as %f. \\n\\nBest regards!\\n\" , name , \"Edward\" , wrongPI , age , 25 , 3.1417 , error , 0.1 ) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#sprintf","text":"Note: the preceding function requires a format str as its first argument, followed by any number of arguments of type str , i32 , i64 , f32 or f64 . The format string recognizes the following directives: %s for strings, %d for integers and %f for floating point numbers. package main func main () { var reply str var name str var title str name = \"Edward\" title = \"Richard 8 PI\" reply = sprintf ( \"Thank you for contacting our technical support, %s. We see that you are having trouble with our video game titled '%s', targetted to kids under age %d. If you provide us with your parents e-mail address, we'll be glad to help you!\" , name , title , 14 ) str . print ( reply ) }","title":"sprintf"},{"location":"software/cx/userdocs/basics-native-functions/#slice-functions","text":"","title":"Slice Functions"},{"location":"software/cx/userdocs/basics-native-functions/#append","text":"","title":"append"},{"location":"software/cx/userdocs/basics-native-functions/#example_7","text":"package main func main () { var slc1 [] i32 slc1 = append ( slc1 , 1 ) slc1 = append ( slc1 , 2 ) var slc2 [] i32 slc2 = append ( slc1 , 3 ) slc2 = append ( slc2 , 4 ) i32 . print ( len ( slc1 )) // prints 2 i32 . print ( len ( slc2 )) // prints 4 }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#inputoutput-functions","text":"The following functions are used to handle input from the user and to print output to a terminal.","title":"Input/Output Functions"},{"location":"software/cx/userdocs/basics-native-functions/#read","text":"","title":"read"},{"location":"software/cx/userdocs/basics-native-functions/#example_8","text":"package main func main () { var password str for true { printf ( \"What's the password, kid? \" ) password = read () if password == \"123\" { str . print ( \"Welcome back.\" ) return } else { str . print ( \"Wrong, but you'll get another chance.\" ) } } }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#byteprint","text":"","title":"byte.print"},{"location":"software/cx/userdocs/basics-native-functions/#boolprint","text":"","title":"bool.print"},{"location":"software/cx/userdocs/basics-native-functions/#strprint","text":"","title":"str.print"},{"location":"software/cx/userdocs/basics-native-functions/#i32print","text":"","title":"i32.print"},{"location":"software/cx/userdocs/basics-native-functions/#i64print","text":"","title":"i64.print"},{"location":"software/cx/userdocs/basics-native-functions/#f32print","text":"","title":"f32.print"},{"location":"software/cx/userdocs/basics-native-functions/#f64print","text":"","title":"f64.print"},{"location":"software/cx/userdocs/basics-native-functions/#printf_1","text":"","title":"printf"},{"location":"software/cx/userdocs/basics-native-functions/#example_9","text":"package main func main () { byte . print ( 5 B ) bool . print ( true ) str . print ( \"Hello!\" ) i32 . print ( 5 ) i64 . print ( 5 L ) f32 . print ( 5.0 ) f64 . print ( 5.0 D ) printf ( \"For a better example, check section Type-inferenced Functions'\" ) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#parse-functions","text":"All parse functions follow the same pattern: XXX.YYY where XXX is the receiving type and YYY is the target type. You can read these functions as \"parse XXX to YYY\".","title":"Parse Functions"},{"location":"software/cx/userdocs/basics-native-functions/#bytestr","text":"","title":"byte.str"},{"location":"software/cx/userdocs/basics-native-functions/#bytei32","text":"","title":"byte.i32"},{"location":"software/cx/userdocs/basics-native-functions/#bytei64","text":"","title":"byte.i64"},{"location":"software/cx/userdocs/basics-native-functions/#bytef32","text":"","title":"byte.f32"},{"location":"software/cx/userdocs/basics-native-functions/#bytef64","text":"","title":"byte.f64"},{"location":"software/cx/userdocs/basics-native-functions/#example_10","text":"package main func main () { var b byte b = 30 B str . print ( str . concat ( \"Hello, \" , byte . str ( b ))) i32 . print ( 5 + byte . i32 ( b )) i64 . print ( 10 L + byte . i64 ( b )) f32 . print ( 33.3 + byte . f32 ( b )) f64 . print ( 50.111 D + byte . f64 ( b )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i32byte","text":"","title":"i32.byte"},{"location":"software/cx/userdocs/basics-native-functions/#i32str","text":"","title":"i32.str"},{"location":"software/cx/userdocs/basics-native-functions/#i32i64","text":"","title":"i32.i64"},{"location":"software/cx/userdocs/basics-native-functions/#i32f32","text":"","title":"i32.f32"},{"location":"software/cx/userdocs/basics-native-functions/#i32f64","text":"","title":"i32.f64"},{"location":"software/cx/userdocs/basics-native-functions/#example_11","text":"package main func main () { var num i32 num = 43 str . print ( str . concat ( \"Hello, \" , i32 . str ( num ))) byte . print ( 5 B + i32 . byte ( num )) i64 . print ( 10 L + i32 . i64 ( num )) f32 . print ( 33.3 + i32 . f32 ( num )) f64 . print ( 50.111 D + i32 . f64 ( num )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i64byte","text":"","title":"i64.byte"},{"location":"software/cx/userdocs/basics-native-functions/#i64str","text":"","title":"i64.str"},{"location":"software/cx/userdocs/basics-native-functions/#i64i32","text":"","title":"i64.i32"},{"location":"software/cx/userdocs/basics-native-functions/#i64f32","text":"","title":"i64.f32"},{"location":"software/cx/userdocs/basics-native-functions/#i64f64","text":"","title":"i64.f64"},{"location":"software/cx/userdocs/basics-native-functions/#example_12","text":"package main func main () { var num i64 num = 43 L str . print ( str . concat ( \"Hello, \" , i64 . str ( num ))) byte . print ( 5 B + i64 . byte ( num )) i64 . print ( 10 L + i64 . i64 ( num )) f32 . print ( 33.3 + i64 . f32 ( num )) f64 . print ( 50.111 D + i64 . f64 ( num )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f32byte","text":"","title":"f32.byte"},{"location":"software/cx/userdocs/basics-native-functions/#f32str","text":"","title":"f32.str"},{"location":"software/cx/userdocs/basics-native-functions/#f32i32","text":"","title":"f32.i32"},{"location":"software/cx/userdocs/basics-native-functions/#f32i64","text":"","title":"f32.i64"},{"location":"software/cx/userdocs/basics-native-functions/#f32f64","text":"","title":"f32.f64"},{"location":"software/cx/userdocs/basics-native-functions/#example_13","text":"package main func main () { var num f32 num = 43.33 str . print ( str . concat ( \"Hello, \" , f32 . str ( num ))) byte . print ( 5 B + f32 . byte ( num )) i32 . print ( 33 + f32 . f32 ( num )) i64 . print ( 10 L + f32 . i64 ( num )) f64 . print ( 50.111 D + f32 . f64 ( num )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f64byte","text":"","title":"f64.byte"},{"location":"software/cx/userdocs/basics-native-functions/#f64str","text":"","title":"f64.str"},{"location":"software/cx/userdocs/basics-native-functions/#f64i32","text":"","title":"f64.i32"},{"location":"software/cx/userdocs/basics-native-functions/#f64i64","text":"","title":"f64.i64"},{"location":"software/cx/userdocs/basics-native-functions/#f64f32","text":"","title":"f64.f32"},{"location":"software/cx/userdocs/basics-native-functions/#example_14","text":"package main func main () { var num f64 num = 43.33 D str . print ( str . concat ( \"Hello, \" , f64 . str ( num ))) byte . print ( 5 B + f64 . byte ( num )) i32 . print ( 33 + f64 . f32 ( num )) i64 . print ( 10 L + f64 . i64 ( num )) f32 . print ( 50.111 + f64 . f32 ( num )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#strbyte","text":"","title":"str.byte"},{"location":"software/cx/userdocs/basics-native-functions/#stri32","text":"","title":"str.i32"},{"location":"software/cx/userdocs/basics-native-functions/#stri64","text":"","title":"str.i64"},{"location":"software/cx/userdocs/basics-native-functions/#strf32","text":"","title":"str.f32"},{"location":"software/cx/userdocs/basics-native-functions/#strf64","text":"","title":"str.f64"},{"location":"software/cx/userdocs/basics-native-functions/#example_15","text":"package main func main () { var num str num = \"33\" byte . print ( 5 B + str . byte ( num )) i32 . print ( 33 + str . f32 ( num )) i64 . print ( 10 L + str . i64 ( num )) f32 . print ( 50.111 + str . f32 ( num )) f64 . print ( 50.111 D + str . f32 ( num )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#unit-testing","text":"The assert function is used to test the value of an expression against another value. This function is useful to test that a package is working as intended.","title":"Unit Testing"},{"location":"software/cx/userdocs/basics-native-functions/#assert","text":"","title":"assert"},{"location":"software/cx/userdocs/basics-native-functions/#example_16","text":"package main func foo () ( res str ) { res = \"Working well\" } func main () { var results [] bool results = append ( results , assert ( 5 + 5 , 10 , \"Something went wrong with 5 + 5\" )) results = append ( results , assert ( foo (), \"Working well\" , \"Something went wrong with foo()\" )) var successfulTests i32 for c := 0 ; c < len ( results ); c ++ { if results [ c ] { successfulTests = successfulTests + 1 } } printf ( \"%d tests were performed\\n\" , len ( results )) printf ( \"%d were successful\\n\" , successfulTests ) printf ( \"%d failed\\n\" , len ( results ) - successfulTests ) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#bool-type-functions","text":"","title":"bool Type Functions"},{"location":"software/cx/userdocs/basics-native-functions/#boolprint_1","text":"","title":"bool.print"},{"location":"software/cx/userdocs/basics-native-functions/#booleq","text":"","title":"bool.eq"},{"location":"software/cx/userdocs/basics-native-functions/#booluneq","text":"","title":"bool.uneq"},{"location":"software/cx/userdocs/basics-native-functions/#boolnot","text":"","title":"bool.not"},{"location":"software/cx/userdocs/basics-native-functions/#boolor","text":"","title":"bool.or"},{"location":"software/cx/userdocs/basics-native-functions/#booland","text":"","title":"bool.and"},{"location":"software/cx/userdocs/basics-native-functions/#example_17","text":"package main func main () { bool . print ( bool . eq ( true , true )) bool . print ( bool . uneq ( false , true )) bool . print ( bool . not ( false )) bool . print ( bool . or ( true , false )) bool . print ( bool . and ( true , true )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#type-functions","text":"","title":"Type Functions"},{"location":"software/cx/userdocs/basics-native-functions/#str-type-functions","text":"","title":"str Type Functions"},{"location":"software/cx/userdocs/basics-native-functions/#strprint_1","text":"","title":"str.print"},{"location":"software/cx/userdocs/basics-native-functions/#strconcat","text":"","title":"str.concat"},{"location":"software/cx/userdocs/basics-native-functions/#example_18","text":"package main func main () { str . print ( str . concat ( \"Hello, \" , \"World!\" )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i32-type-functions","text":"The following functions are of general purpose and are restricted to work with data structures of type i32 where it makes sense.","title":"i32 Type Functions"},{"location":"software/cx/userdocs/basics-native-functions/#i32print_1","text":"","title":"i32.print"},{"location":"software/cx/userdocs/basics-native-functions/#i32add","text":"","title":"i32.add"},{"location":"software/cx/userdocs/basics-native-functions/#i32sub","text":"","title":"i32.sub"},{"location":"software/cx/userdocs/basics-native-functions/#i32mul","text":"","title":"i32.mul"},{"location":"software/cx/userdocs/basics-native-functions/#i32div","text":"","title":"i32.div"},{"location":"software/cx/userdocs/basics-native-functions/#i32mod","text":"","title":"i32.mod"},{"location":"software/cx/userdocs/basics-native-functions/#i32abs","text":"","title":"i32.abs"},{"location":"software/cx/userdocs/basics-native-functions/#example_19","text":"package main func main () { i32 . print ( i32 . add ( 5 , 7 )) i32 . print ( i32 . sub ( 6 , 3 )) i32 . print ( i32 . mul ( 4 , 8 )) i32 . print ( i32 . div ( 15 , 3 )) i32 . print ( i32 . mod ( 5 , 3 )) i32 . print ( i32 . abs ( - 13 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i32log","text":"","title":"i32.log"},{"location":"software/cx/userdocs/basics-native-functions/#i32log2","text":"","title":"i32.log2"},{"location":"software/cx/userdocs/basics-native-functions/#i32log10","text":"","title":"i32.log10"},{"location":"software/cx/userdocs/basics-native-functions/#i32pow","text":"","title":"i32.pow"},{"location":"software/cx/userdocs/basics-native-functions/#i32sqrt","text":"","title":"i32.sqrt"},{"location":"software/cx/userdocs/basics-native-functions/#example_20","text":"package main func main () { i32 . print ( i32 . log ( 13 )) i32 . print ( i32 . log2 ( 3 )) i32 . print ( i32 . log10 ( 12 )) i32 . print ( i32 . pow ( 4 , 4 )) i32 . print ( i32 . sqrt ( 2 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i32gt","text":"","title":"i32.gt"},{"location":"software/cx/userdocs/basics-native-functions/#i32gteq","text":"","title":"i32.gteq"},{"location":"software/cx/userdocs/basics-native-functions/#i32lt","text":"","title":"i32.lt"},{"location":"software/cx/userdocs/basics-native-functions/#i32lteq","text":"","title":"i32.lteq"},{"location":"software/cx/userdocs/basics-native-functions/#i32eq","text":"","title":"i32.eq"},{"location":"software/cx/userdocs/basics-native-functions/#i32uneq","text":"","title":"i32.uneq"},{"location":"software/cx/userdocs/basics-native-functions/#example_21","text":"package main func main () { bool . print ( i32 . gt ( 5 , 3 )) bool . print ( i32 . gteq ( 3 , 8 )) bool . print ( i32 . lt ( 4 , 3 )) bool . print ( i32 . lteq ( 8 , 6 )) bool . print ( i32 . eq ( - 9 , - 9 )) bool . print ( i32 . uneq ( 3 , 3 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i32bitand","text":"","title":"i32.bitand"},{"location":"software/cx/userdocs/basics-native-functions/#i32bitor","text":"","title":"i32.bitor"},{"location":"software/cx/userdocs/basics-native-functions/#i32bitxor","text":"","title":"i32.bitxor"},{"location":"software/cx/userdocs/basics-native-functions/#i32bitclear","text":"","title":"i32.bitclear"},{"location":"software/cx/userdocs/basics-native-functions/#i32bitshl","text":"","title":"i32.bitshl"},{"location":"software/cx/userdocs/basics-native-functions/#i32bitshr","text":"","title":"i32.bitshr"},{"location":"software/cx/userdocs/basics-native-functions/#example_22","text":"package main func main () { i32 . print ( i32 . bitand ( 2 , 5 )) i32 . print ( i32 . bitor ( 8 , 3 )) i32 . print ( i32 . bitxor ( 3 , 9 )) i32 . print ( i32 . bitclear ( 4 , 4 )) i32 . print ( i32 . bitshl ( 5 , 9 )) i32 . print ( i32 . bitshr ( 1 , 6 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i32max","text":"","title":"i32.max"},{"location":"software/cx/userdocs/basics-native-functions/#i32min","text":"","title":"i32.min"},{"location":"software/cx/userdocs/basics-native-functions/#example_23","text":"package main func main () { i32 . print ( i32 . max ( 2 , 5 )) i32 . print ( i32 . min ( 10 , 3 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i32rand","text":"","title":"i32.rand"},{"location":"software/cx/userdocs/basics-native-functions/#example_24","text":"package main func main () { i32 . print ( i32 . rand ( 0 , 100 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i64-type-functions","text":"The following functions are of general purpose and are restricted to work with data structures of type i64 where it makes sense.","title":"i64 Type Functions"},{"location":"software/cx/userdocs/basics-native-functions/#i64print_1","text":"","title":"i64.print"},{"location":"software/cx/userdocs/basics-native-functions/#i64add","text":"","title":"i64.add"},{"location":"software/cx/userdocs/basics-native-functions/#i64sub","text":"","title":"i64.sub"},{"location":"software/cx/userdocs/basics-native-functions/#i64mul","text":"","title":"i64.mul"},{"location":"software/cx/userdocs/basics-native-functions/#i64div","text":"","title":"i64.div"},{"location":"software/cx/userdocs/basics-native-functions/#i64mod","text":"","title":"i64.mod"},{"location":"software/cx/userdocs/basics-native-functions/#i64abs","text":"","title":"i64.abs"},{"location":"software/cx/userdocs/basics-native-functions/#example_25","text":"package main func main () { i64 . print ( i64 . add ( 5 L , 7 L )) i64 . print ( i64 . sub ( 6 L , 3 L )) i64 . print ( i64 . mul ( 4 L , 8 L )) i64 . print ( i64 . div ( 15 L , 3 L )) i64 . print ( i64 . mod ( 5 L , 3 L )) i64 . print ( i64 . abs ( - 13 L )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i64log","text":"","title":"i64.log"},{"location":"software/cx/userdocs/basics-native-functions/#i64log2","text":"","title":"i64.log2"},{"location":"software/cx/userdocs/basics-native-functions/#i64log10","text":"","title":"i64.log10"},{"location":"software/cx/userdocs/basics-native-functions/#i64pow","text":"","title":"i64.pow"},{"location":"software/cx/userdocs/basics-native-functions/#i64sqrt","text":"","title":"i64.sqrt"},{"location":"software/cx/userdocs/basics-native-functions/#example_26","text":"package main func main () { i64 . print ( i64 . log ( 13 L )) i64 . print ( i64 . log2 ( 3 L )) i64 . print ( i64 . log10 ( 12 L )) i64 . print ( i64 . pow ( 4 L , 4 L )) i64 . print ( i64 . sqrt ( 2 L )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i64gt","text":"","title":"i64.gt"},{"location":"software/cx/userdocs/basics-native-functions/#i64gteq","text":"","title":"i64.gteq"},{"location":"software/cx/userdocs/basics-native-functions/#i64lt","text":"","title":"i64.lt"},{"location":"software/cx/userdocs/basics-native-functions/#i64lteq","text":"","title":"i64.lteq"},{"location":"software/cx/userdocs/basics-native-functions/#i64eq","text":"","title":"i64.eq"},{"location":"software/cx/userdocs/basics-native-functions/#i64uneq","text":"","title":"i64.uneq"},{"location":"software/cx/userdocs/basics-native-functions/#example_27","text":"package main func main () { bool . print ( i64 . gt ( 5 L , 3 L )) bool . print ( i64 . gteq ( 3 L , 8 L )) bool . print ( i64 . lt ( 4 L , 3 L )) bool . print ( i64 . lteq ( 8 L , 6 L )) bool . print ( i64 . eq ( - 9 L , - 9 L )) bool . print ( i64 . uneq ( 3 L , 3 L )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i64bitand","text":"","title":"i64.bitand"},{"location":"software/cx/userdocs/basics-native-functions/#i64bitor","text":"","title":"i64.bitor"},{"location":"software/cx/userdocs/basics-native-functions/#i64bitxor","text":"","title":"i64.bitxor"},{"location":"software/cx/userdocs/basics-native-functions/#i64bitclear","text":"","title":"i64.bitclear"},{"location":"software/cx/userdocs/basics-native-functions/#i64bitshl","text":"","title":"i64.bitshl"},{"location":"software/cx/userdocs/basics-native-functions/#i64bitshr","text":"","title":"i64.bitshr"},{"location":"software/cx/userdocs/basics-native-functions/#example_28","text":"package main func main () { i64 . print ( i64 . bitand ( 2 L , 5 L )) i64 . print ( i64 . bitor ( 8 L , 3 L )) i64 . print ( i64 . bitxor ( 3 L , 9 L )) i64 . print ( i64 . bitclear ( 4 L , 4 L )) i64 . print ( i64 . bitshl ( 5 L , 9 L )) i64 . print ( i64 . bitshr ( 1 L , 6 L )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i64max","text":"","title":"i64.max"},{"location":"software/cx/userdocs/basics-native-functions/#i64min","text":"","title":"i64.min"},{"location":"software/cx/userdocs/basics-native-functions/#example_29","text":"package main func main () { i64 . print ( i64 . max ( 2 L , 5 L )) i64 . print ( i64 . min ( 10 L , 3 L )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#i64rand","text":"","title":"i64.rand"},{"location":"software/cx/userdocs/basics-native-functions/#example_30","text":"package main func main () { i64 . print ( i64 . rand ( 0 L , 100 L )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f32-type-functions","text":"The following functions are of general purpose and are restricted to work with data structures of type f32 where it makes sense.","title":"f32 Type Functions"},{"location":"software/cx/userdocs/basics-native-functions/#f32print_1","text":"","title":"f32.print"},{"location":"software/cx/userdocs/basics-native-functions/#f32add","text":"","title":"f32.add"},{"location":"software/cx/userdocs/basics-native-functions/#f32sub","text":"","title":"f32.sub"},{"location":"software/cx/userdocs/basics-native-functions/#f32mul","text":"","title":"f32.mul"},{"location":"software/cx/userdocs/basics-native-functions/#f32div","text":"","title":"f32.div"},{"location":"software/cx/userdocs/basics-native-functions/#f32abs","text":"","title":"f32.abs"},{"location":"software/cx/userdocs/basics-native-functions/#example_31","text":"package main func main () { f32 . print ( f32 . add ( 5.3 , 10.5 )) f32 . print ( f32 . sub ( 3.2 , 6.7 )) f32 . print ( f32 . mul ( - 7.9 , - 7.1 )) f32 . print ( f32 . div ( 10.3 , 2.4 )) f32 . print ( f32 . abs ( - 3.14159 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f32log","text":"","title":"f32.log"},{"location":"software/cx/userdocs/basics-native-functions/#f32log2","text":"","title":"f32.log2"},{"location":"software/cx/userdocs/basics-native-functions/#f32log10","text":"","title":"f32.log10"},{"location":"software/cx/userdocs/basics-native-functions/#f32pow","text":"","title":"f32.pow"},{"location":"software/cx/userdocs/basics-native-functions/#f32sqrt","text":"","title":"f32.sqrt"},{"location":"software/cx/userdocs/basics-native-functions/#example_32","text":"package main func main () { f32 . print ( f32 . log ( 2.3 )) f32 . print ( f32 . log2 ( 3.4 )) f32 . print ( f32 . log10 ( 3.0 )) f32 . print ( f32 . pow ( - 5.3 , 2.0 )) f32 . print ( f32 . sqrt ( 4.0 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f32sin","text":"","title":"f32.sin"},{"location":"software/cx/userdocs/basics-native-functions/#f32cos","text":"","title":"f32.cos"},{"location":"software/cx/userdocs/basics-native-functions/#example_33","text":"package main func main () { f32 . print ( f32 . sin ( 1.0 )) f32 . print ( f32 . cos ( 2.0 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f32gt","text":"","title":"f32.gt"},{"location":"software/cx/userdocs/basics-native-functions/#f32gteq","text":"","title":"f32.gteq"},{"location":"software/cx/userdocs/basics-native-functions/#f32lt","text":"","title":"f32.lt"},{"location":"software/cx/userdocs/basics-native-functions/#f32lteq","text":"","title":"f32.lteq"},{"location":"software/cx/userdocs/basics-native-functions/#f32eq","text":"","title":"f32.eq"},{"location":"software/cx/userdocs/basics-native-functions/#f32uneq","text":"","title":"f32.uneq"},{"location":"software/cx/userdocs/basics-native-functions/#example_34","text":"package main func main () { bool . print ( f32 . gt ( 5.3 , 3.1 )) bool . print ( f32 . gteq ( 3.7 , 1.9 )) bool . print ( f32 . lt ( 2.4 , 5.5 )) bool . print ( f32 . lteq ( 8.4 , 3.2 )) bool . print ( f32 . eq ( 10.3 , 10.3 )) bool . print ( f32 . uneq ( 8.9 , 3.3 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f32max","text":"","title":"f32.max"},{"location":"software/cx/userdocs/basics-native-functions/#f32min","text":"","title":"f32.min"},{"location":"software/cx/userdocs/basics-native-functions/#example_35","text":"package main func main () { f32 . print ( f32 . max ( 3.3 , 4.2 )) f32 . print ( f32 . min ( 5.8 , 9.9 )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f64-type-functions","text":"The following functions are of general purpose and are restricted to work with data structures of type f64 where it makes sense.","title":"f64 Type Functions"},{"location":"software/cx/userdocs/basics-native-functions/#f64print_1","text":"","title":"f64.print"},{"location":"software/cx/userdocs/basics-native-functions/#f64add","text":"","title":"f64.add"},{"location":"software/cx/userdocs/basics-native-functions/#f64sub","text":"","title":"f64.sub"},{"location":"software/cx/userdocs/basics-native-functions/#f64mul","text":"","title":"f64.mul"},{"location":"software/cx/userdocs/basics-native-functions/#f64div","text":"","title":"f64.div"},{"location":"software/cx/userdocs/basics-native-functions/#f64abs","text":"","title":"f64.abs"},{"location":"software/cx/userdocs/basics-native-functions/#example_36","text":"package main func main () { f64 . print ( f64 . add ( 5.3 D , 10.5 D )) f64 . print ( f64 . sub ( 3.2 D , 6.7 D )) f64 . print ( f64 . mul ( - 7.9 D , - 7.1 D )) f64 . print ( f64 . div ( 10.3 D , 2.4 D )) f64 . print ( f64 . abs ( - 3.14159 D )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f64log","text":"","title":"f64.log"},{"location":"software/cx/userdocs/basics-native-functions/#f64log2","text":"","title":"f64.log2"},{"location":"software/cx/userdocs/basics-native-functions/#f64log10","text":"","title":"f64.log10"},{"location":"software/cx/userdocs/basics-native-functions/#f64pow","text":"","title":"f64.pow"},{"location":"software/cx/userdocs/basics-native-functions/#f64sqrt","text":"","title":"f64.sqrt"},{"location":"software/cx/userdocs/basics-native-functions/#example_37","text":"package main func main () { f64 . print ( f64 . log ( 2.3 D )) f64 . print ( f64 . log2 ( 3.4 D )) f64 . print ( f64 . log10 ( 3.0 D )) f64 . print ( f64 . pow ( - 5.3 D , 2.0 D )) f64 . print ( f64 . sqrt ( 4.0 D )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f64sin","text":"","title":"f64.sin"},{"location":"software/cx/userdocs/basics-native-functions/#f64cos","text":"","title":"f64.cos"},{"location":"software/cx/userdocs/basics-native-functions/#example_38","text":"package main func main () { f64 . print ( f64 . sin ( 1.0 D )) f64 . print ( f64 . cos ( 2.0 D )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f64gt","text":"","title":"f64.gt"},{"location":"software/cx/userdocs/basics-native-functions/#f64gteq","text":"","title":"f64.gteq"},{"location":"software/cx/userdocs/basics-native-functions/#f64lt","text":"","title":"f64.lt"},{"location":"software/cx/userdocs/basics-native-functions/#f64lteq","text":"","title":"f64.lteq"},{"location":"software/cx/userdocs/basics-native-functions/#f64eq","text":"","title":"f64.eq"},{"location":"software/cx/userdocs/basics-native-functions/#f64uneq","text":"","title":"f64.uneq"},{"location":"software/cx/userdocs/basics-native-functions/#example_39","text":"package main func main () { bool . print ( f64 . gt ( 5.3 D , 3.1 D )) bool . print ( f64 . gteq ( 3.7 D , 1.9 D )) bool . print ( f64 . lt ( 2.4 D , 5.5 D )) bool . print ( f64 . lteq ( 8.4 D , 3.2 D )) bool . print ( f64 . eq ( 10.3 D , 10.3 D )) bool . print ( f64 . uneq ( 8.9 D , 3.3 D )) }","title":"Example"},{"location":"software/cx/userdocs/basics-native-functions/#f64max","text":"","title":"f64.max"},{"location":"software/cx/userdocs/basics-native-functions/#f64min","text":"","title":"f64.min"},{"location":"software/cx/userdocs/basics-native-functions/#example_40","text":"package main func main () { f64 . print ( f64 . max ( 3.3 D , 4.2 D )) f64 . print ( f64 . min ( 5.8 D , 9.9 D )) }","title":"Example"},{"location":"software/cx/userdocs/basics-repl/","text":"REPL Once CX has been successfully installed, running cx should print this in your terminal: CX 0.5.13 More information about CX is available at http : //cx.skycoin.net/ and https://github.com/skycoin/cx/ : func main { ... * This is the CX REPL ( read-eval-print loop ), where you can debug and modify CX programs. The CX REPL starts with a barebones CX structure (a main package and a main function) that you can use to start building a program. Let's create a small program to test the REPL. First, write str.print(\"Testing the REPL\") after the * , and press enter. After pressing enter you'll see the message \"Testing the REPL\" on the screen. If you then write :dp (short for :dProgram or debug program ), you should get the current program AST printed: Program 0. - Package : main Functions 0. - Function : main () () 0. - Expression : str . print ( \"\" str ) 1. - Function : * init () () As we can see, we have a main package, a main function, and we have a single expression: str.print(\"Testing the REPL\") . Let's now create a new function. In order to do this, we first need to leave the main function. At this moment, any expression (or function call) that we add to our program is going to be added to main . To exit a function declaration, press Ctrl+D . The prompt ( * ) should have changed indentation, and the REPL now shouldn't print :func main {... above the prompt: : func main { ... * * Now, let's enter a function prototype (an empty function which only specifies the name, the inputs and the outputs): * func sum ( num1 i32 , num2 i32 ) ( num3 i32 ) {} * You can check that the function was indeed added by issuing a :dp command. If we want to add expressions to sum , we have to select it: * : func sum : func sum { ... * Notice that there's a semicolon before func sum . Now we can add an expression to it: : func sum { ... * num3 = num1 + num2 Now, exit sum and select main with the command :func main . Let's add a call to sum and print the value that it returns when giving the arguments 10 and 20: : func main { ... * i32 . print ( sum ( 10 , 20 )) 30","title":"REPL"},{"location":"software/cx/userdocs/basics-repl/#repl","text":"Once CX has been successfully installed, running cx should print this in your terminal: CX 0.5.13 More information about CX is available at http : //cx.skycoin.net/ and https://github.com/skycoin/cx/ : func main { ... * This is the CX REPL ( read-eval-print loop ), where you can debug and modify CX programs. The CX REPL starts with a barebones CX structure (a main package and a main function) that you can use to start building a program. Let's create a small program to test the REPL. First, write str.print(\"Testing the REPL\") after the * , and press enter. After pressing enter you'll see the message \"Testing the REPL\" on the screen. If you then write :dp (short for :dProgram or debug program ), you should get the current program AST printed: Program 0. - Package : main Functions 0. - Function : main () () 0. - Expression : str . print ( \"\" str ) 1. - Function : * init () () As we can see, we have a main package, a main function, and we have a single expression: str.print(\"Testing the REPL\") . Let's now create a new function. In order to do this, we first need to leave the main function. At this moment, any expression (or function call) that we add to our program is going to be added to main . To exit a function declaration, press Ctrl+D . The prompt ( * ) should have changed indentation, and the REPL now shouldn't print :func main {... above the prompt: : func main { ... * * Now, let's enter a function prototype (an empty function which only specifies the name, the inputs and the outputs): * func sum ( num1 i32 , num2 i32 ) ( num3 i32 ) {} * You can check that the function was indeed added by issuing a :dp command. If we want to add expressions to sum , we have to select it: * : func sum : func sum { ... * Notice that there's a semicolon before func sum . Now we can add an expression to it: : func sum { ... * num3 = num1 + num2 Now, exit sum and select main with the command :func main . Let's add a call to sum and print the value that it returns when giving the arguments 10 and 20: : func main { ... * i32 . print ( sum ( 10 , 20 )) 30","title":"REPL"},{"location":"software/cx/userdocs/basics-running-cx/","text":"Running CX To run a CX program, you have to type, for example, cx the-program.cx . Let's try to run some examples from the examples directory in this repository. In a terminal, type this: cd $GOPATH /src/github.com/skycoin/cx/ cx examples/hello-world.cx This should print Hello World! in the terminal. Now try running cx examples/opengl/game.cx . Other Options If you write cx --help or cx -h , you should see a text describing CX's usage, options and more. Some interesting options are: --base which generates a CX program's assembly code (in Go) --compile which generates an executable file --repl which loads the program and makes CX run in REPL mode (useful for debugging a program) --web which starts CX as a RESTful web service (you can send code to be evaluated to this endpoint: http://127.0.0.1:5336/eval)","title":"Running CX"},{"location":"software/cx/userdocs/basics-running-cx/#running-cx","text":"To run a CX program, you have to type, for example, cx the-program.cx . Let's try to run some examples from the examples directory in this repository. In a terminal, type this: cd $GOPATH /src/github.com/skycoin/cx/ cx examples/hello-world.cx This should print Hello World! in the terminal. Now try running cx examples/opengl/game.cx .","title":"Running CX"},{"location":"software/cx/userdocs/basics-running-cx/#other-options","text":"If you write cx --help or cx -h , you should see a text describing CX's usage, options and more. Some interesting options are: --base which generates a CX program's assembly code (in Go) --compile which generates an executable file --repl which loads the program and makes CX run in REPL mode (useful for debugging a program) --web which starts CX as a RESTful web service (you can send code to be evaluated to this endpoint: http://127.0.0.1:5336/eval)","title":"Other Options"},{"location":"software/cx/userdocs/basics-runtime/","text":"Runtime The previous section presents the language features from a syntax perspective. In this section we'll cover what's the logic behind these features: how they interact with other elements in your program, and what are the intrinsic capabilities of each of these features. Packages Packages are CX's mechanism for better organizing your code. Although it is theoretically possible to store a big project in a single package, the code will most likely become very hard to understand. In CX the programmer is encouraged to place the files that define the code of a package in separate directory. Any subdirectory in a package's directory should also contain only source code files that define elements of the same package. Nevertheless, CX will not throw any error if you don't follow this way of laying out your source files. In fact, you can declare different packages in a single source code file. Data Structures Data structures are particular arrangements of bytes that the language interprets and stores in special ways. The most basic data structures represent basic data, such as numbers and character strings, but these basic types can be used to construct more complex data types. Literals A literal is any data structure that is not being referenced by any variable yet. For example: 1 , true , []i32{1, 2, 3} , Point{x: 10, y: 20} . It's important to make a distinction, particularly with arrays , slices and struct instances . package main type Point struct { x i32 y i32 } func main () { var p1 Point p1 . x = 10 p1 . y = 20 p2 := Point { x : 11 , y : 21 } i32 . print ( p2 . x ) i32 . print ( p2 . y ) } In the example above we are creating two instances of the Point type. The first method we use does not involve struct literals, as a variable of that type is first created and then initialized. In the second case ( p2 ), the full struct instance is first created. CX creates an anonymous struct instance as soon as it encounters Points{x: 11, y: 21} , and then it proceeds to assign that literal to the p2 variable, using short variable declarations . package main func main () { var arr1 [ 3 ] i32 arr1 [ 0 ] = 1 arr1 [ 1 ] = 2 arr1 [ 2 ] = 3 arr2 := [ 3 ] i32 { 10 , 20 , 30 } } package main func main () { var slc1 [] i32 slc1 = append ( slc1 , 1 ) slc1 = append ( slc1 , 2 ) slc1 = append ( slc1 , 3 ) slc2 := [] i32 { 10 , 20 , 30 } } Similarly, in the two examples above we can see how we can declare array and slice variables and then we initialize them. In the case of arrays, we use the bracket notation, and for slices we have to use append , as slc1 starts with a size and capacity of 0. In the cases of arr2 and slc2 , we use literals to initialize them more conveniently. Regarding numbers, you need to be aware that implicit casting does not exist in CX. This means that the number 34 cannot be assigned to a variable of type i64 . In order to assign it, you need to either parse it using the native function i32.i64 or you can create a 64-bit integer literal. To create a number literal of a type other than i32 , you can use different suffixes: B , L and D , for byte , i64 (long) and f64 , respectively. So, assuming foo is of type i64 , you can do this assignment: foo = 34L . Variables When CX compiles a program, it knows how many bytes need to be reserved in the stack for each of the functions. CX can know this thanks to variable declarations. package main type Point struct { x i32 y i32 } func foo ( inp Point ) { var test1 i64 var test2 bool } func main () { var test3 i32 var test4 f32 } The two functions declared in the example above are going to reserve 17 and 8 bytes in the stack, respectively. In the case of the first function, foo needs to reserve space for an input parameter of type Point , which requires 8 bytes (because of the two i32 fields), and two local variables: one 64-bit integer that requires 8 bytes and a Boolean that requires a single byte. In the case of main , CX needs to reserve bytes for two local variables: a 32-bit integer and a single-precision floating point number, where each of them require 4 bytes. package main var global1 i32 func main () { var local i32 } Local variables are different than global variables. In order for globals to have a global scope they need to be allocated in a different memory segment than local variables. This different memory segment does not shrink or get bigger like the stack. This means that any global variable is going to be kept \"alive\" as long as the program keeps being executed. A global scope means that variables of this type are accessible to any function declared in the same package where the variable is declared, and to any function of other packages that are importing this package. package main func main () { var foo i32 i32 . print ( foo ) // prints 0 } In CX every variable is going to initially point to a nil value. This nil value is basically a series of one or more zeroes, depending on the size of the data type of a given variable. For example, in the code above we see that we have declared a variable of type i32 and we immediately print its value without initializing it. This CX program will print 0, as the value of foo is [0 0 0 0] in the stack (4 zeroes, as a 32-bit integer is represented by 4 bytes). In the case of data types that point to variable-sized structures, such as slices or character strings, these are initialized to a nil pointer, which is represented by 4 zeroed bytes. This nil pointer is located in the heap memory segment, instead of the stack. Primitive types There are seven primitive types in CX: bool , str , byte , i32 , i64 , f32 , and f64 . These types can be used to construct other more complex types, as will be seen in the next sections. bool and byte both require a single byte to represent their values. In the case of bool , there are only two possible values: true or false . In the case of byte you can represent up to 256 values, which range from 0 to 255. Next in size, we have i32 and f32 , where both of them require 4 bytes, and then we have i64 and f64 , which require 8 bytes each. Now, strings are special as they are static and dynamic sized at the same time. If you have a look at how a variable of type str reserves memory in the stack, you'll see that it requires 4 bytes, regardless of what text it's pointing to. The explanation behind this is that any str in CX actually behaves like a pointer behind the scenes, and the actual string gets stored in the heap memory segment. package main func main () { var foo str foo = str . concat ( \"Hello, \" , \"World!\" ) foo = \"Hi\" } When CX compiles the example above, three strings are first stored in the data memory segment (just like global variables, as these strings are constants, memory-wise): \"Hello, \" , \"World\" and \"Hi\" . When the program is executed, str.concat is called, which creates a new string by concatenating \"Hello, \" and \"World!\" , and this new character string is allocated in the heap memory segment. Then foo is assigned only the address of this new character string. Then we immediately re-assign foo with the address of \"Hi\" . This means that foo was first assigned a memory address located in the data memory segment, and then it was assigned an address located in the heap. Arrays Arrays, as in other programming languages, are used to create collections of data structures. These data structures can be primitive types, custom types or even arrays or slices. package main type Point struct { x i32 y i32 } func main () { var [ 5 ] i32 var [ 5 ] Point } In the example above, we're creating two arrays, one of a primitive type and the other one of a custom type. CX reserves memory for these arrays in the stack as soon as the function that contains them is called. In this case, 60 bytes are going to be reserved for main as soon as the program starts its execution, as main acts as the program's entry point. You need to be careful with arrays, as those can easily fill up your memory, especially with multi-dimensional arrays (or matrices). Also, another point to consider is performance. While accessing arrays is almost as fast as accessing an atomic variable, arrays can be troublesome when being sent/received as to/from functions. The reason behind this is that an array needs to be copied whenever it is sent to another function. If you're working with arrays of millions of elements and you need to be sending that arrays millions of times to another function, it's going to impact your program's performance a lot. A way to avoid this is to either use pointers to arrays or slices. Slices Dynamic arrays don't exist in CX. This means that the following code is not a valid CX program: package main func main () { var size i32 size = 13 var arr [ size ] // this is not valid } If you need an array that can grow in size as required, you need to use slices. Behind the scenes, slices are just arrays with some extra features. First of all, any slice in CX goes directly to the heap, as it's a data structure that is going to be changing in size. In contrast, arrays are always going to be stored in the stack, unless we're handling pointers to arrays. However, this behavior may change in the future, when CX's escape analysis mechanism improves (for example, the compiler can determine if an array is never going to change its size, and decide to keep it in the stack). The second characteristic of slices in CX is how they change their size. Any slice, when it's first declared, starts with a size and capacity of 0. The size represents how many elements are in a given slice, while the capacity represents how many elements can be allocated in that slice without having to be relocated in the heap. package main func main () { var slc [] i32 slc = append ( slc , 1 ) slc = append ( slc , 2 ) slc = append ( slc , 3 ) slc = append ( slc , 4 ) } In the code above we can see how we declare a slice and then we initialize it using the append function. After all the append s, we'll end up with a slice of size 4 and capacity 4, and this append ing process will create the following objects in the heap: [ 0 0 0 0 0 12 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 16 0 0 0 2 0 0 0 2 0 0 0 1 0 0 0 2 0 0 0 0 0 0 0 0 24 0 0 0 4 0 0 0 4 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 ] First, the slice slc starts with 0 objects in it; it is pointing to nil . Then, after the first append , the object [0 0 0 0 0 12 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0] is allocated to the heap. The first five bytes are used by CX's garbage collector. The next 4 bytes indicate the size of the object, and the remaining bytes are the actual slice slc . The first four bytes of slc tell us its current size, while the next four tell us its capacity. The remaining bytes of this object are the elements of the slice. The following object, [0 0 0 0 0 16 0 0 0 2 0 0 0 2 0 0 0 1 0 0 0 2 0 0 0] , shows now a size of 2 and a capacity of 2, with the 32-bit integers 1 and 2 as its elements. The last object, 0 0 0 0 0 24 0 0 0 4 0 0 0 4 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 , needs careful attention. We can see that our objects jumped from size 1 to 2 and finally 4. The same happened to its capacity, and the containing elements are now 1 , 2 , 3 and 4 . What happened to the slice of size 3 and capacity 3? First of all, capacities are increased by getting doubled each time the size of an object is greater than its capacity, so we would never get a slice of capacity 4 by following this method. Next, we need to think on what is capacity used for. Slices are just arrays, which means that they can't be resized. The dynamic nature of slices is emulated by copying the full slice to somewhere else in memory, but with a greater capacity. However, this will only happen if adding a new element to the existing slice would overflow it. This is why slices keep track of two metrics: size and capacity , i.e. how many actual elements are in the slice, and how many elements the currently allocated slice can hold, respectively. package main func main () { var arr1 [ 1 ] i32 arr1 [ 0 ] = 1 // add the first value var arr2 [ 2 ] i32 // double the size arr2 [ 0 ] = arr1 [ 0 ] // copy previous array arr2 [ 1 ] = 2 // add the second value var arr3 [ 4 ] i32 // double the size arr3 [ 0 ] = arr2 [ 0 ] // copy previous array arr3 [ 1 ] = arr2 [ 1 ] // copy previous array arr3 [ 2 ] = 3 // add the third value arr3 [ 3 ] = 4 // add the fourth value } The example above shows the behavior of the slice in the previous example, but using arrays. Structures Structures are CX's mechanism for creating custom types, as in many other C-like languages. Structures are basically a grouping of other primitive or custom types (called fields ) that together create another type of data structure. For example, a point can be defined by its coordinates in a two-dimensional space. In order to create a type Point , you can use a structure that contains two fields of type i32 , one for x and another for y , as in the example below. package main type Point struct { x i32 y i32 } func main () { var p Point p . x = 10 p . y = 20 } Whenever an instance of a structure is created by either declaring a variable of that type or by creating a literal of that type, CX reserves memory to hold space for all the fields defined in the structure declaration. Like in C, the bytes are reserved depending on the order of the fields in the structure declaration. package main type struct1 struct { field1 bool field2 i32 field3 i64 } type struct2 struct { field1 i64 field2 bool field3 i32 } func main () { var s1 struct1 var s2 struct2 } For example, in the code above a call to main will reserve a total of 26 bytes in the stack. In the case of the first struct instance, the first byte is going to represent field1 of type bool , the next four bytes are going to represent field2 of type i32 , and the final 8 bytes are going to represent field3 of type i64 . In the case of the next struct instance, the first eight bytes represent an i64 field so, although both struct instances contain the same number of fields and of the same type, the byte layout changes. Pointers Sometimes it's useful to pass variables to functions by reference instead of by value. package main import \"time\" func foo ( nums [ 100 ][ 100 ] i32 ) { // do something with nums } func main () { var start i64 var end i64 var nums [ 100 ][ 100 ] i32 start = time . UnixMilli () for c := 0 ; c < 10000 ; c ++ { foo ( nums ) } end = time . UnixMilli () printf ( \"elapsed time: \\t%d milliseconds\\n\" , end - start ) } The example above is very inefficient, as CX is going to be sending a 10,000 element matrix to foo 10,000 times. Every time foo is called, every byte of that matrix needs to be copied for foo . In my computer the example above takes around 638 milliseconds to run. package main import \"time\" func foo ( nums * [ 100 ][ 100 ] i32 ) { // do something with nums } func main () { var start i64 var end i64 var nums [ 100 ][ 100 ] i32 start = time . UnixMilli () for c := 0 ; c < 10000 ; c ++ { foo ( & nums ) } end = time . UnixMilli () printf ( \"elapsed time: \\t%d milliseconds\\n\" , end - start ) } A new version of the last program is shown above. In contrast to the last program, the code above sends a pointer to the matrix to foo . A pointer in CX uses only 4 bytes (in the future, pointers will use 8 bytes in 64-bit systems and 4 bytes in 32-bit systems), so instead of copying 10,000 bytes, we only copy 4 bytes to foo every time we call it. This version of the program takes only 3 milliseconds to run in my computer. package main func foo ( inp i32 ) { inp = 10 } func main () { var num i32 num = 15 i32 . print ( num ) // prints 15 foo ( num ) i32 . print ( num ) // prints 15 } In the example above, we send num to foo , and then we re-assign the input's value to 10 . If we print the value of num before and after calling foo , we can see that in both instances 15 will be printed to the console. package main func foo ( num * i32 ) { * num = 10 } func main () { var num i32 num = 15 i32 . print ( num ) // prints 15 foo ( & num ) i32 . print ( num ) // prints 10 } The code above is a pointer-version of the previous example. In this case, instead of sending num by value, we send it by reference, using the & operator. foo also changed, and it now accepts a pointer to a 32-bit integer, i.e. *i32 . After running the example, you'll notice that, this time, foo is now changing num 's value. Escape Analysis Consider the following example: package main func foo () ( pNum * i32 ) { var num i32 num = 5 // this is in the stack pNum = & num } func stackDestroyer () { var arr [ 5 ] i32 } func main () { var pNum * i32 pNum = foo () stackDestroyer () i32 . print ( * pNum ) } If we store foo 's num 's value ( 5 ) in the stack, and then we call stackDestroyer , isn't arr going to overwrite the bytes storing the 5 ? This doesn't happen, because that 5 is now in the heap. But this doesn't mean that any value being pointed to is going to be moved to the heap. For example, let's re-examine one of the examples presented in the Pointers section: package main func foo ( num * i32 ) { * num = 10 } func main () { var num i32 num = 15 i32 . print ( num ) // prints 15 foo ( & num ) i32 . print ( num ) // prints 10 } If any value being pointed to by a pointer was sent to the heap, we wouldn't be able to change num s value, which is stored in the stack; we would be changing the heap's copied value. package main func foo () ( pNum * i32 ) { var num i32 var pNum * i32 num = 5 pNum = & num } func main () { var pNum * i32 pNum = foo () i32 . print ( * pNum ) // prints 5, which is stored in the heap } Basically, in order to fix this problem, whenever a pointer needs to be returned from a function, the value it is pointing to \"escapes\" to the heap. In the example above, we can see that num 's value is going to be preserved by escaping to the heap, as we are returning a pointer to it from foo . package main func foo () ( pNum * i32 ) { var num i32 var pNum * i32 num = 5 // this is in the stack pNum = & num // the pointer will be returned, so the value is sent to the heap } func stackDestroyer () { var arr [ 5 ] i32 } func main () { var pNum * i32 pNum = foo () stackDestroyer () // if 5 does not escape, it would be destroyed by this function i32 . print ( * pNum ) // prints 5, which is stored in the heap } We can check this behavior even further in the example above. After calling foo , we call stackDestroyer , which overwrites the following 20 bytes after main 's stack frame. Yet, when we call i32.print(*pNum) , we'll see that we still have access to a 5 . This 5 is not the one created in foo , though, but a copy of it that was allocated in the heap. Control Flow Once we have the appropriate data structures for our program, we'll now need to process them. In order to do so, we need to have access to some control flow structures. Functions Functions are used to encapsulate routines that we plan to be frequently calling. In addition to encapsulating a series of expressions and statements, we can also receive input parameters and return output parameters, just like mathematical functions. package main func main () { var players [] str players = [] str { \"Richard\" , \"Mario\" , \"Edward\" } str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , players [ 0 ])) str . print ( \"=======================\" ) str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , players [ 1 ])) str . print ( \"=======================\" ) str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , players [ 2 ])) str . print ( \"=======================\" ) } For example, if we see the code above we'll notice that it seems repetitive. We can fix this by creating a function, as seen in the example below. package main func drawBox ( player str ) { str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , player )) str . print ( \"=======================\" ) } func main () { var players [] str players = [] str { \"Richard\" , \"Mario\" , \"Edward\" } drawBox ( players [ 0 ]) drawBox ( players [ 1 ]) drawBox ( players [ 2 ]) } Methods Methods are useful when we want to associate a particular function to a particular custom type (associating functions to primitive types is not allowed). This allows us to create more readable code. package main type Player struct { Name str HP i32 Mana i32 Lives i32 } type Monster struct { Name str HP i32 Mana i32 } func ( player Player ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\tLives: \\t%d\\n\\n%s\" , player . Name , player . HP , player . Mana , player . Lives , ` \u2500\u2584\u2588\u2588\u2588\u2588\u2584\u2584\u2591 \u2584\u2580\u2588\u2580\u2590\u2514\u2500\u2510\u2591\u2591 \u2588\u2584\u2590\u258c\u2584\u2588\u2584\u2518\u2588\u2588 \u2514\u2584\u2584\u2584\u2584\u2584\u2518\u2588\u2588\u2588 \u2588\u2588\u2592\u2588\u2592\u2588\u2588\u2588\u2580` )) } func ( monster Monster ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\n%s\" , monster . Name , monster . HP , monster . Mana , ` \u2572\u2572\u256d\u2501\u2501\u2501\u2501\u256e\u2572\u2572 \u256d\u256e\u2503\u2586\u2508\u2508\u2586\u2503\u256d\u256e \u2503\u2570\u252b\u25bd\u25bd\u25bd\u25bd\u2523\u256f\u2503 \u2570\u2501\u252b\u25b3\u25b3\u25b3\u25b3\u2523\u2501\u256f \u2572\u2572\u2503\u2508\u2508\u2508\u2508\u2503\u2572\u2572 \u2572\u2572\u2503\u2508\u250f\u2513\u2508\u2503\u2572\u2572 \u2594\u2594\u2570\u2501\u256f\u2570\u2501\u256f\u2594\u2594` )) } func main () { var player Player player . Name = \"Mario\" player . HP = 10 player . Mana = 10 player . Lives = 3 player . draw () var monster Monster monster . Name = \"Domo-kun\" monster . HP = 7 monster . Mana = 4 monster . draw () } The example above shows us how we can create two versions of the function draw , and the behavior of each depends on the custom type that we're using to call it. If and if/else if and if/else statements are used to execute a block of instructions only if certain condition is true or false. Behind the scenes, if and if/else statements are parsed to a series of jmp instructions internally. For example, in the case of an if statement, we will jump 0 instructions if certain predicate is true, and it will jump n instructions if the predicate is false, where n is the number of instructions in the if block of instructions. package main func main () { if true { str . print ( \"hi\" ) } str . print ( \"bye\" ) } Program 0. - Package : main Functions 0. - Function : main () () 0. - Expression : jmp ( true bool ) 1. - Expression : str . print ( \"\" str ) 2. - Expression : jmp ( true bool ) 3. - Expression : str . print ( \"\" str ) 1. - Function : * init () () In the two code snippets above we can see how an if statement is translated by the parser to a set of two jmp instructions. These jmp instructions have some meta data in them that is not shown in the second snippet: how many lines to jump if its predicate is true and how many lines to jump if the predicate is false. jmp is not meant to be used by CX programmers (it's only part of the CX base language), so you don't need to worry about it. package main type Player struct { Name str HP i32 Mana i32 Lives i32 } type Monster struct { Name str HP i32 Mana i32 } func main () { var player Player player . Name = \"Mario\" player . HP = 10 player . Mana = 10 player . Lives = 3 var monster Monster monster . Name = \"Domo-kun\" monster . HP = 7 monster . Mana = 4 if player . HP < 5 { str . print ( \"===DANGER!===\" ) } else { str . print ( \"===YOU CAN DO IT!===\" ) } if monster . HP < 10 { str . print ( sprintf ( \"===%s is bleeding!===\" , monster . Name )) } if monster . HP < 5 { str . print ( sprintf ( \"===%s is dying!===\" , monster . Name )) } if monster . HP == 0 { str . print ( sprintf ( \"===%s is dead!===\" , monster . Name )) } } Continuing with the example from the previous section (to some extent), let's use if and if/else statements to determine what messages are going to be displayed to the user. These messages represent the state of the player or the monster, depending on their hit points (HP). For loop The for loop is the only looping mechanism in CX. Just like if and if/else statements are constructed using jmp statements, for loop statements are also constructed the same way. package main func main () { for c := 0 ; c < 10 ; c ++ { i32 . print ( c ) } } Program 0. - Package : main Functions 0. - Function : main () () 0. - Declaration : c i32 1. - Expression : c i32 = identity ( 0 i32 ) 2. - Expression : * lcl_0 bool = lt ( c i32 , 10 i32 ) 3. - Expression : jmp ( * lcl_0 bool ) 4. - Expression : i32 . print ( c i32 ) 5. - Declaration : c i32 6. - Expression : c i32 = i32 . add ( c i32 , 1 i32 ) 7. - Expression : jmp ( true bool ) 1. - Function : * init () () The code snippets above illustrate how a for loop that counts from 0 to 9 is translated to a set of of jmp instructions. package main type Player struct { Name str HP i32 Mana i32 Lives i32 } type Monster struct { Name str HP i32 Mana i32 } func ( player Player ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\tLives: \\t%d\\n\\n%s\" , player . Name , player . HP , player . Mana , player . Lives , ` \u2500\u2584\u2588\u2588\u2588\u2588\u2584\u2584\u2591 \u2584\u2580\u2588\u2580\u2590\u2514\u2500\u2510\u2591\u2591 \u2588\u2584\u2590\u258c\u2584\u2588\u2584\u2518\u2588\u2588 \u2514\u2584\u2584\u2584\u2584\u2584\u2518\u2588\u2588\u2588 \u2588\u2588\u2592\u2588\u2592\u2588\u2588\u2588\u2580` )) } func ( monster Monster ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\n%s\" , monster . Name , monster . HP , monster . Mana , ` \u2572\u2572\u256d\u2501\u2501\u2501\u2501\u256e\u2572\u2572 \u256d\u256e\u2503\u2586\u2508\u2508\u2586\u2503\u256d\u256e \u2503\u2570\u252b\u25bd\u25bd\u25bd\u25bd\u2523\u256f\u2503 \u2570\u2501\u252b\u25b3\u25b3\u25b3\u25b3\u2523\u2501\u256f \u2572\u2572\u2503\u2508\u2508\u2508\u2508\u2503\u2572\u2572 \u2572\u2572\u2503\u2508\u250f\u2513\u2508\u2503\u2572\u2572 \u2594\u2594\u2570\u2501\u256f\u2570\u2501\u256f\u2594\u2594` )) } func ( player Player ) attack ( cmd str , monster * Monster ) { if bool . or ( cmd == \"M\" , cmd == \"m\" ) { var dmg i32 dmg = i32 . rand ( 1 , 4 ) ( * monster ). HP = ( * monster ). HP - dmg printf ( \"'%s' suffered a magic attack. Lost %d HP. New HP is %d\\n\" , ( * monster ). Name , dmg , ( * monster ). HP ) } else { var dmg i32 dmg = i32 . rand ( 1 , 2 ) ( * monster ). HP = ( * monster ). HP - dmg printf ( \"'%s' suffered a physical attack. Lost %d HP. New HP is %d\\n\" , ( * monster ). Name , dmg , ( * monster ). HP ) } } func ( monster Monster ) attack ( cmd str , player * Player ) { var dmg i32 dmg = i32 . rand ( 1 , 5 ) ( * player ). HP = ( * player ). HP - dmg printf ( \"'%s' suffered a physical attack. Lost %d HP. New HP is %d\\n\" , ( * player ). Name , dmg , ( * player ). HP ) } func battleStatus ( player Player , monster Monster ) { if player . HP < 5 { str . print ( \"===DANGER!===\" ) } else { str . print ( \"===YOU CAN DO IT!===\" ) } if player . HP == 0 { str . print ( \"===YOU DIED===\" ) } if monster . HP < 10 && monster . HP >= 5 { str . print ( sprintf ( \"===%s is bleeding!===\" , monster . Name )) } if monster . HP < 5 && monster . HP > 0 { str . print ( sprintf ( \"===%s is dying!===\" , monster . Name )) } if monster . HP <= 0 { str . print ( sprintf ( \"===%s is dead!===\" , monster . Name )) } } func main () { var player Player player . Name = \"Mario\" player . HP = 10 player . Mana = 10 player . Lives = 3 var monster Monster monster . Name = \"Domo-kun\" monster . HP = 7 monster . Mana = 4 player . draw () monster . draw () for true { if player . HP < 1 || monster . HP < 1 { return } printf ( \"Command? (M)agic; (P)hysical; (E)xit\\t\" ) var cmd str cmd = read () if cmd == \"E\" || cmd == \"e\" { return } player . draw () monster . draw () player . attack ( cmd , & monster ) monster . attack ( cmd , & player ) battleStatus ( player , monster ) } } Lastly, we can see how we use a for loop to create something similar to a REPL for the program that we have been building in the last few sections. Go-to The last control flow mechanism is go-to , which is achieved through the goto statement. package main func main () ( out i32 ) { beginning : printf ( \"What animal do you like the most: (C)at; (D)og; (P)igeon\\n\" ) var cmd str cmd = read () if cmd == \"C\" || cmd == \"c\" { goto cat } if cmd == \"D\" || cmd == \"d\" { goto dog } if cmd == \"P\" || cmd == \"p\" { goto pigeon } cat : str . print ( \"meow\" ) goto beginning dog : str . print ( \"woof\" ) goto beginning pigeon : str . print ( \"tweet\" ) goto beginning } The program above creates an infinite loop by using goto s. The loop will keep asking the user to input commands, and will jump to certain expression depending on the command. Affordances","title":"Runtime"},{"location":"software/cx/userdocs/basics-runtime/#runtime","text":"The previous section presents the language features from a syntax perspective. In this section we'll cover what's the logic behind these features: how they interact with other elements in your program, and what are the intrinsic capabilities of each of these features.","title":"Runtime"},{"location":"software/cx/userdocs/basics-runtime/#packages","text":"Packages are CX's mechanism for better organizing your code. Although it is theoretically possible to store a big project in a single package, the code will most likely become very hard to understand. In CX the programmer is encouraged to place the files that define the code of a package in separate directory. Any subdirectory in a package's directory should also contain only source code files that define elements of the same package. Nevertheless, CX will not throw any error if you don't follow this way of laying out your source files. In fact, you can declare different packages in a single source code file.","title":"Packages"},{"location":"software/cx/userdocs/basics-runtime/#data-structures","text":"Data structures are particular arrangements of bytes that the language interprets and stores in special ways. The most basic data structures represent basic data, such as numbers and character strings, but these basic types can be used to construct more complex data types.","title":"Data Structures"},{"location":"software/cx/userdocs/basics-runtime/#literals","text":"A literal is any data structure that is not being referenced by any variable yet. For example: 1 , true , []i32{1, 2, 3} , Point{x: 10, y: 20} . It's important to make a distinction, particularly with arrays , slices and struct instances . package main type Point struct { x i32 y i32 } func main () { var p1 Point p1 . x = 10 p1 . y = 20 p2 := Point { x : 11 , y : 21 } i32 . print ( p2 . x ) i32 . print ( p2 . y ) } In the example above we are creating two instances of the Point type. The first method we use does not involve struct literals, as a variable of that type is first created and then initialized. In the second case ( p2 ), the full struct instance is first created. CX creates an anonymous struct instance as soon as it encounters Points{x: 11, y: 21} , and then it proceeds to assign that literal to the p2 variable, using short variable declarations . package main func main () { var arr1 [ 3 ] i32 arr1 [ 0 ] = 1 arr1 [ 1 ] = 2 arr1 [ 2 ] = 3 arr2 := [ 3 ] i32 { 10 , 20 , 30 } } package main func main () { var slc1 [] i32 slc1 = append ( slc1 , 1 ) slc1 = append ( slc1 , 2 ) slc1 = append ( slc1 , 3 ) slc2 := [] i32 { 10 , 20 , 30 } } Similarly, in the two examples above we can see how we can declare array and slice variables and then we initialize them. In the case of arrays, we use the bracket notation, and for slices we have to use append , as slc1 starts with a size and capacity of 0. In the cases of arr2 and slc2 , we use literals to initialize them more conveniently. Regarding numbers, you need to be aware that implicit casting does not exist in CX. This means that the number 34 cannot be assigned to a variable of type i64 . In order to assign it, you need to either parse it using the native function i32.i64 or you can create a 64-bit integer literal. To create a number literal of a type other than i32 , you can use different suffixes: B , L and D , for byte , i64 (long) and f64 , respectively. So, assuming foo is of type i64 , you can do this assignment: foo = 34L .","title":"Literals"},{"location":"software/cx/userdocs/basics-runtime/#variables","text":"When CX compiles a program, it knows how many bytes need to be reserved in the stack for each of the functions. CX can know this thanks to variable declarations. package main type Point struct { x i32 y i32 } func foo ( inp Point ) { var test1 i64 var test2 bool } func main () { var test3 i32 var test4 f32 } The two functions declared in the example above are going to reserve 17 and 8 bytes in the stack, respectively. In the case of the first function, foo needs to reserve space for an input parameter of type Point , which requires 8 bytes (because of the two i32 fields), and two local variables: one 64-bit integer that requires 8 bytes and a Boolean that requires a single byte. In the case of main , CX needs to reserve bytes for two local variables: a 32-bit integer and a single-precision floating point number, where each of them require 4 bytes. package main var global1 i32 func main () { var local i32 } Local variables are different than global variables. In order for globals to have a global scope they need to be allocated in a different memory segment than local variables. This different memory segment does not shrink or get bigger like the stack. This means that any global variable is going to be kept \"alive\" as long as the program keeps being executed. A global scope means that variables of this type are accessible to any function declared in the same package where the variable is declared, and to any function of other packages that are importing this package. package main func main () { var foo i32 i32 . print ( foo ) // prints 0 } In CX every variable is going to initially point to a nil value. This nil value is basically a series of one or more zeroes, depending on the size of the data type of a given variable. For example, in the code above we see that we have declared a variable of type i32 and we immediately print its value without initializing it. This CX program will print 0, as the value of foo is [0 0 0 0] in the stack (4 zeroes, as a 32-bit integer is represented by 4 bytes). In the case of data types that point to variable-sized structures, such as slices or character strings, these are initialized to a nil pointer, which is represented by 4 zeroed bytes. This nil pointer is located in the heap memory segment, instead of the stack.","title":"Variables"},{"location":"software/cx/userdocs/basics-runtime/#primitive-types","text":"There are seven primitive types in CX: bool , str , byte , i32 , i64 , f32 , and f64 . These types can be used to construct other more complex types, as will be seen in the next sections. bool and byte both require a single byte to represent their values. In the case of bool , there are only two possible values: true or false . In the case of byte you can represent up to 256 values, which range from 0 to 255. Next in size, we have i32 and f32 , where both of them require 4 bytes, and then we have i64 and f64 , which require 8 bytes each. Now, strings are special as they are static and dynamic sized at the same time. If you have a look at how a variable of type str reserves memory in the stack, you'll see that it requires 4 bytes, regardless of what text it's pointing to. The explanation behind this is that any str in CX actually behaves like a pointer behind the scenes, and the actual string gets stored in the heap memory segment. package main func main () { var foo str foo = str . concat ( \"Hello, \" , \"World!\" ) foo = \"Hi\" } When CX compiles the example above, three strings are first stored in the data memory segment (just like global variables, as these strings are constants, memory-wise): \"Hello, \" , \"World\" and \"Hi\" . When the program is executed, str.concat is called, which creates a new string by concatenating \"Hello, \" and \"World!\" , and this new character string is allocated in the heap memory segment. Then foo is assigned only the address of this new character string. Then we immediately re-assign foo with the address of \"Hi\" . This means that foo was first assigned a memory address located in the data memory segment, and then it was assigned an address located in the heap.","title":"Primitive types"},{"location":"software/cx/userdocs/basics-runtime/#arrays","text":"Arrays, as in other programming languages, are used to create collections of data structures. These data structures can be primitive types, custom types or even arrays or slices. package main type Point struct { x i32 y i32 } func main () { var [ 5 ] i32 var [ 5 ] Point } In the example above, we're creating two arrays, one of a primitive type and the other one of a custom type. CX reserves memory for these arrays in the stack as soon as the function that contains them is called. In this case, 60 bytes are going to be reserved for main as soon as the program starts its execution, as main acts as the program's entry point. You need to be careful with arrays, as those can easily fill up your memory, especially with multi-dimensional arrays (or matrices). Also, another point to consider is performance. While accessing arrays is almost as fast as accessing an atomic variable, arrays can be troublesome when being sent/received as to/from functions. The reason behind this is that an array needs to be copied whenever it is sent to another function. If you're working with arrays of millions of elements and you need to be sending that arrays millions of times to another function, it's going to impact your program's performance a lot. A way to avoid this is to either use pointers to arrays or slices.","title":"Arrays"},{"location":"software/cx/userdocs/basics-runtime/#slices","text":"Dynamic arrays don't exist in CX. This means that the following code is not a valid CX program: package main func main () { var size i32 size = 13 var arr [ size ] // this is not valid } If you need an array that can grow in size as required, you need to use slices. Behind the scenes, slices are just arrays with some extra features. First of all, any slice in CX goes directly to the heap, as it's a data structure that is going to be changing in size. In contrast, arrays are always going to be stored in the stack, unless we're handling pointers to arrays. However, this behavior may change in the future, when CX's escape analysis mechanism improves (for example, the compiler can determine if an array is never going to change its size, and decide to keep it in the stack). The second characteristic of slices in CX is how they change their size. Any slice, when it's first declared, starts with a size and capacity of 0. The size represents how many elements are in a given slice, while the capacity represents how many elements can be allocated in that slice without having to be relocated in the heap. package main func main () { var slc [] i32 slc = append ( slc , 1 ) slc = append ( slc , 2 ) slc = append ( slc , 3 ) slc = append ( slc , 4 ) } In the code above we can see how we declare a slice and then we initialize it using the append function. After all the append s, we'll end up with a slice of size 4 and capacity 4, and this append ing process will create the following objects in the heap: [ 0 0 0 0 0 12 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 16 0 0 0 2 0 0 0 2 0 0 0 1 0 0 0 2 0 0 0 0 0 0 0 0 24 0 0 0 4 0 0 0 4 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 ] First, the slice slc starts with 0 objects in it; it is pointing to nil . Then, after the first append , the object [0 0 0 0 0 12 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0] is allocated to the heap. The first five bytes are used by CX's garbage collector. The next 4 bytes indicate the size of the object, and the remaining bytes are the actual slice slc . The first four bytes of slc tell us its current size, while the next four tell us its capacity. The remaining bytes of this object are the elements of the slice. The following object, [0 0 0 0 0 16 0 0 0 2 0 0 0 2 0 0 0 1 0 0 0 2 0 0 0] , shows now a size of 2 and a capacity of 2, with the 32-bit integers 1 and 2 as its elements. The last object, 0 0 0 0 0 24 0 0 0 4 0 0 0 4 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 , needs careful attention. We can see that our objects jumped from size 1 to 2 and finally 4. The same happened to its capacity, and the containing elements are now 1 , 2 , 3 and 4 . What happened to the slice of size 3 and capacity 3? First of all, capacities are increased by getting doubled each time the size of an object is greater than its capacity, so we would never get a slice of capacity 4 by following this method. Next, we need to think on what is capacity used for. Slices are just arrays, which means that they can't be resized. The dynamic nature of slices is emulated by copying the full slice to somewhere else in memory, but with a greater capacity. However, this will only happen if adding a new element to the existing slice would overflow it. This is why slices keep track of two metrics: size and capacity , i.e. how many actual elements are in the slice, and how many elements the currently allocated slice can hold, respectively. package main func main () { var arr1 [ 1 ] i32 arr1 [ 0 ] = 1 // add the first value var arr2 [ 2 ] i32 // double the size arr2 [ 0 ] = arr1 [ 0 ] // copy previous array arr2 [ 1 ] = 2 // add the second value var arr3 [ 4 ] i32 // double the size arr3 [ 0 ] = arr2 [ 0 ] // copy previous array arr3 [ 1 ] = arr2 [ 1 ] // copy previous array arr3 [ 2 ] = 3 // add the third value arr3 [ 3 ] = 4 // add the fourth value } The example above shows the behavior of the slice in the previous example, but using arrays.","title":"Slices"},{"location":"software/cx/userdocs/basics-runtime/#structures","text":"Structures are CX's mechanism for creating custom types, as in many other C-like languages. Structures are basically a grouping of other primitive or custom types (called fields ) that together create another type of data structure. For example, a point can be defined by its coordinates in a two-dimensional space. In order to create a type Point , you can use a structure that contains two fields of type i32 , one for x and another for y , as in the example below. package main type Point struct { x i32 y i32 } func main () { var p Point p . x = 10 p . y = 20 } Whenever an instance of a structure is created by either declaring a variable of that type or by creating a literal of that type, CX reserves memory to hold space for all the fields defined in the structure declaration. Like in C, the bytes are reserved depending on the order of the fields in the structure declaration. package main type struct1 struct { field1 bool field2 i32 field3 i64 } type struct2 struct { field1 i64 field2 bool field3 i32 } func main () { var s1 struct1 var s2 struct2 } For example, in the code above a call to main will reserve a total of 26 bytes in the stack. In the case of the first struct instance, the first byte is going to represent field1 of type bool , the next four bytes are going to represent field2 of type i32 , and the final 8 bytes are going to represent field3 of type i64 . In the case of the next struct instance, the first eight bytes represent an i64 field so, although both struct instances contain the same number of fields and of the same type, the byte layout changes.","title":"Structures"},{"location":"software/cx/userdocs/basics-runtime/#pointers","text":"Sometimes it's useful to pass variables to functions by reference instead of by value. package main import \"time\" func foo ( nums [ 100 ][ 100 ] i32 ) { // do something with nums } func main () { var start i64 var end i64 var nums [ 100 ][ 100 ] i32 start = time . UnixMilli () for c := 0 ; c < 10000 ; c ++ { foo ( nums ) } end = time . UnixMilli () printf ( \"elapsed time: \\t%d milliseconds\\n\" , end - start ) } The example above is very inefficient, as CX is going to be sending a 10,000 element matrix to foo 10,000 times. Every time foo is called, every byte of that matrix needs to be copied for foo . In my computer the example above takes around 638 milliseconds to run. package main import \"time\" func foo ( nums * [ 100 ][ 100 ] i32 ) { // do something with nums } func main () { var start i64 var end i64 var nums [ 100 ][ 100 ] i32 start = time . UnixMilli () for c := 0 ; c < 10000 ; c ++ { foo ( & nums ) } end = time . UnixMilli () printf ( \"elapsed time: \\t%d milliseconds\\n\" , end - start ) } A new version of the last program is shown above. In contrast to the last program, the code above sends a pointer to the matrix to foo . A pointer in CX uses only 4 bytes (in the future, pointers will use 8 bytes in 64-bit systems and 4 bytes in 32-bit systems), so instead of copying 10,000 bytes, we only copy 4 bytes to foo every time we call it. This version of the program takes only 3 milliseconds to run in my computer. package main func foo ( inp i32 ) { inp = 10 } func main () { var num i32 num = 15 i32 . print ( num ) // prints 15 foo ( num ) i32 . print ( num ) // prints 15 } In the example above, we send num to foo , and then we re-assign the input's value to 10 . If we print the value of num before and after calling foo , we can see that in both instances 15 will be printed to the console. package main func foo ( num * i32 ) { * num = 10 } func main () { var num i32 num = 15 i32 . print ( num ) // prints 15 foo ( & num ) i32 . print ( num ) // prints 10 } The code above is a pointer-version of the previous example. In this case, instead of sending num by value, we send it by reference, using the & operator. foo also changed, and it now accepts a pointer to a 32-bit integer, i.e. *i32 . After running the example, you'll notice that, this time, foo is now changing num 's value.","title":"Pointers"},{"location":"software/cx/userdocs/basics-runtime/#escape-analysis","text":"Consider the following example: package main func foo () ( pNum * i32 ) { var num i32 num = 5 // this is in the stack pNum = & num } func stackDestroyer () { var arr [ 5 ] i32 } func main () { var pNum * i32 pNum = foo () stackDestroyer () i32 . print ( * pNum ) } If we store foo 's num 's value ( 5 ) in the stack, and then we call stackDestroyer , isn't arr going to overwrite the bytes storing the 5 ? This doesn't happen, because that 5 is now in the heap. But this doesn't mean that any value being pointed to is going to be moved to the heap. For example, let's re-examine one of the examples presented in the Pointers section: package main func foo ( num * i32 ) { * num = 10 } func main () { var num i32 num = 15 i32 . print ( num ) // prints 15 foo ( & num ) i32 . print ( num ) // prints 10 } If any value being pointed to by a pointer was sent to the heap, we wouldn't be able to change num s value, which is stored in the stack; we would be changing the heap's copied value. package main func foo () ( pNum * i32 ) { var num i32 var pNum * i32 num = 5 pNum = & num } func main () { var pNum * i32 pNum = foo () i32 . print ( * pNum ) // prints 5, which is stored in the heap } Basically, in order to fix this problem, whenever a pointer needs to be returned from a function, the value it is pointing to \"escapes\" to the heap. In the example above, we can see that num 's value is going to be preserved by escaping to the heap, as we are returning a pointer to it from foo . package main func foo () ( pNum * i32 ) { var num i32 var pNum * i32 num = 5 // this is in the stack pNum = & num // the pointer will be returned, so the value is sent to the heap } func stackDestroyer () { var arr [ 5 ] i32 } func main () { var pNum * i32 pNum = foo () stackDestroyer () // if 5 does not escape, it would be destroyed by this function i32 . print ( * pNum ) // prints 5, which is stored in the heap } We can check this behavior even further in the example above. After calling foo , we call stackDestroyer , which overwrites the following 20 bytes after main 's stack frame. Yet, when we call i32.print(*pNum) , we'll see that we still have access to a 5 . This 5 is not the one created in foo , though, but a copy of it that was allocated in the heap.","title":"Escape Analysis"},{"location":"software/cx/userdocs/basics-runtime/#control-flow","text":"Once we have the appropriate data structures for our program, we'll now need to process them. In order to do so, we need to have access to some control flow structures.","title":"Control Flow"},{"location":"software/cx/userdocs/basics-runtime/#functions","text":"Functions are used to encapsulate routines that we plan to be frequently calling. In addition to encapsulating a series of expressions and statements, we can also receive input parameters and return output parameters, just like mathematical functions. package main func main () { var players [] str players = [] str { \"Richard\" , \"Mario\" , \"Edward\" } str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , players [ 0 ])) str . print ( \"=======================\" ) str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , players [ 1 ])) str . print ( \"=======================\" ) str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , players [ 2 ])) str . print ( \"=======================\" ) } For example, if we see the code above we'll notice that it seems repetitive. We can fix this by creating a function, as seen in the example below. package main func drawBox ( player str ) { str . print ( \"=======================\" ) str . print ( str . concat ( \"Name: \\t\" , player )) str . print ( \"=======================\" ) } func main () { var players [] str players = [] str { \"Richard\" , \"Mario\" , \"Edward\" } drawBox ( players [ 0 ]) drawBox ( players [ 1 ]) drawBox ( players [ 2 ]) }","title":"Functions"},{"location":"software/cx/userdocs/basics-runtime/#methods","text":"Methods are useful when we want to associate a particular function to a particular custom type (associating functions to primitive types is not allowed). This allows us to create more readable code. package main type Player struct { Name str HP i32 Mana i32 Lives i32 } type Monster struct { Name str HP i32 Mana i32 } func ( player Player ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\tLives: \\t%d\\n\\n%s\" , player . Name , player . HP , player . Mana , player . Lives , ` \u2500\u2584\u2588\u2588\u2588\u2588\u2584\u2584\u2591 \u2584\u2580\u2588\u2580\u2590\u2514\u2500\u2510\u2591\u2591 \u2588\u2584\u2590\u258c\u2584\u2588\u2584\u2518\u2588\u2588 \u2514\u2584\u2584\u2584\u2584\u2584\u2518\u2588\u2588\u2588 \u2588\u2588\u2592\u2588\u2592\u2588\u2588\u2588\u2580` )) } func ( monster Monster ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\n%s\" , monster . Name , monster . HP , monster . Mana , ` \u2572\u2572\u256d\u2501\u2501\u2501\u2501\u256e\u2572\u2572 \u256d\u256e\u2503\u2586\u2508\u2508\u2586\u2503\u256d\u256e \u2503\u2570\u252b\u25bd\u25bd\u25bd\u25bd\u2523\u256f\u2503 \u2570\u2501\u252b\u25b3\u25b3\u25b3\u25b3\u2523\u2501\u256f \u2572\u2572\u2503\u2508\u2508\u2508\u2508\u2503\u2572\u2572 \u2572\u2572\u2503\u2508\u250f\u2513\u2508\u2503\u2572\u2572 \u2594\u2594\u2570\u2501\u256f\u2570\u2501\u256f\u2594\u2594` )) } func main () { var player Player player . Name = \"Mario\" player . HP = 10 player . Mana = 10 player . Lives = 3 player . draw () var monster Monster monster . Name = \"Domo-kun\" monster . HP = 7 monster . Mana = 4 monster . draw () } The example above shows us how we can create two versions of the function draw , and the behavior of each depends on the custom type that we're using to call it.","title":"Methods"},{"location":"software/cx/userdocs/basics-runtime/#if-and-ifelse","text":"if and if/else statements are used to execute a block of instructions only if certain condition is true or false. Behind the scenes, if and if/else statements are parsed to a series of jmp instructions internally. For example, in the case of an if statement, we will jump 0 instructions if certain predicate is true, and it will jump n instructions if the predicate is false, where n is the number of instructions in the if block of instructions. package main func main () { if true { str . print ( \"hi\" ) } str . print ( \"bye\" ) } Program 0. - Package : main Functions 0. - Function : main () () 0. - Expression : jmp ( true bool ) 1. - Expression : str . print ( \"\" str ) 2. - Expression : jmp ( true bool ) 3. - Expression : str . print ( \"\" str ) 1. - Function : * init () () In the two code snippets above we can see how an if statement is translated by the parser to a set of two jmp instructions. These jmp instructions have some meta data in them that is not shown in the second snippet: how many lines to jump if its predicate is true and how many lines to jump if the predicate is false. jmp is not meant to be used by CX programmers (it's only part of the CX base language), so you don't need to worry about it. package main type Player struct { Name str HP i32 Mana i32 Lives i32 } type Monster struct { Name str HP i32 Mana i32 } func main () { var player Player player . Name = \"Mario\" player . HP = 10 player . Mana = 10 player . Lives = 3 var monster Monster monster . Name = \"Domo-kun\" monster . HP = 7 monster . Mana = 4 if player . HP < 5 { str . print ( \"===DANGER!===\" ) } else { str . print ( \"===YOU CAN DO IT!===\" ) } if monster . HP < 10 { str . print ( sprintf ( \"===%s is bleeding!===\" , monster . Name )) } if monster . HP < 5 { str . print ( sprintf ( \"===%s is dying!===\" , monster . Name )) } if monster . HP == 0 { str . print ( sprintf ( \"===%s is dead!===\" , monster . Name )) } } Continuing with the example from the previous section (to some extent), let's use if and if/else statements to determine what messages are going to be displayed to the user. These messages represent the state of the player or the monster, depending on their hit points (HP).","title":"If and if/else"},{"location":"software/cx/userdocs/basics-runtime/#for-loop","text":"The for loop is the only looping mechanism in CX. Just like if and if/else statements are constructed using jmp statements, for loop statements are also constructed the same way. package main func main () { for c := 0 ; c < 10 ; c ++ { i32 . print ( c ) } } Program 0. - Package : main Functions 0. - Function : main () () 0. - Declaration : c i32 1. - Expression : c i32 = identity ( 0 i32 ) 2. - Expression : * lcl_0 bool = lt ( c i32 , 10 i32 ) 3. - Expression : jmp ( * lcl_0 bool ) 4. - Expression : i32 . print ( c i32 ) 5. - Declaration : c i32 6. - Expression : c i32 = i32 . add ( c i32 , 1 i32 ) 7. - Expression : jmp ( true bool ) 1. - Function : * init () () The code snippets above illustrate how a for loop that counts from 0 to 9 is translated to a set of of jmp instructions. package main type Player struct { Name str HP i32 Mana i32 Lives i32 } type Monster struct { Name str HP i32 Mana i32 } func ( player Player ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\tLives: \\t%d\\n\\n%s\" , player . Name , player . HP , player . Mana , player . Lives , ` \u2500\u2584\u2588\u2588\u2588\u2588\u2584\u2584\u2591 \u2584\u2580\u2588\u2580\u2590\u2514\u2500\u2510\u2591\u2591 \u2588\u2584\u2590\u258c\u2584\u2588\u2584\u2518\u2588\u2588 \u2514\u2584\u2584\u2584\u2584\u2584\u2518\u2588\u2588\u2588 \u2588\u2588\u2592\u2588\u2592\u2588\u2588\u2588\u2580` )) } func ( monster Monster ) draw () { str . print ( sprintf ( \"\\n\\tName: \\t%s\\n\\tHP: \\t%d\\n\\tMana: \\t%d\\n\\n%s\" , monster . Name , monster . HP , monster . Mana , ` \u2572\u2572\u256d\u2501\u2501\u2501\u2501\u256e\u2572\u2572 \u256d\u256e\u2503\u2586\u2508\u2508\u2586\u2503\u256d\u256e \u2503\u2570\u252b\u25bd\u25bd\u25bd\u25bd\u2523\u256f\u2503 \u2570\u2501\u252b\u25b3\u25b3\u25b3\u25b3\u2523\u2501\u256f \u2572\u2572\u2503\u2508\u2508\u2508\u2508\u2503\u2572\u2572 \u2572\u2572\u2503\u2508\u250f\u2513\u2508\u2503\u2572\u2572 \u2594\u2594\u2570\u2501\u256f\u2570\u2501\u256f\u2594\u2594` )) } func ( player Player ) attack ( cmd str , monster * Monster ) { if bool . or ( cmd == \"M\" , cmd == \"m\" ) { var dmg i32 dmg = i32 . rand ( 1 , 4 ) ( * monster ). HP = ( * monster ). HP - dmg printf ( \"'%s' suffered a magic attack. Lost %d HP. New HP is %d\\n\" , ( * monster ). Name , dmg , ( * monster ). HP ) } else { var dmg i32 dmg = i32 . rand ( 1 , 2 ) ( * monster ). HP = ( * monster ). HP - dmg printf ( \"'%s' suffered a physical attack. Lost %d HP. New HP is %d\\n\" , ( * monster ). Name , dmg , ( * monster ). HP ) } } func ( monster Monster ) attack ( cmd str , player * Player ) { var dmg i32 dmg = i32 . rand ( 1 , 5 ) ( * player ). HP = ( * player ). HP - dmg printf ( \"'%s' suffered a physical attack. Lost %d HP. New HP is %d\\n\" , ( * player ). Name , dmg , ( * player ). HP ) } func battleStatus ( player Player , monster Monster ) { if player . HP < 5 { str . print ( \"===DANGER!===\" ) } else { str . print ( \"===YOU CAN DO IT!===\" ) } if player . HP == 0 { str . print ( \"===YOU DIED===\" ) } if monster . HP < 10 && monster . HP >= 5 { str . print ( sprintf ( \"===%s is bleeding!===\" , monster . Name )) } if monster . HP < 5 && monster . HP > 0 { str . print ( sprintf ( \"===%s is dying!===\" , monster . Name )) } if monster . HP <= 0 { str . print ( sprintf ( \"===%s is dead!===\" , monster . Name )) } } func main () { var player Player player . Name = \"Mario\" player . HP = 10 player . Mana = 10 player . Lives = 3 var monster Monster monster . Name = \"Domo-kun\" monster . HP = 7 monster . Mana = 4 player . draw () monster . draw () for true { if player . HP < 1 || monster . HP < 1 { return } printf ( \"Command? (M)agic; (P)hysical; (E)xit\\t\" ) var cmd str cmd = read () if cmd == \"E\" || cmd == \"e\" { return } player . draw () monster . draw () player . attack ( cmd , & monster ) monster . attack ( cmd , & player ) battleStatus ( player , monster ) } } Lastly, we can see how we use a for loop to create something similar to a REPL for the program that we have been building in the last few sections.","title":"For loop"},{"location":"software/cx/userdocs/basics-runtime/#go-to","text":"The last control flow mechanism is go-to , which is achieved through the goto statement. package main func main () ( out i32 ) { beginning : printf ( \"What animal do you like the most: (C)at; (D)og; (P)igeon\\n\" ) var cmd str cmd = read () if cmd == \"C\" || cmd == \"c\" { goto cat } if cmd == \"D\" || cmd == \"d\" { goto dog } if cmd == \"P\" || cmd == \"p\" { goto pigeon } cat : str . print ( \"meow\" ) goto beginning dog : str . print ( \"woof\" ) goto beginning pigeon : str . print ( \"tweet\" ) goto beginning } The program above creates an infinite loop by using goto s. The loop will keep asking the user to input commands, and will jump to certain expression depending on the command.","title":"Go-to"},{"location":"software/cx/userdocs/basics-runtime/#affordances","text":"","title":"Affordances"},{"location":"software/cx/userdocs/basics-syntax/","text":"Syntax In this section, we're going to have a look at how a CX program looks like. Basically, the following sections are not going to discuss about the logic behind the various CX constructs, i.e. how they behave; we're only going to see how they look like. Comments Some of the code snippets that follow have comments in them, i.e., blocks of text that are not actually \"run\" by the CX compiler or interpreter. Just like in C, Golang and many other programming languages, single line comments are created by placing double slashes (//) before the text being commented. For example: // Example of adding two 32 bit integers in CX i32 . add ( 3 , 4 ) // This will be ignored // End of the program Mult-line comments are opened by writing slash-asterisk (/*), and are closed by writing asterisk-slash (*/). /* This code won't be executed str.print(\"Hello world!\") */ Declarations A declaration refers to a named element in a program's structure, which are described using other constructs, such as expressions and other statements. For example: a function can be referred by its name and it's constructed by expressions and local variable declarations. Allowed Names Any name that satisfies the PCRE regular expression [_a-zA-Z][_a-zA-Z0-9]* is allowed as an identifier for a declared element. In other words, an identifier can start with an underscore ( _ ) or any lowercase or uppercase letter, and can be followed by 0 or more underscores or lowercase or uppercase letters, and any number from 0 to 9. Strict Type System One of CX's goals is to provide a very strict type system. The purpose of this is to reduce runtime errors as much as possible. In order to achieve this goal, many of CX's native functions are constrained to a single type signature. For example, if you want to add two 32-bit integers, you'd need to use i32.add . In contrast, if you want to add two 64-bit integers, you'd use i64.add . These functions can help the programmer to ensure that a particular data type is being received or sent during a process. If the programmer doesn't want to use those type-specific functions, CX still provides type inference in some cases. For example, instead of writing i32.add(5, 5) you can just write 5 + 5 . In this case, CX is going to see that you're using 32-bit integers, and the parser is going to transform that expression to i32.add(5, 5) . However, if you try to do 5 + 5L , i.e. if you try to add a 32-bit integer to a 64-bit integer, CX will throw a compile-time error because you're mixing types. The proper way to handle types in CX is to explicitly parse everything. This way one can be sure that you're always going to be handling the desired type. So, retaking the previous example, you'd need to parse one of them to match the other's type, either i32.i64(5) + 5L or 5 + i64.i32(5L) . Primitive Types There are seven primitive types in CX: bool , str , byte , i32 , i64 , f32 , and f64 . Those represent Booleans ( true or false ), character strings, bytes, 32-bit integers, 64-bit integers, single precision and double precision floating-point numbers, respectively. Global variables Global variables are different from local variables regarding scope. Global variables are available to any function defined in a package, and to any package that is importing the package that contains that global declaration. An example of some global variables is shown below. package main var global1 i32 var global2 i64 func foo () { i32 . print ( global1 ) i64 . print ( global2 ) } func main () { global1 = 5 global2 = 5 L i32 . print ( global1 ) i64 . print ( global2 ) } In the example above we can see that both the main and foo functions are printing the values of the two global variables defined. They are going to print the same values, as they are referring to the same variables. Local variables In contrast to global variables, local variables are constrained to the function where they are declared. This means that is not possible for another function to call a variable defined in another function. package main func foo () { i32 . print ( local ) // this expression will throw a compile-time error } func main () { var local i32 local = 5 i32 . print ( 5 ) foo () } If you try to run the example above, CX will throw an error similar to this: error: examples/testing.cx:4 identifier 'local' does not exist , so CX will not even try to run that program. If we could de-activate CX's compile-time type checking, and the program above could make it to the runtime, CX would not print 5 when running foo() , as that function is unaware of that variable. Arrays Arrays (or vectors) and multi-dimensional arrays (or matrices) can be declared using a syntax similar to C's. package main type Point struct { x i32 y i32 } func main () { var arr1 [ 5 ] i32 var arr2 [ 5 ] Point var arr3 [ 2 ][ 2 ] f32 arr1 [ 0 ] = 10 arr2 [ 1 ] = 20 } In the example above we see the declaration of an array of 5 elements of type i32 , followed by an array of the same cardinality but of type Point , which is a custom type. Custom types are discussed in a later section. Lastly, we see an example of a 2x2 matrix of type f32 . Lastly, we can see how we can initialize an array using the bracket notation, e.g. arr1[0] = 10 . Slices Golang-like slices exist in CX (dynamic arrays). Slices are declared similarly to arrays, with the only difference that the size is omitted. package main type Point struct { x i32 y i32 } func main () { var slc1 [] i32 var slc2 [] Point var slc3 [][] f32 } Slices, unlike arrays, cannot be directly initialized using the bracket notation (unless you use the native function make first). You can use the bracket notation to reassign values to a slice, once an element associated to the index that you want to use already exists, as shown in the example below. package main func main () { var slc [] i32 slc = append ( slc , 1 ) slc = append ( slc , 2 ) slc [ 0 ] = 10 slc [ 2 ] = 30 // This is not allowed, as len(slc) == 2, not 3 } As this behavior is more related to the logic behind slices, it is further explained in the Runtime->Data Structures->Slices section. Literals A literal is any data structure that is not being referenced by any variable yet. For example: 1 , true , []i32{1, 2, 3} , Point{x: 10, y: 20} . Particularly, it is worth noting the cases of array, slice and struct literals. package main type Point struct { x i32 y i32 } func main () { var a Point var b [ 5 ] i32 var c [] i32 a = Point { x : 10 , y : 20 } b = [ 5 ] i32 { 1 , 2 , 3 , 4 , 5 } c = [] i32 { 100 , 200 , 300 } } In the example above we can see examples of struct ( Point{x: 10, y: 20} ), array ( [5]i32{1, 2, 3, 4, 5} ), and slice ( []i32{100, 200, 300} ) literals, in that order. These literals exist to simplify the creation of such data structures. Functions Functions in CX are similar in syntax to functions in Go. The only exception is that named outputs are enforced at the moment (this will most likely change in the future). package main func foo () { } func main () { foo () } The example above doesn't do anything, but it illustrates the anatomy of a function. In the case of foo , we have an empty function declaration, and then we have main , which is defined by a single call to foo . Functions can also receive inputs and return outputs, as in the example below. package main func foo ( in i32 ) { i32 . print ( in ) // this will print 5 } func bar () ( out i32 ){ out = 10 } func main () { foo ( 5 ) var local i32 local = bar () i32 . print ( local ) // this will print 10 } In this case, foo is declared to receive one input parameter, and bar is declared to return one output parameter. Custom Types If primitive types are not enough, you can define your own custom types by combining the primitive types and other constructs like slices, arrays, and even other custom types. package main type Point struct { x i32 y i32 } func main () { var p Point p . x = 10 p . y = 20 printf ( \"Point coordinates: (%d, %d)\\n\" , p . x , p . y ) } In the example above, we can see a custom type that defines a Point as the combination of two 32-bit integers ( i32 ). After declaring the custom type, you can start declaring variables of that type anywhere in the package where it was declared in. The code in foo shows how you can create and use an instance of that structure. Methods A variation of functions that are associated to custom types are methods . package main type Point struct { x i32 y i32 } type Line struct { a Point b Point } func ( p Point ) print () { printf ( \"Point coordinates: (%d, %d)\\n\" , p . x , p . y ) } func ( l Line ) print () { printf ( \"Line point A: (%d, %d), Line point B: (%d, %d)\\n\" , l . a . x , l . a . y , l . b . x , l . b . y ) } func main () { var l Line var p1 Point var p2 Point p1 . x = 10 p1 . y = 20 p2 . x = 11 p2 . y = 21 l . a = p1 l . b = p2 p1 . print () p2 . print () l . print () } In the example above, we define two custom types: Point and Line . The type line is defined by two fields of type Point , and the type Point is defined as coordinate defined by two fields of type i32 . As a simple example, we create two methods called print , one for the type Point and another for the type Line . In the case of Point.print , we just print the two coordinates, and in the case of Line.print we print the coordinates of the two points that define the Line instance. Packages In the previous examples we have always been using a single package: main . If your program grows too large it's convenient to divide your code into different packages. package foo func fn ( in i32 ) { i32 . print ( in ) } package bar func fn () ( out i32 ) { out = 5 } package main import \"foo\" import \"bar\" func main () { foo . fn ( 10 ) // prints 10 var num i32 num = bar . fn () i32 . print ( num ) // prints } In the example above, we can see how two functions with the same name ( fn ) are declared, each in a separate package. Both of these functions have different signatures, as foo.fn accepts a single input parameter and bar.fn doesn't accept any inputs but returns a single output parameter. We can then see how the main package import s both the foo and bar packages, to later call each of these functions. Statements Statements are different to declarations, as they don't create any named elements in a program. They are used to control the flow of a program. If and if/else The most basic statement is the if statement, which is going to execute a block of code only if a condition is true. package main func main () { if false { str . print ( \"This will never print\" ) } } The example above won't do anything, as the condition for the if statement is always going to evaluate to false . package main func main () { if true { str . print ( \"This will always print\" ) } } In contrast, the example above will always print. package main func main () { if true { str . print ( \"This will always print\" ) } else { str . print ( \"This will never print\" ) } } Lastly, the example above shows how to write an if/else statement in CX. As a note about its syntax, the predicates or conditions don't need to be enclosed in parentheses, just like in Go. Else if Instead of simply adding one alternative path, you can string together a series of else if blocks, which check for as many different conditions as you like. Giving you similar functionality as Go's switch / select blocks (containing various conditions/cases). package main func main () { var i i32 i = 0 if i == 0 { str . print ( \"i is 0\" ) } else if i == 1 { str . print ( \"i is 1\" ) } else if i == 2 { str . print ( \"i is 2\" ) } else { str . print ( \"i is NOT 0, 1 or 2\" ) } } For loop CX's only looping statement is the for loop. Similar to Go, the for loop in CX can be used as the while statement in other programming languages, and as a traditional for statement. package main func main () { for true { str . print ( \"forever\" ) } } As the simplest example of a loop, we have the infinite loop shown in the example above. In this case, the loop will print the character string \"forever\" indefinitely. If you try this code, remember that you can cancel the program's execution by hitting Ctrl-C . package main func main () { for str . eq ( \"hi\" , \"hi\" ) { str . print ( \"hi\" ) } } The code above shows another example, one where we use an expression as its predicate, rather than a literal true or false . It is worth mentioning that you can replace str.eq(\"hi\", \"hi\") by \"hi\" == \"hi\" . package main func main () { var c i32 for c = 0 ; c < 10 ; c ++ { i32 . print ( c ) } } The traditional for loop shown in the example above. In languages like C, you need to first declare your counter variable, and then you have the option to initialize or reassign the counter in the first part of the for loop. The second part of the for loop is reserved for the predicate, and the last part is usually used to increment the counter. Nevertheless, just like in C, there's nothing stopping you from doing whatever you want in the first and last parts. However, the predicate part needs to be an expression that evaluates to a Boolean. package main func main () { for c := 0 ; c < 10 ; c ++ { i32 . print ( c ) } } A more Go-ish way of declaring and initializing the counter is to use an inline declaration, as seen in the example above. package main func main () { var c i32 c = 0 for ; c < 10 ; c ++ { i32 . print ( c ) } } Lastly, the for loop can also completely omit the initialization part, as seen above. Goto goto can be used to immediately jump the execution of a program to the corresponding labeled expression. package main func main () ( out i32 ) { goto label2 label1 : str . print ( \"this should never be reached\" ) label2 : str . print ( \"this should be printed\" ) } In the example above, we see how a goto statement forces CX to ignore executing the expression labeled as label1 , and instead jumps to the label2 expression. Expressions Expressions are basically function calls. But the term expression also takes into consideration the variables that are receiving the function's output arguments, the input arguments, and any dereference operations. package main func foo () ( arr [ 2 ] i32 ) { arr = [ 2 ] i32 { 10 , 20 } } func main () { i32 . print ( foo ()[ 0 ]) } For example, the expression i32.print(foo()[0]) in the code above consists of two function calls, and the array returned by the call to foo is \"dereferenced\" to its 0 th element. Assignments and Initializations As in many other C-like languages, assignments are done using the equal ( = ) sign. package main func main () { var foo i32 foo = 5 foo = 50 } In the case of the code above, the variable foo is declared and then initialized to 5 using the = sign. Then we reassign the foo variable to the value 50 . package main func main () { foo := 5 foo = 50 } As in other programming languages, short variable declarations exist in CX. The := token can be used to tell CX to infer a variable's type. This way, CX declares and initializes at the same time, as seen in the example above. Affordances The affordance system in CX uses a special operator: -> . This operator takes a series of statements that have the form of function calls, and transforms them to a series of instructions that can be internally interpreted by the affordance system. package main func exprPredicate ( expr Expression ) ( res bool ) { if expr . Operator == \"i32.add\" { res = true } } func prgrmPredicate ( prgrm Program ) () { if prgrm . FreeHeap > 50 { res = true } } func main () { num1 := 5 num2 := 10 targetExpr : sum := i32 . add ( 0 , 0 ) tgt := - >{ pkg ( main ) fn ( main ) expr ( targetExpr ) } fltrs := - >{ filter ( exprPredicate ) filter ( prgrmPredicate ) } aff . print ( tgt ) aff . print ( fltrs ) affs := aff . query ( fltrs , tgt ) aff . on ( affs , tgt ) aff . of ( affs , tgt ) aff . inform ( affs , 0 , tgt ) aff . request ( affs , 0 , tgt ) }","title":"Syntax"},{"location":"software/cx/userdocs/basics-syntax/#syntax","text":"In this section, we're going to have a look at how a CX program looks like. Basically, the following sections are not going to discuss about the logic behind the various CX constructs, i.e. how they behave; we're only going to see how they look like.","title":"Syntax"},{"location":"software/cx/userdocs/basics-syntax/#comments","text":"Some of the code snippets that follow have comments in them, i.e., blocks of text that are not actually \"run\" by the CX compiler or interpreter. Just like in C, Golang and many other programming languages, single line comments are created by placing double slashes (//) before the text being commented. For example: // Example of adding two 32 bit integers in CX i32 . add ( 3 , 4 ) // This will be ignored // End of the program Mult-line comments are opened by writing slash-asterisk (/*), and are closed by writing asterisk-slash (*/). /* This code won't be executed str.print(\"Hello world!\") */","title":"Comments"},{"location":"software/cx/userdocs/basics-syntax/#declarations","text":"A declaration refers to a named element in a program's structure, which are described using other constructs, such as expressions and other statements. For example: a function can be referred by its name and it's constructed by expressions and local variable declarations.","title":"Declarations"},{"location":"software/cx/userdocs/basics-syntax/#allowed-names","text":"Any name that satisfies the PCRE regular expression [_a-zA-Z][_a-zA-Z0-9]* is allowed as an identifier for a declared element. In other words, an identifier can start with an underscore ( _ ) or any lowercase or uppercase letter, and can be followed by 0 or more underscores or lowercase or uppercase letters, and any number from 0 to 9.","title":"Allowed Names"},{"location":"software/cx/userdocs/basics-syntax/#strict-type-system","text":"One of CX's goals is to provide a very strict type system. The purpose of this is to reduce runtime errors as much as possible. In order to achieve this goal, many of CX's native functions are constrained to a single type signature. For example, if you want to add two 32-bit integers, you'd need to use i32.add . In contrast, if you want to add two 64-bit integers, you'd use i64.add . These functions can help the programmer to ensure that a particular data type is being received or sent during a process. If the programmer doesn't want to use those type-specific functions, CX still provides type inference in some cases. For example, instead of writing i32.add(5, 5) you can just write 5 + 5 . In this case, CX is going to see that you're using 32-bit integers, and the parser is going to transform that expression to i32.add(5, 5) . However, if you try to do 5 + 5L , i.e. if you try to add a 32-bit integer to a 64-bit integer, CX will throw a compile-time error because you're mixing types. The proper way to handle types in CX is to explicitly parse everything. This way one can be sure that you're always going to be handling the desired type. So, retaking the previous example, you'd need to parse one of them to match the other's type, either i32.i64(5) + 5L or 5 + i64.i32(5L) .","title":"Strict Type System"},{"location":"software/cx/userdocs/basics-syntax/#primitive-types","text":"There are seven primitive types in CX: bool , str , byte , i32 , i64 , f32 , and f64 . Those represent Booleans ( true or false ), character strings, bytes, 32-bit integers, 64-bit integers, single precision and double precision floating-point numbers, respectively.","title":"Primitive Types"},{"location":"software/cx/userdocs/basics-syntax/#global-variables","text":"Global variables are different from local variables regarding scope. Global variables are available to any function defined in a package, and to any package that is importing the package that contains that global declaration. An example of some global variables is shown below. package main var global1 i32 var global2 i64 func foo () { i32 . print ( global1 ) i64 . print ( global2 ) } func main () { global1 = 5 global2 = 5 L i32 . print ( global1 ) i64 . print ( global2 ) } In the example above we can see that both the main and foo functions are printing the values of the two global variables defined. They are going to print the same values, as they are referring to the same variables.","title":"Global variables"},{"location":"software/cx/userdocs/basics-syntax/#local-variables","text":"In contrast to global variables, local variables are constrained to the function where they are declared. This means that is not possible for another function to call a variable defined in another function. package main func foo () { i32 . print ( local ) // this expression will throw a compile-time error } func main () { var local i32 local = 5 i32 . print ( 5 ) foo () } If you try to run the example above, CX will throw an error similar to this: error: examples/testing.cx:4 identifier 'local' does not exist , so CX will not even try to run that program. If we could de-activate CX's compile-time type checking, and the program above could make it to the runtime, CX would not print 5 when running foo() , as that function is unaware of that variable.","title":"Local variables"},{"location":"software/cx/userdocs/basics-syntax/#arrays","text":"Arrays (or vectors) and multi-dimensional arrays (or matrices) can be declared using a syntax similar to C's. package main type Point struct { x i32 y i32 } func main () { var arr1 [ 5 ] i32 var arr2 [ 5 ] Point var arr3 [ 2 ][ 2 ] f32 arr1 [ 0 ] = 10 arr2 [ 1 ] = 20 } In the example above we see the declaration of an array of 5 elements of type i32 , followed by an array of the same cardinality but of type Point , which is a custom type. Custom types are discussed in a later section. Lastly, we see an example of a 2x2 matrix of type f32 . Lastly, we can see how we can initialize an array using the bracket notation, e.g. arr1[0] = 10 .","title":"Arrays"},{"location":"software/cx/userdocs/basics-syntax/#slices","text":"Golang-like slices exist in CX (dynamic arrays). Slices are declared similarly to arrays, with the only difference that the size is omitted. package main type Point struct { x i32 y i32 } func main () { var slc1 [] i32 var slc2 [] Point var slc3 [][] f32 } Slices, unlike arrays, cannot be directly initialized using the bracket notation (unless you use the native function make first). You can use the bracket notation to reassign values to a slice, once an element associated to the index that you want to use already exists, as shown in the example below. package main func main () { var slc [] i32 slc = append ( slc , 1 ) slc = append ( slc , 2 ) slc [ 0 ] = 10 slc [ 2 ] = 30 // This is not allowed, as len(slc) == 2, not 3 } As this behavior is more related to the logic behind slices, it is further explained in the Runtime->Data Structures->Slices section.","title":"Slices"},{"location":"software/cx/userdocs/basics-syntax/#literals","text":"A literal is any data structure that is not being referenced by any variable yet. For example: 1 , true , []i32{1, 2, 3} , Point{x: 10, y: 20} . Particularly, it is worth noting the cases of array, slice and struct literals. package main type Point struct { x i32 y i32 } func main () { var a Point var b [ 5 ] i32 var c [] i32 a = Point { x : 10 , y : 20 } b = [ 5 ] i32 { 1 , 2 , 3 , 4 , 5 } c = [] i32 { 100 , 200 , 300 } } In the example above we can see examples of struct ( Point{x: 10, y: 20} ), array ( [5]i32{1, 2, 3, 4, 5} ), and slice ( []i32{100, 200, 300} ) literals, in that order. These literals exist to simplify the creation of such data structures.","title":"Literals"},{"location":"software/cx/userdocs/basics-syntax/#functions","text":"Functions in CX are similar in syntax to functions in Go. The only exception is that named outputs are enforced at the moment (this will most likely change in the future). package main func foo () { } func main () { foo () } The example above doesn't do anything, but it illustrates the anatomy of a function. In the case of foo , we have an empty function declaration, and then we have main , which is defined by a single call to foo . Functions can also receive inputs and return outputs, as in the example below. package main func foo ( in i32 ) { i32 . print ( in ) // this will print 5 } func bar () ( out i32 ){ out = 10 } func main () { foo ( 5 ) var local i32 local = bar () i32 . print ( local ) // this will print 10 } In this case, foo is declared to receive one input parameter, and bar is declared to return one output parameter.","title":"Functions"},{"location":"software/cx/userdocs/basics-syntax/#custom-types","text":"If primitive types are not enough, you can define your own custom types by combining the primitive types and other constructs like slices, arrays, and even other custom types. package main type Point struct { x i32 y i32 } func main () { var p Point p . x = 10 p . y = 20 printf ( \"Point coordinates: (%d, %d)\\n\" , p . x , p . y ) } In the example above, we can see a custom type that defines a Point as the combination of two 32-bit integers ( i32 ). After declaring the custom type, you can start declaring variables of that type anywhere in the package where it was declared in. The code in foo shows how you can create and use an instance of that structure.","title":"Custom Types"},{"location":"software/cx/userdocs/basics-syntax/#methods","text":"A variation of functions that are associated to custom types are methods . package main type Point struct { x i32 y i32 } type Line struct { a Point b Point } func ( p Point ) print () { printf ( \"Point coordinates: (%d, %d)\\n\" , p . x , p . y ) } func ( l Line ) print () { printf ( \"Line point A: (%d, %d), Line point B: (%d, %d)\\n\" , l . a . x , l . a . y , l . b . x , l . b . y ) } func main () { var l Line var p1 Point var p2 Point p1 . x = 10 p1 . y = 20 p2 . x = 11 p2 . y = 21 l . a = p1 l . b = p2 p1 . print () p2 . print () l . print () } In the example above, we define two custom types: Point and Line . The type line is defined by two fields of type Point , and the type Point is defined as coordinate defined by two fields of type i32 . As a simple example, we create two methods called print , one for the type Point and another for the type Line . In the case of Point.print , we just print the two coordinates, and in the case of Line.print we print the coordinates of the two points that define the Line instance.","title":"Methods"},{"location":"software/cx/userdocs/basics-syntax/#packages","text":"In the previous examples we have always been using a single package: main . If your program grows too large it's convenient to divide your code into different packages. package foo func fn ( in i32 ) { i32 . print ( in ) } package bar func fn () ( out i32 ) { out = 5 } package main import \"foo\" import \"bar\" func main () { foo . fn ( 10 ) // prints 10 var num i32 num = bar . fn () i32 . print ( num ) // prints } In the example above, we can see how two functions with the same name ( fn ) are declared, each in a separate package. Both of these functions have different signatures, as foo.fn accepts a single input parameter and bar.fn doesn't accept any inputs but returns a single output parameter. We can then see how the main package import s both the foo and bar packages, to later call each of these functions.","title":"Packages"},{"location":"software/cx/userdocs/basics-syntax/#statements","text":"Statements are different to declarations, as they don't create any named elements in a program. They are used to control the flow of a program.","title":"Statements"},{"location":"software/cx/userdocs/basics-syntax/#if-and-ifelse","text":"The most basic statement is the if statement, which is going to execute a block of code only if a condition is true. package main func main () { if false { str . print ( \"This will never print\" ) } } The example above won't do anything, as the condition for the if statement is always going to evaluate to false . package main func main () { if true { str . print ( \"This will always print\" ) } } In contrast, the example above will always print. package main func main () { if true { str . print ( \"This will always print\" ) } else { str . print ( \"This will never print\" ) } } Lastly, the example above shows how to write an if/else statement in CX. As a note about its syntax, the predicates or conditions don't need to be enclosed in parentheses, just like in Go.","title":"If and if/else"},{"location":"software/cx/userdocs/basics-syntax/#else-if","text":"Instead of simply adding one alternative path, you can string together a series of else if blocks, which check for as many different conditions as you like. Giving you similar functionality as Go's switch / select blocks (containing various conditions/cases). package main func main () { var i i32 i = 0 if i == 0 { str . print ( \"i is 0\" ) } else if i == 1 { str . print ( \"i is 1\" ) } else if i == 2 { str . print ( \"i is 2\" ) } else { str . print ( \"i is NOT 0, 1 or 2\" ) } }","title":"Else if"},{"location":"software/cx/userdocs/basics-syntax/#for-loop","text":"CX's only looping statement is the for loop. Similar to Go, the for loop in CX can be used as the while statement in other programming languages, and as a traditional for statement. package main func main () { for true { str . print ( \"forever\" ) } } As the simplest example of a loop, we have the infinite loop shown in the example above. In this case, the loop will print the character string \"forever\" indefinitely. If you try this code, remember that you can cancel the program's execution by hitting Ctrl-C . package main func main () { for str . eq ( \"hi\" , \"hi\" ) { str . print ( \"hi\" ) } } The code above shows another example, one where we use an expression as its predicate, rather than a literal true or false . It is worth mentioning that you can replace str.eq(\"hi\", \"hi\") by \"hi\" == \"hi\" . package main func main () { var c i32 for c = 0 ; c < 10 ; c ++ { i32 . print ( c ) } } The traditional for loop shown in the example above. In languages like C, you need to first declare your counter variable, and then you have the option to initialize or reassign the counter in the first part of the for loop. The second part of the for loop is reserved for the predicate, and the last part is usually used to increment the counter. Nevertheless, just like in C, there's nothing stopping you from doing whatever you want in the first and last parts. However, the predicate part needs to be an expression that evaluates to a Boolean. package main func main () { for c := 0 ; c < 10 ; c ++ { i32 . print ( c ) } } A more Go-ish way of declaring and initializing the counter is to use an inline declaration, as seen in the example above. package main func main () { var c i32 c = 0 for ; c < 10 ; c ++ { i32 . print ( c ) } } Lastly, the for loop can also completely omit the initialization part, as seen above.","title":"For loop"},{"location":"software/cx/userdocs/basics-syntax/#goto","text":"goto can be used to immediately jump the execution of a program to the corresponding labeled expression. package main func main () ( out i32 ) { goto label2 label1 : str . print ( \"this should never be reached\" ) label2 : str . print ( \"this should be printed\" ) } In the example above, we see how a goto statement forces CX to ignore executing the expression labeled as label1 , and instead jumps to the label2 expression.","title":"Goto"},{"location":"software/cx/userdocs/basics-syntax/#expressions","text":"Expressions are basically function calls. But the term expression also takes into consideration the variables that are receiving the function's output arguments, the input arguments, and any dereference operations. package main func foo () ( arr [ 2 ] i32 ) { arr = [ 2 ] i32 { 10 , 20 } } func main () { i32 . print ( foo ()[ 0 ]) } For example, the expression i32.print(foo()[0]) in the code above consists of two function calls, and the array returned by the call to foo is \"dereferenced\" to its 0 th element.","title":"Expressions"},{"location":"software/cx/userdocs/basics-syntax/#assignments-and-initializations","text":"As in many other C-like languages, assignments are done using the equal ( = ) sign. package main func main () { var foo i32 foo = 5 foo = 50 } In the case of the code above, the variable foo is declared and then initialized to 5 using the = sign. Then we reassign the foo variable to the value 50 . package main func main () { foo := 5 foo = 50 } As in other programming languages, short variable declarations exist in CX. The := token can be used to tell CX to infer a variable's type. This way, CX declares and initializes at the same time, as seen in the example above.","title":"Assignments and Initializations"},{"location":"software/cx/userdocs/basics-syntax/#affordances","text":"The affordance system in CX uses a special operator: -> . This operator takes a series of statements that have the form of function calls, and transforms them to a series of instructions that can be internally interpreted by the affordance system. package main func exprPredicate ( expr Expression ) ( res bool ) { if expr . Operator == \"i32.add\" { res = true } } func prgrmPredicate ( prgrm Program ) () { if prgrm . FreeHeap > 50 { res = true } } func main () { num1 := 5 num2 := 10 targetExpr : sum := i32 . add ( 0 , 0 ) tgt := - >{ pkg ( main ) fn ( main ) expr ( targetExpr ) } fltrs := - >{ filter ( exprPredicate ) filter ( prgrmPredicate ) } aff . print ( tgt ) aff . print ( fltrs ) affs := aff . query ( fltrs , tgt ) aff . on ( affs , tgt ) aff . of ( affs , tgt ) aff . inform ( affs , 0 , tgt ) aff . request ( affs , 0 , tgt ) }","title":"Affordances"},{"location":"software/cx/userdocs/overview/","text":"Basics & Documentation Basics Syntax Runtime Native Functions Running CX REPL Documentation CX Documentation & Book Native Packages Package Purpose more Info time time measuring & code pausing os operating system gl graphics opengl.org glfw windows handling glfw.org gltext font rendering github.com/go-gl/gltext Libraries Library Purpose Website Telegram Github More CXFX 3D Graphics/Gaming Engine Telegram Github Twitter CXChains Blockchain Apps PumpCX User Interface Github Compatible Products Products Purpose Website Telegram Github More CXO Immutable Objects System dmsg Distributed messaging system Programming Tools TODO: Tutorials Intro to Skycoin's CX for complete beginners: 1 [VOD] A closer look at \"Hello, world!\" in CX Open-Source-Projects Apps Name Description ... CxStratus Twitter Clone Unknown 4chan Clone source: Youtube Unknown Telegram clone source: Youtube Unknown Trello clone source: Youtube Games Name Description ... Slot-Machine CrappyBall Flappy-Bird Clone Pac Man CX Pacman 2D Clone Pacman 3D Pacman 3D Clone Snake by Lunier Snake Clone SynthCat Brick Breaker Whacky Stack Tetris Clone Ridge Blaster Dig-N-Rig Clone Space Invaders Space Invaders Clone using CX-Chains CX Asteroids Asteroids Clone Documentation in wiki Skylight Goldeneye Clone uses CXFX","title":"Overview"},{"location":"software/cx/userdocs/overview/#basics-documentation","text":"Basics Syntax Runtime Native Functions Running CX REPL Documentation CX Documentation & Book","title":"Basics &amp; Documentation"},{"location":"software/cx/userdocs/overview/#native-packages","text":"Package Purpose more Info time time measuring & code pausing os operating system gl graphics opengl.org glfw windows handling glfw.org gltext font rendering github.com/go-gl/gltext","title":"Native Packages"},{"location":"software/cx/userdocs/overview/#libraries","text":"Library Purpose Website Telegram Github More CXFX 3D Graphics/Gaming Engine Telegram Github Twitter CXChains Blockchain Apps PumpCX User Interface Github","title":"Libraries"},{"location":"software/cx/userdocs/overview/#compatible-products","text":"Products Purpose Website Telegram Github More CXO Immutable Objects System dmsg Distributed messaging system","title":"Compatible Products"},{"location":"software/cx/userdocs/overview/#programming-tools","text":"TODO:","title":"Programming Tools"},{"location":"software/cx/userdocs/overview/#tutorials","text":"Intro to Skycoin's CX for complete beginners: 1 [VOD] A closer look at \"Hello, world!\" in CX","title":"Tutorials"},{"location":"software/cx/userdocs/overview/#open-source-projects","text":"","title":"Open-Source-Projects"},{"location":"software/cx/userdocs/overview/#apps","text":"Name Description ... CxStratus Twitter Clone Unknown 4chan Clone source: Youtube Unknown Telegram clone source: Youtube Unknown Trello clone source: Youtube","title":"Apps"},{"location":"software/cx/userdocs/overview/#games","text":"Name Description ... Slot-Machine CrappyBall Flappy-Bird Clone Pac Man CX Pacman 2D Clone Pacman 3D Pacman 3D Clone Snake by Lunier Snake Clone SynthCat Brick Breaker Whacky Stack Tetris Clone Ridge Blaster Dig-N-Rig Clone Space Invaders Space Invaders Clone using CX-Chains CX Asteroids Asteroids Clone Documentation in wiki Skylight Goldeneye Clone uses CXFX","title":"Games"},{"location":"software/cx/userdocs/package-gl/","text":"Using gl in CX To use the gl-Functions you first have to import it: import \"gl\" Source Code Until the documentation on this page is finished please refer to the official opengl documentation TODO gogl gl.Init gl.Strs gl.Free gl.NewTexture gl.NewGIF gl.FreeGIF gl.GIFFrameToTexture gl 0.0 gl.MatrixMode gl.Rotatef gl.Translatef gl.LoadIdentity gl.PushMatrix gl.PopMatrix gl.EnableClientState gl.Color3f gl.Color4f gl.Begin gl.End gl.Normal3f gl.Vertex2f gl.Vertex3f gl.Lightfv gl.Frustum gl.TexEnvi gl.Ortho gl.Scalef gl.TexCoord2d gl.TexCoord2f gl 1.0 gl.CullFace gl.Hint gl.Scissor gl.TexParameteri gl.TexImage2D gl.Clear gl.ClearColor gl.ClearStencil gl.StencilMask gl.ColorMask gl.DepthMask gl.Disable gl.Enable gl.BlendFunc gl.StencilFunc gl.StencilOp gl.DepthFunc gl.GetError gl.GetTexLevelParameteriv gl.DepthRange gl.Viewport gl 1.1 gl.DrawArrays gl.BindTexture gl.DeleteTextures gl.GenTextures gl 1.3 gl.ActiveTexture gl 1.5 gl.BindBuffer gl.DeleteBuffers gl.GenBuffers gl.BufferData gl.BufferSubData gl 2.0 gl.StencilOpSeparate gl.StencilFuncSeparate gl.StencilMaskSeparate gl.AttachShader gl.BindAttribLocation gl.CompileShader gl.CreateProgram gl.CreateShader gl.DeleteProgram gl.DeleteShader gl.DetachShader gl.EnableVertexAttribArray gl.GetAttribLocation gl.GetShaderiv gl.GetUniformLocation gl.LinkProgram gl.ShaderSource gl.UseProgram gl.Uniform1f gl.Uniform1i gl.VertexAttribPointer gl.VertexAttribPointerI32 gl 3.0 gl.BindRenderbuffer gl.DeleteRenderbuffers gl.GenRenderbuffers gl.RenderbufferStorage gl.BindFramebuffer gl.DeleteFramebuffers gl.GenFramebuffers gl.CheckFramebufferStatus gl.FramebufferTexture2D gl.FramebufferRenderbuffer gl.BindVertexArray gl.DeleteVertexArrays gl.GenVertexArrays","title":"gl"},{"location":"software/cx/userdocs/package-gl/#using-gl-in-cx","text":"To use the gl-Functions you first have to import it: import \"gl\" Source Code Until the documentation on this page is finished please refer to the official opengl documentation","title":"Using gl in CX"},{"location":"software/cx/userdocs/package-gl/#todo","text":"gogl gl.Init gl.Strs gl.Free gl.NewTexture gl.NewGIF gl.FreeGIF gl.GIFFrameToTexture gl 0.0 gl.MatrixMode gl.Rotatef gl.Translatef gl.LoadIdentity gl.PushMatrix gl.PopMatrix gl.EnableClientState gl.Color3f gl.Color4f gl.Begin gl.End gl.Normal3f gl.Vertex2f gl.Vertex3f gl.Lightfv gl.Frustum gl.TexEnvi gl.Ortho gl.Scalef gl.TexCoord2d gl.TexCoord2f gl 1.0 gl.CullFace gl.Hint gl.Scissor gl.TexParameteri gl.TexImage2D gl.Clear gl.ClearColor gl.ClearStencil gl.StencilMask gl.ColorMask gl.DepthMask gl.Disable gl.Enable gl.BlendFunc gl.StencilFunc gl.StencilOp gl.DepthFunc gl.GetError gl.GetTexLevelParameteriv gl.DepthRange gl.Viewport gl 1.1 gl.DrawArrays gl.BindTexture gl.DeleteTextures gl.GenTextures gl 1.3 gl.ActiveTexture gl 1.5 gl.BindBuffer gl.DeleteBuffers gl.GenBuffers gl.BufferData gl.BufferSubData gl 2.0 gl.StencilOpSeparate gl.StencilFuncSeparate gl.StencilMaskSeparate gl.AttachShader gl.BindAttribLocation gl.CompileShader gl.CreateProgram gl.CreateShader gl.DeleteProgram gl.DeleteShader gl.DetachShader gl.EnableVertexAttribArray gl.GetAttribLocation gl.GetShaderiv gl.GetUniformLocation gl.LinkProgram gl.ShaderSource gl.UseProgram gl.Uniform1f gl.Uniform1i gl.VertexAttribPointer gl.VertexAttribPointerI32 gl 3.0 gl.BindRenderbuffer gl.DeleteRenderbuffers gl.GenRenderbuffers gl.RenderbufferStorage gl.BindFramebuffer gl.DeleteFramebuffers gl.GenFramebuffers gl.CheckFramebufferStatus gl.FramebufferTexture2D gl.FramebufferRenderbuffer gl.BindVertexArray gl.DeleteVertexArrays gl.GenVertexArrays","title":"TODO"},{"location":"software/cx/userdocs/package-glfw/","text":"Using glfw in CX To use the glfw-Functions you first have to import it: import \"glfw\" Source Code If you can't find any documentation on your problem have a look at the official glfw.org-documentation TODO glwf.PollEvents glfw.SwapBuffers glfw.GetFramebufferSize glfw.GetWindowPos glfw.GetWindowSize glfw.SwapInterval glfw.SetKeyCallback glfw.SetKeyCallbackEx glfw.GetTime glfw.SetMouseButtonCallback glfw.SetMouseButtonCallbackEx glfw.SetCursorPosCallback glfw.SetFramebufferSizeCallback glfw.SetWindowPosCallback glfw.SetWindowSizeCallback glfw.GetCursorPos glfw.SetInputMode glfw.SetWindowPos glfw.GetKey glfw.Fullscreen Functions glfw.Init Initializes the glfw-library glfw . Init () Example - > see glfw . CreateWindow glfw.WindowHint A function to save all setups for the next call of the function glfw.CreateWindow glfw . WindowHint ( hint i32 , value i32 ) Example - > see glfw . CreateWindow hints i32 see the glfw.org-documentation glfw.CreateWindow glfw . CreateWindow ( window_identifier str , window_width i32 , window_height i32 , window_caption str ) Example //glfw.Init, glfw.WindowHint, glfw.CreateWindow (,glfw.MakeContextCurrent) ////inputs var window_identifier str = \"Window1\" var window_widht i32 = 1920 //pixles var window_height i32 = 1000 //pixles var window_caption str = \"window-caption-example\" ////function call glfw . Init () glfw . WindowHint ( glfw . Resizable , glfw . False ) glfw . WindowHint ( glfw . ContextVersionMajor , 2 ) glfw . WindowHint ( glfw . ContextVersionMinor , 1 ) glfw . CreateWindow ( window_identifier , window_width , window_height , window_caption ) glfw . MakeContextCurrent ( window_identifier ) glfw.MakeContextCurrent Activates the given window glfw . MakeContextCurrent ( window_identifier str ) example - > see glfw . CreateWindow glfw.ShouldClose Returns if the given window should be closed glfw . ShouldClose ( window_identifier str )( should_close bool ) Example //glfw.ShouldClose ////input var window_identifier str = \"Window1\" ////output var should_close bool ////function call should_close = glfw . ShouldClose ( window_identifier str ) for bool . not ( should_close ){ //do something } ////function call alternative for bool . not ( glfw . ShouldClose ( window_identifier str )){ //do something } glfw.SetShouldClose Sets the ShouldClose of the given window to the given bool value glfw . SetShouldClose ( window_identifier str , should_close bool ) Example //glfw.SetShouldClose ////input var window_identifier str = \"Window1\" var should_close bool = true ////function call glfw . SetShouldClose ( window_identifier , should_close ) TODO: put constants into the functions where they are used Constants .False .True .Press .Release .Repeat .KeyUnknown .Cursor .StickyKeys .StickyMouseButtons .CursorNormal .CursorHidden .CursorDisabled .Resizable .ContextVersionMajor .ContextVersionMinor .Opengl.Coreprofile .Opengl.Profile .Opengl.ForwardCompatible .MouseButtonLast .MouseButtonLeft .MouseButtonRight .MouseButtonMiddle","title":"glfw"},{"location":"software/cx/userdocs/package-glfw/#using-glfw-in-cx","text":"To use the glfw-Functions you first have to import it: import \"glfw\" Source Code If you can't find any documentation on your problem have a look at the official glfw.org-documentation TODO glwf.PollEvents glfw.SwapBuffers glfw.GetFramebufferSize glfw.GetWindowPos glfw.GetWindowSize glfw.SwapInterval glfw.SetKeyCallback glfw.SetKeyCallbackEx glfw.GetTime glfw.SetMouseButtonCallback glfw.SetMouseButtonCallbackEx glfw.SetCursorPosCallback glfw.SetFramebufferSizeCallback glfw.SetWindowPosCallback glfw.SetWindowSizeCallback glfw.GetCursorPos glfw.SetInputMode glfw.SetWindowPos glfw.GetKey glfw.Fullscreen","title":"Using glfw in CX"},{"location":"software/cx/userdocs/package-glfw/#functions","text":"","title":"Functions"},{"location":"software/cx/userdocs/package-glfw/#glfwinit","text":"Initializes the glfw-library glfw . Init () Example - > see glfw . CreateWindow","title":"glfw.Init"},{"location":"software/cx/userdocs/package-glfw/#glfwwindowhint","text":"A function to save all setups for the next call of the function glfw.CreateWindow glfw . WindowHint ( hint i32 , value i32 ) Example - > see glfw . CreateWindow hints i32 see the glfw.org-documentation","title":"glfw.WindowHint"},{"location":"software/cx/userdocs/package-glfw/#glfwcreatewindow","text":"glfw . CreateWindow ( window_identifier str , window_width i32 , window_height i32 , window_caption str ) Example //glfw.Init, glfw.WindowHint, glfw.CreateWindow (,glfw.MakeContextCurrent) ////inputs var window_identifier str = \"Window1\" var window_widht i32 = 1920 //pixles var window_height i32 = 1000 //pixles var window_caption str = \"window-caption-example\" ////function call glfw . Init () glfw . WindowHint ( glfw . Resizable , glfw . False ) glfw . WindowHint ( glfw . ContextVersionMajor , 2 ) glfw . WindowHint ( glfw . ContextVersionMinor , 1 ) glfw . CreateWindow ( window_identifier , window_width , window_height , window_caption ) glfw . MakeContextCurrent ( window_identifier )","title":"glfw.CreateWindow"},{"location":"software/cx/userdocs/package-glfw/#glfwmakecontextcurrent","text":"Activates the given window glfw . MakeContextCurrent ( window_identifier str ) example - > see glfw . CreateWindow","title":"glfw.MakeContextCurrent"},{"location":"software/cx/userdocs/package-glfw/#glfwshouldclose","text":"Returns if the given window should be closed glfw . ShouldClose ( window_identifier str )( should_close bool ) Example //glfw.ShouldClose ////input var window_identifier str = \"Window1\" ////output var should_close bool ////function call should_close = glfw . ShouldClose ( window_identifier str ) for bool . not ( should_close ){ //do something } ////function call alternative for bool . not ( glfw . ShouldClose ( window_identifier str )){ //do something }","title":"glfw.ShouldClose"},{"location":"software/cx/userdocs/package-glfw/#glfwsetshouldclose","text":"Sets the ShouldClose of the given window to the given bool value glfw . SetShouldClose ( window_identifier str , should_close bool ) Example //glfw.SetShouldClose ////input var window_identifier str = \"Window1\" var should_close bool = true ////function call glfw . SetShouldClose ( window_identifier , should_close ) TODO: put constants into the functions where they are used","title":"glfw.SetShouldClose"},{"location":"software/cx/userdocs/package-glfw/#constants","text":".False .True .Press .Release .Repeat .KeyUnknown .Cursor .StickyKeys .StickyMouseButtons .CursorNormal .CursorHidden .CursorDisabled .Resizable .ContextVersionMajor .ContextVersionMinor .Opengl.Coreprofile .Opengl.Profile .Opengl.ForwardCompatible .MouseButtonLast .MouseButtonLeft .MouseButtonRight .MouseButtonMiddle","title":"Constants"},{"location":"software/cx/userdocs/package-gltext/","text":"Using gltext in CX To use the gltext-Functions you first have to import it: import \"gltext\" Source Code gltext.LoadTrueType This Function saves your font settings. You then can access your settings by the font_setting_identifier string you have given to the function. gltext . LoadTrueType ( font_setting_identifier str , font_file_directory str , scaleToPixelHeight i32 , low i32 , high i32 , direction i32 )() Example //gltext.LoadTrueType ////input var font_setting_identifier str = \"Roboto100\" var font_file_directory str = str . concat ( os . GetWorkingDirectory (), \"fonts/skycoin_light.ttf\" ) var scaleToPixelHeight i32 = 100 var direction i32 = gltext . LeftToRight ////function call os . Open ( font_file_directory ) gltext . LoadTrueType ( font_setting_identifier , font_file_directory , scaleToPixelHeight , 32 , 127 , direction ) os . Close ( font_file_directory ) low and high are the lower and upper rune limits, for standard ASCII low = 32, high = 127 directions i32: gltext . LeftToRight gltext . RightToLeft gltext . TopToBottom gltext.GlyphBounds Returns the width and height of the biggest rune of the given, loaded font setting gltext . GlyphBounds ( font_setting_identifier str )( width i32 , height i32 ) Example //gltext.GlyphBounds ////input var font_setting_identifier str = \"Roboto100\" ////output var width i32 var height i32 ////function call width , height = gltext . GlyphBounds ( font_setting_identifier ) gltext.GlyphMetrics Returns the width and height of the given glyph texture gltext . GlyphMetrics ( font_setting_identifier str , glyph_texture i32 )( width i32 , height i32 ) Example //gltext.Metrics ////input var font_setting_identifier str = \"Roboto100\" var glyph_texture i32 = gl . NewTexture ( sprintf ( \"%s%s%s\" , os . GetWorkingDirectory (), \"fonts/glyphs/\" , \"test-glyph.png\" )) ////output var width i32 var height i32 ////function call width , height = gltext . Metrics ( font_setting_identifier , glyph_texture ) gltext.GlyphInfo Returns all possible infos of the given glyph_texture gltext . GlyphInfo ( font_setting_identifier str , glyph_texture i32 )( x i32 , y i32 , width i32 , height i32 , advanced_size i32 ) Example //gltext.GlyphInfo ////input var font_setting_identifier str = \"Roboto100\" var glyph_texture i32 = gl . NewTexture ( sprintf ( \"%s%s%s\" , os . GetWorkingDirectory (), \"fonts/glyphs/\" , \"test-glyph.png\" )) ////output var x i32 //the x location of the glpyh on a sprite sheet var y i32 //the y location of the glpyh on a sprite sheet var width i32 var height i32 var advanced_size i32 //the distance to the next glyph ////function call x , y , width , height , advanced_size = gltext . Metrics ( font_setting_identifier , string_to_analyze ) gltext.Metrics Returns the width and the height of the given string gltext . Metrics ( font_setting_identifier str , string_to_analyze str ) ( width i32 , height i32 ) Example //gltext.Metrics() ////input var font_setting_identifier str = \"Roboto100\" var string_to_analyze str = \"Hello World\" ////output var width i32 var height i32 ////function call width , height = gltext . Metrics ( font_setting_identifier , string_to_analyze ) gltext.NextGlyph Returns all infos of the indexed char-glyph of the given string gltext . NextGlyph ( font_setting_identifier str , string_to_analyze str , index i32 ) ( glyph_texture i32 , width_in_bytes i32 , x i32 , y i32 , width i32 , height i32 , advanced_size i32 ) Example //gltext.NextGlyph ////input var font_setting_identifier str = \"Roboto100\" var string_to_analyze str = \"Hello World\" var index i32 = 2 ////output var glyph_texture i32 var width_in_bytes i32 var x i32 //the x location of the glpyh on a sprite sheet var y i32 //the y location of the glpyh on a sprite sheet var width i32 var height i32 var advanced_size i32 //the distance to the next glyph ////function call glyph_texture , width_in_bytes , x , y , width , height , advanced_size = gltext . NextGlyph ( font_setting_identifier , string_to_analyze , index ) gltext.Printf Prints the given string on the absolute pixel position of the screen gltext . Printf ( font_setting_identifier str , x_position f32 , y_position f32 , string_to_print str ) Example //gltext.Printf ////input var font_setting_identifier str = \"Roboto100\" var x_position f32 = 0.0 var y_position f32 = 0.0 var string_to_print str = \"Hello World\" ////function call gl . Color4f ( 0.5 , 0.3 , 0.8 , 1.0 ) //With this function call you can setup the color of your text gltext . Printf ( font_setting_identifier , x_position , y_position , string_to_print ) gltext.Texture Returns the number/index of the loaded font gltext . Texture ( font_setting_identifier str )( number_of_loaded_font i32 ) Example //gltext.Texture ////input var font_setting_identifier str = \"Roboto100\" ////output var number_of_loaded_font i32 ////function call number_of_loaded_font = gltext . Texture ( font_setting_identifier )","title":"gltext"},{"location":"software/cx/userdocs/package-gltext/#using-gltext-in-cx","text":"To use the gltext-Functions you first have to import it: import \"gltext\" Source Code","title":"Using gltext in CX"},{"location":"software/cx/userdocs/package-gltext/#gltextloadtruetype","text":"This Function saves your font settings. You then can access your settings by the font_setting_identifier string you have given to the function. gltext . LoadTrueType ( font_setting_identifier str , font_file_directory str , scaleToPixelHeight i32 , low i32 , high i32 , direction i32 )() Example //gltext.LoadTrueType ////input var font_setting_identifier str = \"Roboto100\" var font_file_directory str = str . concat ( os . GetWorkingDirectory (), \"fonts/skycoin_light.ttf\" ) var scaleToPixelHeight i32 = 100 var direction i32 = gltext . LeftToRight ////function call os . Open ( font_file_directory ) gltext . LoadTrueType ( font_setting_identifier , font_file_directory , scaleToPixelHeight , 32 , 127 , direction ) os . Close ( font_file_directory ) low and high are the lower and upper rune limits, for standard ASCII low = 32, high = 127 directions i32: gltext . LeftToRight gltext . RightToLeft gltext . TopToBottom","title":"gltext.LoadTrueType"},{"location":"software/cx/userdocs/package-gltext/#gltextglyphbounds","text":"Returns the width and height of the biggest rune of the given, loaded font setting gltext . GlyphBounds ( font_setting_identifier str )( width i32 , height i32 ) Example //gltext.GlyphBounds ////input var font_setting_identifier str = \"Roboto100\" ////output var width i32 var height i32 ////function call width , height = gltext . GlyphBounds ( font_setting_identifier )","title":"gltext.GlyphBounds"},{"location":"software/cx/userdocs/package-gltext/#gltextglyphmetrics","text":"Returns the width and height of the given glyph texture gltext . GlyphMetrics ( font_setting_identifier str , glyph_texture i32 )( width i32 , height i32 ) Example //gltext.Metrics ////input var font_setting_identifier str = \"Roboto100\" var glyph_texture i32 = gl . NewTexture ( sprintf ( \"%s%s%s\" , os . GetWorkingDirectory (), \"fonts/glyphs/\" , \"test-glyph.png\" )) ////output var width i32 var height i32 ////function call width , height = gltext . Metrics ( font_setting_identifier , glyph_texture )","title":"gltext.GlyphMetrics"},{"location":"software/cx/userdocs/package-gltext/#gltextglyphinfo","text":"Returns all possible infos of the given glyph_texture gltext . GlyphInfo ( font_setting_identifier str , glyph_texture i32 )( x i32 , y i32 , width i32 , height i32 , advanced_size i32 ) Example //gltext.GlyphInfo ////input var font_setting_identifier str = \"Roboto100\" var glyph_texture i32 = gl . NewTexture ( sprintf ( \"%s%s%s\" , os . GetWorkingDirectory (), \"fonts/glyphs/\" , \"test-glyph.png\" )) ////output var x i32 //the x location of the glpyh on a sprite sheet var y i32 //the y location of the glpyh on a sprite sheet var width i32 var height i32 var advanced_size i32 //the distance to the next glyph ////function call x , y , width , height , advanced_size = gltext . Metrics ( font_setting_identifier , string_to_analyze )","title":"gltext.GlyphInfo"},{"location":"software/cx/userdocs/package-gltext/#gltextmetrics","text":"Returns the width and the height of the given string gltext . Metrics ( font_setting_identifier str , string_to_analyze str ) ( width i32 , height i32 ) Example //gltext.Metrics() ////input var font_setting_identifier str = \"Roboto100\" var string_to_analyze str = \"Hello World\" ////output var width i32 var height i32 ////function call width , height = gltext . Metrics ( font_setting_identifier , string_to_analyze )","title":"gltext.Metrics"},{"location":"software/cx/userdocs/package-gltext/#gltextnextglyph","text":"Returns all infos of the indexed char-glyph of the given string gltext . NextGlyph ( font_setting_identifier str , string_to_analyze str , index i32 ) ( glyph_texture i32 , width_in_bytes i32 , x i32 , y i32 , width i32 , height i32 , advanced_size i32 ) Example //gltext.NextGlyph ////input var font_setting_identifier str = \"Roboto100\" var string_to_analyze str = \"Hello World\" var index i32 = 2 ////output var glyph_texture i32 var width_in_bytes i32 var x i32 //the x location of the glpyh on a sprite sheet var y i32 //the y location of the glpyh on a sprite sheet var width i32 var height i32 var advanced_size i32 //the distance to the next glyph ////function call glyph_texture , width_in_bytes , x , y , width , height , advanced_size = gltext . NextGlyph ( font_setting_identifier , string_to_analyze , index )","title":"gltext.NextGlyph"},{"location":"software/cx/userdocs/package-gltext/#gltextprintf","text":"Prints the given string on the absolute pixel position of the screen gltext . Printf ( font_setting_identifier str , x_position f32 , y_position f32 , string_to_print str ) Example //gltext.Printf ////input var font_setting_identifier str = \"Roboto100\" var x_position f32 = 0.0 var y_position f32 = 0.0 var string_to_print str = \"Hello World\" ////function call gl . Color4f ( 0.5 , 0.3 , 0.8 , 1.0 ) //With this function call you can setup the color of your text gltext . Printf ( font_setting_identifier , x_position , y_position , string_to_print )","title":"gltext.Printf"},{"location":"software/cx/userdocs/package-gltext/#gltexttexture","text":"Returns the number/index of the loaded font gltext . Texture ( font_setting_identifier str )( number_of_loaded_font i32 ) Example //gltext.Texture ////input var font_setting_identifier str = \"Roboto100\" ////output var number_of_loaded_font i32 ////function call number_of_loaded_font = gltext . Texture ( font_setting_identifier )","title":"gltext.Texture"},{"location":"software/cx/userdocs/package-os/","text":"Using os in CX To use the time-Functions you first have to import it: import \"os\" Source Code os.GetWorkingDirectory This function returns the directory of your running program os . GetWorkingDirectory ()( working_directory str ) Example //os.GetWorkingDirectory ////output var working_directory str ////function call working_directory = os . GetWorkingDirectory () os.Open This function opens the given file. Don't forget to close it, after you used it. os . Open ( file_directory str ) Example //os.Open ////input var file_directory str = \"C:/Files/testfile.txt\" ////function call os . Open ( file_directory ) os.Open This function closes the given and open file os . Close ( file_directory str ) Example //os.Close ////input var file_directory str = \"C:/Files/testfile.txt\" ////function call os . Close ( file_directory )","title":"os"},{"location":"software/cx/userdocs/package-os/#using-os-in-cx","text":"To use the time-Functions you first have to import it: import \"os\" Source Code","title":"Using os in CX"},{"location":"software/cx/userdocs/package-os/#osgetworkingdirectory","text":"This function returns the directory of your running program os . GetWorkingDirectory ()( working_directory str ) Example //os.GetWorkingDirectory ////output var working_directory str ////function call working_directory = os . GetWorkingDirectory ()","title":"os.GetWorkingDirectory"},{"location":"software/cx/userdocs/package-os/#osopen","text":"This function opens the given file. Don't forget to close it, after you used it. os . Open ( file_directory str ) Example //os.Open ////input var file_directory str = \"C:/Files/testfile.txt\" ////function call os . Open ( file_directory )","title":"os.Open"},{"location":"software/cx/userdocs/package-os/#osopen_1","text":"This function closes the given and open file os . Close ( file_directory str ) Example //os.Close ////input var file_directory str = \"C:/Files/testfile.txt\" ////function call os . Close ( file_directory )","title":"os.Open"},{"location":"software/cx/userdocs/package-time/","text":"Using time in CX To use the time-Functions you first have to import it: import \"time\" Source Code time.Sleep By calling this function you force the code to pause the given amount of milliseconds time . Sleep ( milliseconds_to_pause i32 ) Example //time.Sleep ////input var milliseconds_to_pause i32 = 1000 ////function call time . Sleep ( milliseconds_to_pause ) time.UnixMilli This function returns the elapsed milliseconds since 01.01.1970 UTC time . UnixMilli ()( milliseconds_since_01011970 i64 ) Example //time.UnixMilli ////output var milliseconds_since_01011970 i64 ////function call milliseconds_since_01011970 = time . UnixMilli () time.UnixNano This function returns the elapsed nanoseconds since 01.01.1970 UTC time . UnixNano ()( nanoseconds_since_01011970 i64 ) Example //time.UnixNano ////output var nanoseconds_since_01011970 i64 ////function call nanoseconds_since_01011970 = time . UnixNano ()","title":"time"},{"location":"software/cx/userdocs/package-time/#using-time-in-cx","text":"To use the time-Functions you first have to import it: import \"time\" Source Code","title":"Using time in CX"},{"location":"software/cx/userdocs/package-time/#timesleep","text":"By calling this function you force the code to pause the given amount of milliseconds time . Sleep ( milliseconds_to_pause i32 ) Example //time.Sleep ////input var milliseconds_to_pause i32 = 1000 ////function call time . Sleep ( milliseconds_to_pause )","title":"time.Sleep"},{"location":"software/cx/userdocs/package-time/#timeunixmilli","text":"This function returns the elapsed milliseconds since 01.01.1970 UTC time . UnixMilli ()( milliseconds_since_01011970 i64 ) Example //time.UnixMilli ////output var milliseconds_since_01011970 i64 ////function call milliseconds_since_01011970 = time . UnixMilli ()","title":"time.UnixMilli"},{"location":"software/cx/userdocs/package-time/#timeunixnano","text":"This function returns the elapsed nanoseconds since 01.01.1970 UTC time . UnixNano ()( nanoseconds_since_01011970 i64 ) Example //time.UnixNano ////output var nanoseconds_since_01011970 i64 ////function call nanoseconds_since_01011970 = time . UnixNano ()","title":"time.UnixNano"},{"location":"software/cxfx/","text":"CXFX About Setup User Documentation Developer Documentation Social Networks","title":"Overview"},{"location":"software/cxfx/#cxfx","text":"About Setup User Documentation Developer Documentation Social Networks","title":"CXFX"},{"location":"software/cxfx/about/","text":"CXFX is a 3D Game Engine, that will deliver all the things needed to develop a Game of your choice. What will be possible and what already is you can see on the Roadmap . CXFX supports: macOS Windows Linux Android iOS. If you want to help here is a How to contribute . Getting Started TODO Basics TODO Tutorials Here we will link all known links that use CXFX in the future Open-Source Projects Skylight","title":"About"},{"location":"software/cxfx/about/#getting-started","text":"TODO","title":"Getting Started"},{"location":"software/cxfx/about/#basics","text":"TODO","title":"Basics"},{"location":"software/cxfx/about/#tutorials","text":"Here we will link all known links that use CXFX in the future","title":"Tutorials"},{"location":"software/cxfx/about/#open-source-projects","text":"Skylight","title":"Open-Source Projects"},{"location":"software/cxfx/roadmap/","text":"Roadmap Actually not a roadmap, but something similar: math: matrix basic matrix operations vector quaternion spline graphics: textures: texture 2d generate mipmaps load mipmaps texture cube generate mipmaps load mipmaps texture array texture 3d texture compression srgb shaders: shader permutations shader hot reload shader reflection (parse glsl and extract uniforms) shader uniform binding in gui rendering: physically based renderer kronos implementation debug diffuse irradiance specular irradiance hdr maps custom brdf realtime cubemap normal map emmissive map occlusion map output scene depth in a texture multiple render targets order independent transparency particles moving emitters anti aliasing atmospheric scattering terrain audio: wav 8bps/16bps wav f32/f64 3d audio audio streaming: compressed audio phycics: collision/intersection/response ellipsoid/triangle ellipsoid/ellipsoid ray/ellipsoid ray/OBB ray/AABB gravity torque cameras: free camera first person camera third person camera smooth motions cinematic camera gltf support (loader/renderer/exporter): flat mesh textured mesh hierarchical mesh pbr materials skinning animations cameras lights exporter 2d gui toolkit: game screens label picture scrollbar list json serialization application: resize events toggle fullscreen cli mobile: virtual keyboard ios android skycoin: cxo cxchains","title":"Roadmap"},{"location":"software/cxfx/roadmap/#roadmap","text":"Actually not a roadmap, but something similar: math: matrix basic matrix operations vector quaternion spline graphics: textures: texture 2d generate mipmaps load mipmaps texture cube generate mipmaps load mipmaps texture array texture 3d texture compression srgb shaders: shader permutations shader hot reload shader reflection (parse glsl and extract uniforms) shader uniform binding in gui rendering: physically based renderer kronos implementation debug diffuse irradiance specular irradiance hdr maps custom brdf realtime cubemap normal map emmissive map occlusion map output scene depth in a texture multiple render targets order independent transparency particles moving emitters anti aliasing atmospheric scattering terrain audio: wav 8bps/16bps wav f32/f64 3d audio audio streaming: compressed audio phycics: collision/intersection/response ellipsoid/triangle ellipsoid/ellipsoid ray/ellipsoid ray/OBB ray/AABB gravity torque cameras: free camera first person camera third person camera smooth motions cinematic camera gltf support (loader/renderer/exporter): flat mesh textured mesh hierarchical mesh pbr materials skinning animations cameras lights exporter 2d gui toolkit: game screens label picture scrollbar list json serialization application: resize events toggle fullscreen cli mobile: virtual keyboard ios android skycoin: cxo cxchains","title":"Roadmap"},{"location":"software/cxfx/social/","text":"Social Networks Github CXFX Development Repository Telegram Skycxfx Twitter skycoincxfx","title":"Social"},{"location":"software/cxfx/social/#social-networks","text":"","title":"Social Networks"},{"location":"software/cxfx/social/#github","text":"CXFX Development Repository","title":"Github"},{"location":"software/cxfx/social/#telegram","text":"Skycxfx","title":"Telegram"},{"location":"software/cxfx/social/#twitter","text":"skycoincxfx","title":"Twitter"},{"location":"software/cxo/","text":"CXO About Setup User Documentation Developer Documentation Social Networks","title":"Overview"},{"location":"software/cxo/#cxo","text":"About Setup User Documentation Developer Documentation Social Networks","title":"CXO"},{"location":"software/cxo/about/","text":"CXO (CX Object Systems) is the Skycoin immutable object system, previously called Aether. Designed to replace current conventional methods of peer-to-peer sharing, CXO creates a robust storage system that supersedes services like BitTorrent, Dropbox, and Google Drive. Data is replicated peer-to-peer utilizing the Skycoin CXO library. CXO incorporates and expands on the protocols utilized in other blockchain-based storage networks. CXO is an IPLD, with a built-in schema that sets constraints to classify relatable databases. InterPlanetary File Systems (IPFS) can be built on top of CXO. CXO provides data distribution over the Skywire network and is useful for data that must be secure and verifiable yet doesn't need storage on the blockchain. Simply, it is a low-level library designed to house applications for sharing objects. CXO acts as Content Addressable Storage (CAS) for Content Distribution Networks (CDNs). Data Sharing: Useful for data owners who want to share information, as it can share many feeds like public keys. CXO nodes can subscribe to a feed to receive updates and can connect using the discovery server, interconnecting data based on interests. Privacy: CXO data exists collectively over the network. Once data is published, it cannot be destroyed, and data feeds are downloaded from peer subscribers. For privacy, the publisher\u2019s location cannot be tracked as the publisher becomes merely a peer on the decentralized network Security: CXO exists within a self-contained standard ecosystem that is mathematically strict and is implemented from the ground up. The owners sign data using private keys, and users who receive the data can audit the signature through the use of public key feeds to be sure the data comes from the desired owner. Security is ensured because nodes cannot alter data without the use of the owner\u2019s private keys. CXO Applications: Applications on CXO are currently being tested with light use. SkyBBS is a social network similar to Facebook, Steemit, and Twitter, and is built on top of CXO, with many more to come. Getting Started TODO Tutorials Medium: How to use skycoins cxo 2.0 Open-Source Projects Here we will link Projects that use CXO 2 in the future. Apps","title":"About"},{"location":"software/cxo/about/#getting-started","text":"TODO","title":"Getting Started"},{"location":"software/cxo/about/#tutorials","text":"Medium: How to use skycoins cxo 2.0","title":"Tutorials"},{"location":"software/cxo/about/#open-source-projects","text":"Here we will link Projects that use CXO 2 in the future.","title":"Open-Source Projects"},{"location":"software/cxo/about/#apps","text":"","title":"Apps"},{"location":"software/cxo/social/","text":"Social Networks Telegram SkycoinCXO Skycoincxorus","title":"Social"},{"location":"software/cxo/social/#social-networks","text":"","title":"Social Networks"},{"location":"software/cxo/social/#telegram","text":"SkycoinCXO Skycoincxorus","title":"Telegram"},{"location":"software/dmsg/dmsg/","text":"dmsg Note dmsg-server needs to be run on a public IP . Clone $ git clone https://github.com/skycoin/dmsg.git $ cd dmsg Build To build dmsg-discovery and dmsg-server binaries, run: $ make build","title":"DMSG Build"},{"location":"software/dmsg/dmsg/#dmsg","text":"Note dmsg-server needs to be run on a public IP .","title":"dmsg"},{"location":"software/dmsg/dmsg/#clone","text":"$ git clone https://github.com/skycoin/dmsg.git $ cd dmsg","title":"Clone"},{"location":"software/dmsg/dmsg/#build","text":"To build dmsg-discovery and dmsg-server binaries, run: $ make build","title":"Build"},{"location":"software/dmsg/dmsgget/","text":"Dmsgget dmsgget is a utility which can download from HTTP servers hosted over the dmsg network (similar to a simplified wget over dmsg ). Build dmsg binaries $ make build To know more about dmsgget command, run: $ ./bin/dmsgget --help Example usage In this example, we will use the dmsg network where the dmsg.Discovery address is http://dmsgd.skywire.skycoin.com . However, any dmsg.Discovery would work. Create a folder where files will be hosted to serve over dmsg and create a hello.txt file within. To create a serving folder, run: $ mkdir /tmp/dmsghttp -p To create a file inside the folder, run: $ echo 'Hello World!' > /tmp/dmsghttp/hello.txt Next, let's serve this over http via dmsg as transport. We have an example exec for this located within /example/dmsgget/dmsg-example-http-server . To generate public/private key pair, run: $ go run ./examples/dmsgget/gen-keys/gen-keys.go To run dmsg http server, run: $ go run ./examples/dmsgget/dmsg-example-http-server/dmsg-example-http-server.go --dir /tmp/dmsghttp --sk <sk-returned-from-above-command> Now we can use dsmgget to download the hosted file. Open a new terminal and run the following. $ dmsgget dmsg://<pk-generated>:80/hello.txt To check downloaded file, run: $ cat hello.txt","title":"DMSGGET"},{"location":"software/dmsg/dmsgget/#dmsgget","text":"dmsgget is a utility which can download from HTTP servers hosted over the dmsg network (similar to a simplified wget over dmsg ). Build dmsg binaries $ make build To know more about dmsgget command, run: $ ./bin/dmsgget --help","title":"Dmsgget"},{"location":"software/dmsg/dmsgget/#example-usage","text":"In this example, we will use the dmsg network where the dmsg.Discovery address is http://dmsgd.skywire.skycoin.com . However, any dmsg.Discovery would work. Create a folder where files will be hosted to serve over dmsg and create a hello.txt file within. To create a serving folder, run: $ mkdir /tmp/dmsghttp -p To create a file inside the folder, run: $ echo 'Hello World!' > /tmp/dmsghttp/hello.txt Next, let's serve this over http via dmsg as transport. We have an example exec for this located within /example/dmsgget/dmsg-example-http-server . To generate public/private key pair, run: $ go run ./examples/dmsgget/gen-keys/gen-keys.go To run dmsg http server, run: $ go run ./examples/dmsgget/dmsg-example-http-server/dmsg-example-http-server.go --dir /tmp/dmsghttp --sk <sk-returned-from-above-command> Now we can use dsmgget to download the hosted file. Open a new terminal and run the following. $ dmsgget dmsg://<pk-generated>:80/hello.txt To check downloaded file, run: $ cat hello.txt","title":"Example usage"},{"location":"software/dmsg/dmsgpty/","text":"dmsgpty dmsgpty is a remote shell utility over dmsg (similar concept to SSH) to connect to the dmsgpty-server . Build dmsg binaries $ make build dmsgpty-host runs a standalone dmsgpty-host instance To know more about dmsgpty-host commands and flags, run: $ ./bin/dmsgpty-host --help dmsgpty-cli runs commands over dmsg To know more about dmsgpty-cli commands and flags, run: $ ./bin/dmsgpty-cli --help Example usage In this example, we will use the dmsg network where the dmsg.Discovery address is http://dmsgd.skywire.skycoin.com . However, any dmsg.Discovery would work. Example 1 Connect two remote machines with each other via dmsgpty Step 1: Config Generation To generate a config file for the dmsgpty-host on both machines if its not already generated, run following command on host-1 & host-2 : $ ./bin/dmsgpty-host confgen Config file will be generated on both machines for the dmsgpty-host . config.json generated on host-1 : { \"dmsgdisc\": \"http://dmsgd.skywire.skycoin.com\", \"dmsgsessions\": 1, \"dmsgport\": 22, \"clinet\": \"unix\", \"cliaddr\": \"/tmp/dmsgpty.sock\", \"sk\": \"8770be1ae64aa22a6d442086dc5870339a4d402c10e30499fa8a53d34413d412\", \"pk\": \"03d3d3744f7d6a943b3d467fce8477ccc580b7568160346b8d8bbd95e343ad6be4\", \"wl\": null } config.json generated on host2 : { \"dmsgdisc\" : \"http://dmsgd.skywire.skycoin.com\" , \"dmsgsessions\" : 1 , \"dmsgport\" : 22 , \"clinet\" : \"unix\" , \"cliaddr\" : \"/tmp/dmsgpty.sock\" , \"sk\" : \"76cc80ea9dcc8cbbb54d5463cea8797dd4ed27693daf176878a8d0929a4466d3\" , \"pk\" : \"024e804f8e8fc3c4fc8562a5e58c4897323e527dace63ec36badfb66b65d4606d7\" , \"wl\" : null } Step 2: Start dmsgpty-host To start the dmsgpty-host on both machines, run following command on host-1 & host-2 : ./bin/dmsgpty-host Step 3: Start whitelist with dmsgpty-cli Note dmsgpty-cli can be used to interact with the host as well as to view, add or remove whitelist. Now whitelist the Public Key of dmsgpty-host-1 on dmsgpty-host-2 . So that dmsgpty-host-2 will accept connection request from dmsgpty-host-1 . Run following command on host-2 $ ./bin/dmsgpty-cli whitelist-add <pk-of-host1> Step 4: Connect to dmsgpty-host-2 from dmsgpty-host-1 Now connect to the shell of dmsgpty-host-2 FROM dmsgpty-host-1 . Run following command on host-1 $ ./bin/dmsgpty-cli --addr <pk-of-host-2> To exit from the shell of dmsgpty-host-2 simply run $ exit Same machine for both hosts If you are using the same machine for both hosts, there are some changes for the second host. Step 1: Config Generation Change the cliaddress of dmsgpty-host-2 since both the hosts are on the same machine, and the same cliaddr will clash. To generate a config with different cliaddress, run following on host-2 : $ ./bin/dmsgpty-host confgen config2.json --cliaddr /tmp/dmsgpty2.sock Config file will be generated for the dmsgpty-host-2 . { \"dmsgdisc\" : \"http://dmsgd.skywire.skycoin.com\" , \"dmsgsessions\" : 1 , \"dmsgport\" : 22 , \"clinet\" : \"unix\" , \"cliaddr\" : \"/tmp/dmsgpty2.sock\" , \"sk\" : \"76cc80ea9dcc8cbbb54d5463cea8797dd4ed27693daf176878a8d0929a4466d3\" , \"pk\" : \"024e804f8e8fc3c4fc8562a5e58c4897323e527dace63ec36badfb66b65d4606d7\" , \"wl\" : null } Step 2: Start dmsgpty-host To start the dmsgpty-host-2 , run the following in a new terminal on host-2 . $ ./bin/dmsgpty-host -c ./config2.json Step 3: Start whitelist with dmsgpty-cli To interact with the hosts, use dmsgpty-cli in a new terminal. dmsgpty-cli can be used to view, add or remove whitelist. Whitelist the Public Key of dmsgpty-host-1 in dmsgpty-host-2 . So that dmsgpty-host-2 will accept connection request from dmsgpty-host-1 Step 3: Start whitelist with dmsgpty-cli To whitelist Public Key of dmsgpty-host-1 , run following on host-2 : $ ./bin/dmsgpty-cli whitelist-add <pk-of-host-1> --cliaddr /tmp/dmsgpty2.sock Step 4:Connect to dmsgpty-host-2 from dmsgpty-host-1 Now connect to the shell of dmsgpty-host-2 FROM dmsgpty-host-1 . Run following command on host-1 $ ./bin/dmsgpty-cli --addr <pk-of-host-2> To exit from the shell of dmsgpty-host-2 simply run $ exit","title":"DMSGPTY"},{"location":"software/dmsg/dmsgpty/#dmsgpty","text":"dmsgpty is a remote shell utility over dmsg (similar concept to SSH) to connect to the dmsgpty-server . Build dmsg binaries $ make build dmsgpty-host runs a standalone dmsgpty-host instance To know more about dmsgpty-host commands and flags, run: $ ./bin/dmsgpty-host --help dmsgpty-cli runs commands over dmsg To know more about dmsgpty-cli commands and flags, run: $ ./bin/dmsgpty-cli --help","title":"dmsgpty"},{"location":"software/dmsg/dmsgpty/#example-usage","text":"In this example, we will use the dmsg network where the dmsg.Discovery address is http://dmsgd.skywire.skycoin.com . However, any dmsg.Discovery would work.","title":"Example usage"},{"location":"software/dmsg/dmsgpty/#example-1","text":"Connect two remote machines with each other via dmsgpty","title":"Example 1"},{"location":"software/dmsg/dmsgpty/#step-1-config-generation","text":"To generate a config file for the dmsgpty-host on both machines if its not already generated, run following command on host-1 & host-2 : $ ./bin/dmsgpty-host confgen Config file will be generated on both machines for the dmsgpty-host . config.json generated on host-1 : { \"dmsgdisc\": \"http://dmsgd.skywire.skycoin.com\", \"dmsgsessions\": 1, \"dmsgport\": 22, \"clinet\": \"unix\", \"cliaddr\": \"/tmp/dmsgpty.sock\", \"sk\": \"8770be1ae64aa22a6d442086dc5870339a4d402c10e30499fa8a53d34413d412\", \"pk\": \"03d3d3744f7d6a943b3d467fce8477ccc580b7568160346b8d8bbd95e343ad6be4\", \"wl\": null } config.json generated on host2 : { \"dmsgdisc\" : \"http://dmsgd.skywire.skycoin.com\" , \"dmsgsessions\" : 1 , \"dmsgport\" : 22 , \"clinet\" : \"unix\" , \"cliaddr\" : \"/tmp/dmsgpty.sock\" , \"sk\" : \"76cc80ea9dcc8cbbb54d5463cea8797dd4ed27693daf176878a8d0929a4466d3\" , \"pk\" : \"024e804f8e8fc3c4fc8562a5e58c4897323e527dace63ec36badfb66b65d4606d7\" , \"wl\" : null }","title":"Step 1: Config Generation"},{"location":"software/dmsg/dmsgpty/#step-2-start-dmsgpty-host","text":"To start the dmsgpty-host on both machines, run following command on host-1 & host-2 : ./bin/dmsgpty-host","title":"Step 2: Start dmsgpty-host"},{"location":"software/dmsg/dmsgpty/#step-3-start-whitelist-with-dmsgpty-cli","text":"Note dmsgpty-cli can be used to interact with the host as well as to view, add or remove whitelist. Now whitelist the Public Key of dmsgpty-host-1 on dmsgpty-host-2 . So that dmsgpty-host-2 will accept connection request from dmsgpty-host-1 . Run following command on host-2 $ ./bin/dmsgpty-cli whitelist-add <pk-of-host1>","title":"Step 3: Start whitelist with dmsgpty-cli"},{"location":"software/dmsg/dmsgpty/#step-4-connect-to-dmsgpty-host-2-from-dmsgpty-host-1","text":"Now connect to the shell of dmsgpty-host-2 FROM dmsgpty-host-1 . Run following command on host-1 $ ./bin/dmsgpty-cli --addr <pk-of-host-2> To exit from the shell of dmsgpty-host-2 simply run $ exit Same machine for both hosts If you are using the same machine for both hosts, there are some changes for the second host.","title":"Step 4: Connect to dmsgpty-host-2 from dmsgpty-host-1"},{"location":"software/dmsg/dmsgpty/#step-1-config-generation_1","text":"Change the cliaddress of dmsgpty-host-2 since both the hosts are on the same machine, and the same cliaddr will clash. To generate a config with different cliaddress, run following on host-2 : $ ./bin/dmsgpty-host confgen config2.json --cliaddr /tmp/dmsgpty2.sock Config file will be generated for the dmsgpty-host-2 . { \"dmsgdisc\" : \"http://dmsgd.skywire.skycoin.com\" , \"dmsgsessions\" : 1 , \"dmsgport\" : 22 , \"clinet\" : \"unix\" , \"cliaddr\" : \"/tmp/dmsgpty2.sock\" , \"sk\" : \"76cc80ea9dcc8cbbb54d5463cea8797dd4ed27693daf176878a8d0929a4466d3\" , \"pk\" : \"024e804f8e8fc3c4fc8562a5e58c4897323e527dace63ec36badfb66b65d4606d7\" , \"wl\" : null }","title":"Step 1: Config Generation"},{"location":"software/dmsg/dmsgpty/#step-2-start-dmsgpty-host_1","text":"To start the dmsgpty-host-2 , run the following in a new terminal on host-2 . $ ./bin/dmsgpty-host -c ./config2.json","title":"Step 2: Start dmsgpty-host"},{"location":"software/dmsg/dmsgpty/#step-3-start-whitelist-with-dmsgpty-cli_1","text":"To interact with the hosts, use dmsgpty-cli in a new terminal. dmsgpty-cli can be used to view, add or remove whitelist. Whitelist the Public Key of dmsgpty-host-1 in dmsgpty-host-2 . So that dmsgpty-host-2 will accept connection request from dmsgpty-host-1","title":"Step 3: Start whitelist with dmsgpty-cli"},{"location":"software/dmsg/dmsgpty/#step-3-start-whitelist-with-dmsgpty-cli_2","text":"To whitelist Public Key of dmsgpty-host-1 , run following on host-2 : $ ./bin/dmsgpty-cli whitelist-add <pk-of-host-1> --cliaddr /tmp/dmsgpty2.sock","title":"Step 3: Start whitelist with dmsgpty-cli"},{"location":"software/dmsg/dmsgpty/#step-4connect-to-dmsgpty-host-2-from-dmsgpty-host-1","text":"Now connect to the shell of dmsgpty-host-2 FROM dmsgpty-host-1 . Run following command on host-1 $ ./bin/dmsgpty-cli --addr <pk-of-host-2> To exit from the shell of dmsgpty-host-2 simply run $ exit","title":"Step 4:Connect to dmsgpty-host-2 from dmsgpty-host-1"},{"location":"software/dmsg/docker/","text":"Note The docker setup instructions are beyond the scope of this article. Please refer to Docker documentation for installing it on your system. Build To build dmsg-server and dmsg-discovery images, run: $ ./docker/scripts/docker-push.sh -t develop -b Run Run redis $ docker run --network=\"br-dmsg0\" --rm --name=redis -d -p 6379:6379 redis:alpine Run dmsg-discovery : $ docker run --rm --network=\"br-dmsg0\" --name=dmsg-discovery skycoinpro/dmsg-discovery:test --redis redis://redis:6379 To run dmsg-server with default config: $ docker run --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test To run dmsg-server with custom config: $ docker run -v <YOUR_CONFIG_PATH>:/etc/dmsg --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test /etc/dmsg/<YOUR_CONFIG_FILE_NAME>","title":"Docker"},{"location":"software/dmsg/docker/#build","text":"To build dmsg-server and dmsg-discovery images, run: $ ./docker/scripts/docker-push.sh -t develop -b","title":"Build"},{"location":"software/dmsg/docker/#run","text":"Run redis $ docker run --network=\"br-dmsg0\" --rm --name=redis -d -p 6379:6379 redis:alpine Run dmsg-discovery : $ docker run --rm --network=\"br-dmsg0\" --name=dmsg-discovery skycoinpro/dmsg-discovery:test --redis redis://redis:6379 To run dmsg-server with default config: $ docker run --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test To run dmsg-server with custom config: $ docker run -v <YOUR_CONFIG_PATH>:/etc/dmsg --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test /etc/dmsg/<YOUR_CONFIG_FILE_NAME>","title":"Run"},{"location":"software/fiber/","text":"TODO: write about what the fiber platform is Links: Skycoin Fiber Platform Launch your ICO on Skycoin Fiber include tutorials on how to make a new coin and more Links: Newcoin Do you want to build a Skycoin Node? Do you want to build a load balanced Skycoin Node? Developer Documentation Guides","title":"Overview"},{"location":"software/fiber/fiber-coins/","text":"Here is a list of all projects that use the fiber-platform Can't find your project here? If you are using fiber, you can't find your project here and want to be listed, just do a pull request to this repo with the updated data (please insert your project in aphabetical order ) or open an issue here . Project Coin Description Website ... MDL Talent Hub MDL Gig Economy mdl.life PrivateNess Network NESS Blockchain as a Service (BaaS) privateness.network SolarBankers SBL Microgrid solarbankers.com","title":"Fiber-Projects"},{"location":"software/skycoin/","text":"Skycoin About Setup User Documentation Developer Documentation Social Networks","title":"Overview"},{"location":"software/skycoin/#skycoin","text":"About Setup User Documentation Developer Documentation Social Networks","title":"Skycoin"},{"location":"software/skycoin/about/","text":"Skycoin Skycoin (SKY) What is Skycoin? Skycoin is a next-generation cryptocurrency. Skycoin was written from scratch and designed over four years to realize the ideal of Bitcoin and represents the apex of cryptocurrency design. Skycoin is not designed to add features to Bitcoin, but rather improves Bitcoin by increasing simplicity, security and stripping out everything non-essential. Some people have hyped the Skycoin Project as leading into \"Bitcoin 3.0\". The coin itself is not \"Bitcoin 3.0\", but is rather \"Bitcoin 1.0\". Bitcoin is a prototype crypto-coin. Skycoin was designed to be what Bitcoin would look like if it were built from scratch, to remedy the rough edges in the Bitcoin design. no duplicate coin-base outputs enforced checks for hash collisions simple deterministic wallets no transaction malleability no signature malleability removal of the scripting language CoinJoin and normal transactions are indistinguishable elimination of edge-cases that prevent independent node implementations <=10 second transaction times elimination of the need for mining to achieve blockchain consensus Consensus Medium Article: A comprehensive guide to the consensus and skycoin obelisk Medium Article Audio Version: Telegram Message Link CoinHours (SCH) What are coin hours? Coin hours are a parallel currency within the Skycoin blockchain, alongside skycoins. Coin hours are used to pay transaction fees in the network. In the future, coin hours will be used in other applications beyond the Skycoin cryptocurrency, such as Skywire . Coin hours are generated based upon the age of coins in a transaction output. What is a transaction output? A Skycoin transaction consumes one or more outputs and creates one or more outputs. Each output has an owner address, an amount of coins and an amount of hours. When you send coins to someone, you destroy some outputs that are owned by addresses in your wallet and you create some new outputs. How are coin hours generated? For every 1 coin in an output, 1 coin hour is created after 1 hour elapses. Time is measured between the blockchain's current head block timestamp and the timestamp of the block in which the output was created. Internally, the value is calculated as \"coin seconds\", then rounded down to the nearest whole coin hour. This implies that: A 0.1 skycoin output generates 1 coin hour every 10 hours (36000 seconds) A 1 skycoin output generates 1 coin hour every 1 hour (3600 seconds) A 10 skycoin output generates 1 coin hour every 6 minutes (360 seconds) Generated coin hours are calculated at the time that the output is spent, and are added to the output's initial coin hours. The elapsed time is the timestamp of the previous block, not a computer's clock time. How are coin hours used for transaction fees? A transaction must destroy a percent of its total input coin hours in order to be valid. It can optionally destroy more, to prioritize the transaction in a congested network. Currently, the percent that must be destroyed is 10%. The value is always rounded up (i.e., if there are 5 input coin hours, 3 must be destroyed). A transaction must destroy at least 1 coin hour. Transactions are prioritized for inclusion in a block by their coin hour burn fee per byte. Larger transactions (measured in bytes) require a higher amount of coin hours burned to achieve a higher priority. Wallets There are two options to hold Skycoin and generate SCH while holding. Software and Hardware wallets. Software Desktop : Windows, MacOS, Linux Mobile : Android, iOS Download your wallet from the official Website here Hardware At the moment you can hold SKY only on the Skywallet . Read more here Buy it from the offical store Exchanges See here on what exchanges you can buy SKY or SCH","title":"About"},{"location":"software/skycoin/about/#skycoin","text":"","title":"Skycoin"},{"location":"software/skycoin/about/#skycoin-sky","text":"","title":"Skycoin (SKY)"},{"location":"software/skycoin/about/#what-is-skycoin","text":"Skycoin is a next-generation cryptocurrency. Skycoin was written from scratch and designed over four years to realize the ideal of Bitcoin and represents the apex of cryptocurrency design. Skycoin is not designed to add features to Bitcoin, but rather improves Bitcoin by increasing simplicity, security and stripping out everything non-essential. Some people have hyped the Skycoin Project as leading into \"Bitcoin 3.0\". The coin itself is not \"Bitcoin 3.0\", but is rather \"Bitcoin 1.0\". Bitcoin is a prototype crypto-coin. Skycoin was designed to be what Bitcoin would look like if it were built from scratch, to remedy the rough edges in the Bitcoin design. no duplicate coin-base outputs enforced checks for hash collisions simple deterministic wallets no transaction malleability no signature malleability removal of the scripting language CoinJoin and normal transactions are indistinguishable elimination of edge-cases that prevent independent node implementations <=10 second transaction times elimination of the need for mining to achieve blockchain consensus","title":"What is Skycoin?"},{"location":"software/skycoin/about/#consensus","text":"Medium Article: A comprehensive guide to the consensus and skycoin obelisk Medium Article Audio Version: Telegram Message Link","title":"Consensus"},{"location":"software/skycoin/about/#coinhours-sch","text":"","title":"CoinHours (SCH)"},{"location":"software/skycoin/about/#what-are-coin-hours","text":"Coin hours are a parallel currency within the Skycoin blockchain, alongside skycoins. Coin hours are used to pay transaction fees in the network. In the future, coin hours will be used in other applications beyond the Skycoin cryptocurrency, such as Skywire . Coin hours are generated based upon the age of coins in a transaction output.","title":"What are coin hours?"},{"location":"software/skycoin/about/#what-is-a-transaction-output","text":"A Skycoin transaction consumes one or more outputs and creates one or more outputs. Each output has an owner address, an amount of coins and an amount of hours. When you send coins to someone, you destroy some outputs that are owned by addresses in your wallet and you create some new outputs.","title":"What is a transaction output?"},{"location":"software/skycoin/about/#how-are-coin-hours-generated","text":"For every 1 coin in an output, 1 coin hour is created after 1 hour elapses. Time is measured between the blockchain's current head block timestamp and the timestamp of the block in which the output was created. Internally, the value is calculated as \"coin seconds\", then rounded down to the nearest whole coin hour. This implies that: A 0.1 skycoin output generates 1 coin hour every 10 hours (36000 seconds) A 1 skycoin output generates 1 coin hour every 1 hour (3600 seconds) A 10 skycoin output generates 1 coin hour every 6 minutes (360 seconds) Generated coin hours are calculated at the time that the output is spent, and are added to the output's initial coin hours. The elapsed time is the timestamp of the previous block, not a computer's clock time.","title":"How are coin hours generated?"},{"location":"software/skycoin/about/#how-are-coin-hours-used-for-transaction-fees","text":"A transaction must destroy a percent of its total input coin hours in order to be valid. It can optionally destroy more, to prioritize the transaction in a congested network. Currently, the percent that must be destroyed is 10%. The value is always rounded up (i.e., if there are 5 input coin hours, 3 must be destroyed). A transaction must destroy at least 1 coin hour. Transactions are prioritized for inclusion in a block by their coin hour burn fee per byte. Larger transactions (measured in bytes) require a higher amount of coin hours burned to achieve a higher priority.","title":"How are coin hours used for transaction fees?"},{"location":"software/skycoin/about/#wallets","text":"There are two options to hold Skycoin and generate SCH while holding. Software and Hardware wallets. Software Desktop : Windows, MacOS, Linux Mobile : Android, iOS Download your wallet from the official Website here Hardware At the moment you can hold SKY only on the Skywallet . Read more here Buy it from the offical store","title":"Wallets"},{"location":"software/skycoin/about/#exchanges","text":"See here on what exchanges you can buy SKY or SCH","title":"Exchanges"},{"location":"software/skycoin/social/","text":"Social Networks Telegram Skycoin Skycoin Trading (Price Discussion) Skyfleet News Reddit r/skycoin","title":"Social"},{"location":"software/skycoin/social/#social-networks","text":"","title":"Social Networks"},{"location":"software/skycoin/social/#telegram","text":"Skycoin Skycoin Trading (Price Discussion) Skyfleet News","title":"Telegram"},{"location":"software/skycoin/social/#reddit","text":"r/skycoin","title":"Reddit"},{"location":"software/skywire/","text":"Skywire About Setup User Documentation Developer Documentation Social Networks","title":"Overview"},{"location":"software/skywire/#skywire","text":"About Setup User Documentation Developer Documentation Social Networks","title":"Skywire"},{"location":"software/skywire/about/","text":"","title":"About"},{"location":"software/skywire/discovery/","text":"Official Visor Uptime Tracker Whitelisting Skyfleet Warning The following options are not maintained by skycoin. It is not guaranteed that the information on these is right or up to date. Websites Skycoin.si bchain.ovh Tools Wing-Commander (Telegram-Bot)","title":"Discovery"},{"location":"software/skywire/discovery/#official","text":"Visor Uptime Tracker Whitelisting","title":"Official"},{"location":"software/skywire/discovery/#skyfleet","text":"Warning The following options are not maintained by skycoin. It is not guaranteed that the information on these is right or up to date.","title":"Skyfleet"},{"location":"software/skywire/discovery/#websites","text":"Skycoin.si bchain.ovh","title":"Websites"},{"location":"software/skywire/discovery/#tools","text":"Wing-Commander (Telegram-Bot)","title":"Tools"},{"location":"software/skywire/social/","text":"Social Networks Telegram Skywire PSA Skywire Antenna Group Skywire NYC","title":"Social Networks"},{"location":"software/skywire/social/#social-networks","text":"","title":"Social Networks"},{"location":"software/skywire/social/#telegram","text":"Skywire PSA Skywire Antenna Group Skywire NYC","title":"Telegram"},{"location":"software/skywire/configuration/hypervisor-mode/","text":"Configuration for HypervisorUI The hypervisorUI allows user to monitor skywire visors. These visors run the Skywire protocol and applications that users can run on top of the Skywire network. The hypervisorUI facilitates and aggregates the management of the nodes into one user interface. To generate config file manually for visor and expose hypervisorUI, run: ./skywire-cli visor gen-config --is-hypervisor To generate config file manually for visor and expose hypervisorUI with docker, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli visor gen-config --is-hypervisor TLS TLS (Transport Layer Security) is a security protocol, which encrypts the communication between web applications and the server. It ensures that the data transmitted over the internet is safe from hackers and eavesdroppers. To enable TLS it is necessary to create required certificate/key file. To create the certificate/key file, run: $ sh static/skywire-manager-src/ssl/generate-1.sh from the skywire repo. To enable TLS in hypervisor, edit the hypervisor section in config file generated: \"hypervisor\": { \"db_path\": \"/root/skywire/users.db\", \"enable_auth\": true, \"cookies\": { \"hash_key\": \"4755bd30c056cb50d1e3e679e91f71414a89a157e296309feeffc40ee0441574a068a698b1156aba0240a28d6b878d29b74dbed75b540e3ab3431f58f0b813f7\", \"block_key\": \"c76e98c8431a2a7c03460661965fe5917cf945b79fd90a622489d04c930a9557\", \"expires_duration\": 43200000000000, \"path\": \"/\", \"domain\": \"\" }, \"dmsg_port\": 46, \"http_addr\": \":8000\", \"enable_tls\": false, \"tls_cert_file\": \"./cert.pem\", \"tls_key_file\": \"./key.pem\" } Change \"enable_tls\": false to \"enable_tls\": true Assign the path of files generated to \"tls_cert_file\": and \"tls_key_file\": Save the changes and Start the visor. Auth Authentication helps to prove the identity of the user accessing the HypervisorUI. It can be used to prevent unauthorized users from accessing the HypervisorUI. To change authentication settings in HypervisorUI, edit the hypervisor section in config file generated: \"hypervisor\": { \"db_path\": \"/root/skywire/users.db\", \"enable_auth\": true, \"cookies\": { \"hash_key\": \"4755bd30c056cb50d1e3e679e91f71414a89a157e296309feeffc40ee0441574a068a698b1156aba0240a28d6b878d29b74dbed75b540e3ab3431f58f0b813f7\", \"block_key\": \"c76e98c8431a2a7c03460661965fe5917cf945b79fd90a622489d04c930a9557\", \"expires_duration\": 43200000000000, \"path\": \"/\", \"domain\": \"\" }, \"dmsg_port\": 46, \"http_addr\": \":8000\", \"enable_tls\": false, \"tls_cert_file\": \"./cert.pem\", \"tls_key_file\": \"./key.pem\" } To enable or disable authentication, change \"enable_auth\": to true or false respectively. Save the changes and Start the visor. Start To start the visor, run: $ ./skywire-visor -c skywire-config.json To start the visor with docker, run: $ docker run --rm -p 8000:8000 -v <YOUR_CONFIG_DIR>:/opt/skywire --name=skywire skycoin/skywire:latest skywire-visor","title":"Hypervisor Mode"},{"location":"software/skywire/configuration/hypervisor-mode/#configuration-for-hypervisorui","text":"The hypervisorUI allows user to monitor skywire visors. These visors run the Skywire protocol and applications that users can run on top of the Skywire network. The hypervisorUI facilitates and aggregates the management of the nodes into one user interface. To generate config file manually for visor and expose hypervisorUI, run: ./skywire-cli visor gen-config --is-hypervisor To generate config file manually for visor and expose hypervisorUI with docker, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli visor gen-config --is-hypervisor","title":"Configuration for HypervisorUI"},{"location":"software/skywire/configuration/hypervisor-mode/#tls","text":"TLS (Transport Layer Security) is a security protocol, which encrypts the communication between web applications and the server. It ensures that the data transmitted over the internet is safe from hackers and eavesdroppers. To enable TLS it is necessary to create required certificate/key file. To create the certificate/key file, run: $ sh static/skywire-manager-src/ssl/generate-1.sh from the skywire repo. To enable TLS in hypervisor, edit the hypervisor section in config file generated: \"hypervisor\": { \"db_path\": \"/root/skywire/users.db\", \"enable_auth\": true, \"cookies\": { \"hash_key\": \"4755bd30c056cb50d1e3e679e91f71414a89a157e296309feeffc40ee0441574a068a698b1156aba0240a28d6b878d29b74dbed75b540e3ab3431f58f0b813f7\", \"block_key\": \"c76e98c8431a2a7c03460661965fe5917cf945b79fd90a622489d04c930a9557\", \"expires_duration\": 43200000000000, \"path\": \"/\", \"domain\": \"\" }, \"dmsg_port\": 46, \"http_addr\": \":8000\", \"enable_tls\": false, \"tls_cert_file\": \"./cert.pem\", \"tls_key_file\": \"./key.pem\" } Change \"enable_tls\": false to \"enable_tls\": true Assign the path of files generated to \"tls_cert_file\": and \"tls_key_file\": Save the changes and Start the visor.","title":"TLS"},{"location":"software/skywire/configuration/hypervisor-mode/#auth","text":"Authentication helps to prove the identity of the user accessing the HypervisorUI. It can be used to prevent unauthorized users from accessing the HypervisorUI. To change authentication settings in HypervisorUI, edit the hypervisor section in config file generated: \"hypervisor\": { \"db_path\": \"/root/skywire/users.db\", \"enable_auth\": true, \"cookies\": { \"hash_key\": \"4755bd30c056cb50d1e3e679e91f71414a89a157e296309feeffc40ee0441574a068a698b1156aba0240a28d6b878d29b74dbed75b540e3ab3431f58f0b813f7\", \"block_key\": \"c76e98c8431a2a7c03460661965fe5917cf945b79fd90a622489d04c930a9557\", \"expires_duration\": 43200000000000, \"path\": \"/\", \"domain\": \"\" }, \"dmsg_port\": 46, \"http_addr\": \":8000\", \"enable_tls\": false, \"tls_cert_file\": \"./cert.pem\", \"tls_key_file\": \"./key.pem\" } To enable or disable authentication, change \"enable_auth\": to true or false respectively. Save the changes and Start the visor.","title":"Auth"},{"location":"software/skywire/configuration/hypervisor-mode/#start","text":"To start the visor, run: $ ./skywire-visor -c skywire-config.json To start the visor with docker, run: $ docker run --rm -p 8000:8000 -v <YOUR_CONFIG_DIR>:/opt/skywire --name=skywire skycoin/skywire:latest skywire-visor","title":"Start"},{"location":"software/skywire/configuration/network-config/","text":"Network Configuration Add persistent transports The visor will always try to establish a transport with the public keys defined in the \"persistent_transports\" field. To add the public keys edit the \"persistent_transports\" in the skywire-config.json file. \"persistent_transports\": [{ \"pk\" : \"<public-key>\" \"type\" : \"<transport-type>\" }] Save the changes and Start the visor. Make visor public Note A visor that is made public will be relaying data to other visors and may be eligible for extra rewards. If the visor is deployed on public IP, it can be made public to other visors, to connect automatically via stcpr transport. To make the visor public, change \"is_public\": false to \"is_public\": true in the skywire-config.json file. \"is_public\": true Save the changes and Start the visor. Public Autoconnect It is a network configuration option, when enabled it will search for public visors (those with \"is_public\": true ) and connect them on startup via stcpr . By default, it is disabled in the config file. To enable public autoconnect, make the following changes in skywire-config.json : \"public_autoconnect\": true, Save the changes and Start the visor. Hops The number defined in \"min_hops\" influences the route creation through the network. If the number is higher than 0 the visor will only establish routes with at least one intermediary visor. To change the number of hops, edit \"min_hops\" field in skywire-config.json \"min_hops\": <number-of-hops> Save the changes and Start the visor. Start To start the visor, run: $ ./skywire-visor -c skywire-config.json To start the visor with docker, run: $ docker run --rm -p 8000:8000 -v <YOUR_CONFIG_DIR>:/opt/skywire --name=skywire skycoin/skywire:latest skywire-visor","title":"Network Configuration"},{"location":"software/skywire/configuration/network-config/#network-configuration","text":"","title":"Network Configuration"},{"location":"software/skywire/configuration/network-config/#add-persistent-transports","text":"The visor will always try to establish a transport with the public keys defined in the \"persistent_transports\" field. To add the public keys edit the \"persistent_transports\" in the skywire-config.json file. \"persistent_transports\": [{ \"pk\" : \"<public-key>\" \"type\" : \"<transport-type>\" }] Save the changes and Start the visor.","title":"Add persistent transports"},{"location":"software/skywire/configuration/network-config/#make-visor-public","text":"Note A visor that is made public will be relaying data to other visors and may be eligible for extra rewards. If the visor is deployed on public IP, it can be made public to other visors, to connect automatically via stcpr transport. To make the visor public, change \"is_public\": false to \"is_public\": true in the skywire-config.json file. \"is_public\": true Save the changes and Start the visor.","title":"Make visor public"},{"location":"software/skywire/configuration/network-config/#public-autoconnect","text":"It is a network configuration option, when enabled it will search for public visors (those with \"is_public\": true ) and connect them on startup via stcpr . By default, it is disabled in the config file. To enable public autoconnect, make the following changes in skywire-config.json : \"public_autoconnect\": true, Save the changes and Start the visor.","title":"Public Autoconnect"},{"location":"software/skywire/configuration/network-config/#hops","text":"The number defined in \"min_hops\" influences the route creation through the network. If the number is higher than 0 the visor will only establish routes with at least one intermediary visor. To change the number of hops, edit \"min_hops\" field in skywire-config.json \"min_hops\": <number-of-hops> Save the changes and Start the visor.","title":"Hops"},{"location":"software/skywire/configuration/network-config/#start","text":"To start the visor, run: $ ./skywire-visor -c skywire-config.json To start the visor with docker, run: $ docker run --rm -p 8000:8000 -v <YOUR_CONFIG_DIR>:/opt/skywire --name=skywire skycoin/skywire:latest skywire-visor","title":"Start"},{"location":"software/skywire/configuration/visor-mode/","text":"","title":"Visor Mode"},{"location":"software/skywire/configuration/vpn-config/vpn-client/","text":"Skywire VPN Client Introduction This guide explains the setup procedure and includes operating instructions of the Skywire VPN Client. Please refer to the Skywire VPN Server guide in case you want to setup your own Skywire VPN Server. Installation Note To use Skywire VPN, it is necessary to install Skywire on your computer. To install skywire follow the guide: - macOS - Linux The rest of this guide assumes that you have installed the Skywire Visor and generated configuration file. Setup Open skywire-config.json file and insert the public key of the server into the vpn-client field: { \"name\": \"vpn-client\", \"args\": [ \"-srv\", \"033e4804bb27ad717aabb406afbb938edb2bd41d1d1485db1b68540bebdeb7c910\" ], \"auto_start\": false, \"port\": 43 } You can find a list of publically available VPN servers here . Note Skywire VPN Client requries root privileges to run. To start the visor, run sudo ./skywire-visor skywire-config.json Enter the password if prompted. Run Skywire VPN Client without root Linux To set capabilities, run: sudo setcap 'cap_net_admin+p' ./apps/vpn-client Start the visor: ./skywire-visor ./skywire-config.json macOS Note Binary has to be owned by root and have permissions like 4755 To change owner of binary to root, run: sudo chown root ./apps/vpn-client To provide permissions, run: sudo chmod 4755 ./apps/vpn-client Start the visor: ./skywire-visor ./skywire-config.json To establish a transport to the VPN server, replace the values below with the remote public key you selected: ./skywire-cli visor add-tp 033e4804bb27ad717aabb406afbb938edb2bd41d1d1485db1b68540bebdeb7c910 --type stcpr Note The stcpr and sudph transports are the most performant. It is recommended to try to setup these transports first. If these are not available, setup a dmsg transport. After setting up the transport, run the VPN: ./skywire-cli visor start-app vpn-client To stop the VPN Server, run: ./skywire-cli visor stop-app vpn-server","title":"VPN Client"},{"location":"software/skywire/configuration/vpn-config/vpn-client/#skywire-vpn-client","text":"","title":"Skywire VPN Client"},{"location":"software/skywire/configuration/vpn-config/vpn-client/#introduction","text":"This guide explains the setup procedure and includes operating instructions of the Skywire VPN Client. Please refer to the Skywire VPN Server guide in case you want to setup your own Skywire VPN Server.","title":"Introduction"},{"location":"software/skywire/configuration/vpn-config/vpn-client/#installation","text":"Note To use Skywire VPN, it is necessary to install Skywire on your computer. To install skywire follow the guide: - macOS - Linux The rest of this guide assumes that you have installed the Skywire Visor and generated configuration file.","title":"Installation"},{"location":"software/skywire/configuration/vpn-config/vpn-client/#setup","text":"Open skywire-config.json file and insert the public key of the server into the vpn-client field: { \"name\": \"vpn-client\", \"args\": [ \"-srv\", \"033e4804bb27ad717aabb406afbb938edb2bd41d1d1485db1b68540bebdeb7c910\" ], \"auto_start\": false, \"port\": 43 } You can find a list of publically available VPN servers here . Note Skywire VPN Client requries root privileges to run. To start the visor, run sudo ./skywire-visor skywire-config.json Enter the password if prompted. Run Skywire VPN Client without root Linux To set capabilities, run: sudo setcap 'cap_net_admin+p' ./apps/vpn-client Start the visor: ./skywire-visor ./skywire-config.json macOS Note Binary has to be owned by root and have permissions like 4755 To change owner of binary to root, run: sudo chown root ./apps/vpn-client To provide permissions, run: sudo chmod 4755 ./apps/vpn-client Start the visor: ./skywire-visor ./skywire-config.json To establish a transport to the VPN server, replace the values below with the remote public key you selected: ./skywire-cli visor add-tp 033e4804bb27ad717aabb406afbb938edb2bd41d1d1485db1b68540bebdeb7c910 --type stcpr Note The stcpr and sudph transports are the most performant. It is recommended to try to setup these transports first. If these are not available, setup a dmsg transport. After setting up the transport, run the VPN: ./skywire-cli visor start-app vpn-client To stop the VPN Server, run: ./skywire-cli visor stop-app vpn-server","title":"Setup"},{"location":"software/skywire/configuration/vpn-config/vpn-server/","text":"Skywire VPN Server Note For ease of setting up a connection to your VPN server, it is recommended to deploy the VPN server on a machine with a public IP. This will allow clients to establish stcpr transports which use a simple TCP connection instead of relayed connections over dmsg . Introduction This guide explains the setup procedure and includes operating instructions of the Skywire VPN Server. Please refer to the Skywire VPN Client guide in case you want to use Skywire VPN as a client. Note The configuration & starting/stopping of the Skywire VPN Server can also be performed using the Skywire HypervisorUI via the Apps page of the respective Visor. Installation Dependencies Skywire VPN Server requires Golang v1.16 or higher. Debian Install To install the dependencies required by Skywire VPN Server, run: $ sudo apt install git iproute2 To install GO, follow the installation guide here Arch Linux Install To install the dependencies required by Skywire VPN Server, run: $ sudo pacman -S go git iproute2 Skywire Visor Skywire VPN Server requires Skywire Visor to be installed, follow the guide here . Configure The Skywire VPN server can be configured to require a passcode for authentication of clients or can be freely accessible without passcode. Note VPN server needs to be freely accessible without passcode to be publicly advertised in Skycoin's service discovery. To set a passcode, edit the skywire-config.json file and pass the following arguments: { \"name\": \"vpn-server\", \"auto_start\": false, \"port\": 44, \"args\":[\"-passcode\",\"<your-passcode>\", \"-secure\", \"true\"] } VPN server needs to be started manually after the Visor was started. To start the VPN server automatically upon the startup of Skywire Visor, set \"auto_start\": false to \"auto_start\": true . The \"-secure\" flag prevents VPN client users from SSH'ing into the VPN-server's machine. It defaults to true. Operating Skywire VPN Server The following assumes that you either use multiple terminals or take care of detaching processes from the terminal yourself. In order to run the Skywire VPN server, first run the Visor: sudo ./skywire-visor skywire-config.json Note The VPN server requires root privileges to setup a TUN interface and configure the systems routing rules. To start the VPN Server,Run: ./skywire-cli visor start-app vpn-server To stop the VPN Server, stop the visor or run: ./skywire-cli visor stop-app vpn-server","title":"VPN Server"},{"location":"software/skywire/configuration/vpn-config/vpn-server/#skywire-vpn-server","text":"Note For ease of setting up a connection to your VPN server, it is recommended to deploy the VPN server on a machine with a public IP. This will allow clients to establish stcpr transports which use a simple TCP connection instead of relayed connections over dmsg .","title":"Skywire VPN Server"},{"location":"software/skywire/configuration/vpn-config/vpn-server/#introduction","text":"This guide explains the setup procedure and includes operating instructions of the Skywire VPN Server. Please refer to the Skywire VPN Client guide in case you want to use Skywire VPN as a client. Note The configuration & starting/stopping of the Skywire VPN Server can also be performed using the Skywire HypervisorUI via the Apps page of the respective Visor.","title":"Introduction"},{"location":"software/skywire/configuration/vpn-config/vpn-server/#installation","text":"","title":"Installation"},{"location":"software/skywire/configuration/vpn-config/vpn-server/#dependencies","text":"Skywire VPN Server requires Golang v1.16 or higher. Debian Install To install the dependencies required by Skywire VPN Server, run: $ sudo apt install git iproute2 To install GO, follow the installation guide here Arch Linux Install To install the dependencies required by Skywire VPN Server, run: $ sudo pacman -S go git iproute2","title":"Dependencies"},{"location":"software/skywire/configuration/vpn-config/vpn-server/#skywire-visor","text":"Skywire VPN Server requires Skywire Visor to be installed, follow the guide here .","title":"Skywire Visor"},{"location":"software/skywire/configuration/vpn-config/vpn-server/#configure","text":"The Skywire VPN server can be configured to require a passcode for authentication of clients or can be freely accessible without passcode. Note VPN server needs to be freely accessible without passcode to be publicly advertised in Skycoin's service discovery. To set a passcode, edit the skywire-config.json file and pass the following arguments: { \"name\": \"vpn-server\", \"auto_start\": false, \"port\": 44, \"args\":[\"-passcode\",\"<your-passcode>\", \"-secure\", \"true\"] } VPN server needs to be started manually after the Visor was started. To start the VPN server automatically upon the startup of Skywire Visor, set \"auto_start\": false to \"auto_start\": true . The \"-secure\" flag prevents VPN client users from SSH'ing into the VPN-server's machine. It defaults to true.","title":"Configure"},{"location":"software/skywire/configuration/vpn-config/vpn-server/#operating-skywire-vpn-server","text":"The following assumes that you either use multiple terminals or take care of detaching processes from the terminal yourself. In order to run the Skywire VPN server, first run the Visor: sudo ./skywire-visor skywire-config.json Note The VPN server requires root privileges to setup a TUN interface and configure the systems routing rules. To start the VPN Server,Run: ./skywire-cli visor start-app vpn-server To stop the VPN Server, stop the visor or run: ./skywire-cli visor stop-app vpn-server","title":"Operating Skywire VPN Server"},{"location":"software/skywire/devdocs/architecture/","text":"","title":"Architecture"},{"location":"software/skywire/devdocs/terminology/","text":"Transports","title":"Terminology"},{"location":"software/skywire/devdocs/transports/","text":"A Transport represents a bidirectional line of communication between two Skywire Visors (or Transport Edges). Skywire can use different implementations of a transport for different purposes. Currently dmsg is used for communication with the control plane of the network. The stcp transport is the default transport for the data plane. Skywire supports custom transport implementations. Each Transport is represented as a unique 16 byte (128 bit) UUID value called the Transport ID and has a Transport Type that identifies a specific implementation of the Transport. stcpr stcpr transport automatically resolves the Skywire addresses of two visors and establishes a transport using a single underlying TCP connection. It is the most performant transport type at the moment. It requires at least one of the two edges of the transport to be deployed on a public IP. sudph sudph transport is a holepunched transport between two Visors. It uses an underlying reliable UDP transport. It uses a negotiation server to negotiate the details of the holepunched connection and then opens up a direct connection between two Visors. Due to the restrictions Symmetric NATs impose, this transport type does not work with Symmetric NATs. dmsg dmsg transport connects two visors with the help of an intermediary relay server. It is the least performant transport. It is available between any two Visors with an internet connection however. stcp stcp transport is a simple TCP based transport. It does not use any negotiation or address resolution servers but relies on a local Pubkey to IP mapping that needs to be generated manually.","title":"Transports"},{"location":"software/skywire/devdocs/transports/#stcpr","text":"stcpr transport automatically resolves the Skywire addresses of two visors and establishes a transport using a single underlying TCP connection. It is the most performant transport type at the moment. It requires at least one of the two edges of the transport to be deployed on a public IP.","title":"stcpr"},{"location":"software/skywire/devdocs/transports/#sudph","text":"sudph transport is a holepunched transport between two Visors. It uses an underlying reliable UDP transport. It uses a negotiation server to negotiate the details of the holepunched connection and then opens up a direct connection between two Visors. Due to the restrictions Symmetric NATs impose, this transport type does not work with Symmetric NATs.","title":"sudph"},{"location":"software/skywire/devdocs/transports/#dmsg","text":"dmsg transport connects two visors with the help of an intermediary relay server. It is the least performant transport. It is available between any two Visors with an internet connection however.","title":"dmsg"},{"location":"software/skywire/devdocs/transports/#stcp","text":"stcp transport is a simple TCP based transport. It does not use any negotiation or address resolution servers but relies on a local Pubkey to IP mapping that needs to be generated manually.","title":"stcp"},{"location":"software/skywire/setup/docker/","text":"Note The docker setup instructions are beyond the scope of this article. Please refer to Docker documentation for installing it on your system. Run To run the visor from docker image without custom config file: $ docker run --rm -p 8000:8000 --name=skywire skycoin/skywire:latest skywire-visor Note Using latest tag will pull and built an image from master branch, while using test tag will pull and built an image from develop branch. Configure Visor Generate Config To generate config file manually for visor and expose hypervisorUI, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli visor gen-config --is-hypervisor After starting up the visor, the UI will be exposed by default on localhost:8000 . To generate the config manually for the visor without UI, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli visor gen-config To add hypervisor public key to the list of hypervisors, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli update-config hypervisor-pks <public-key> Run skywire-visor To start visor from docker image with custom config file, run: $ docker run --rm -p 8000:8000 -v <YOUR_CONFIG_DIR>:/opt/skywire --name=skywire skycoin/skywire:latest skywire-visor","title":"Docker"},{"location":"software/skywire/setup/docker/#run","text":"To run the visor from docker image without custom config file: $ docker run --rm -p 8000:8000 --name=skywire skycoin/skywire:latest skywire-visor Note Using latest tag will pull and built an image from master branch, while using test tag will pull and built an image from develop branch.","title":"Run"},{"location":"software/skywire/setup/docker/#configure-visor","text":"","title":"Configure Visor"},{"location":"software/skywire/setup/docker/#generate-config","text":"To generate config file manually for visor and expose hypervisorUI, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli visor gen-config --is-hypervisor After starting up the visor, the UI will be exposed by default on localhost:8000 . To generate the config manually for the visor without UI, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli visor gen-config To add hypervisor public key to the list of hypervisors, run: $ docker run --rm -v <YOUR_CONFIG_DIR>:/opt/skywire \\ skycoin/skywire:latest skywire-cli update-config hypervisor-pks <public-key>","title":"Generate Config"},{"location":"software/skywire/setup/docker/#run-skywire-visor","text":"To start visor from docker image with custom config file, run: $ docker run --rm -p 8000:8000 -v <YOUR_CONFIG_DIR>:/opt/skywire --name=skywire skycoin/skywire:latest skywire-visor","title":"Run skywire-visor"},{"location":"software/skywire/setup/linux/","text":"Build Skywire requires a Golang version of 1.16 or higher. Debian Install To install the required dependencies if they were not installed before, run: $ sudo apt install git make To install GO, follow the installation guide here Arch Linux Install To install the required dependencies if they were not installed before, run: $ sudo pacman -S go git make Clone $ git clone https://github.com/skycoin/skywire.git $ cd skywire Build and Install make install will install binaries to GOBIN . Hence it requires PATH to be set correctly. Follow the GO installation guide here . $ make build && make install Configure Skywire To generate a default config file, run: $ ./skywire-cli visor gen-config --is-hypervisor Start the visor with: $ ./skywire-visor -c skywire-config.json For more details check out the configuration section.","title":"Linux"},{"location":"software/skywire/setup/linux/#build","text":"Skywire requires a Golang version of 1.16 or higher. Debian Install To install the required dependencies if they were not installed before, run: $ sudo apt install git make To install GO, follow the installation guide here Arch Linux Install To install the required dependencies if they were not installed before, run: $ sudo pacman -S go git make","title":"Build"},{"location":"software/skywire/setup/linux/#clone","text":"$ git clone https://github.com/skycoin/skywire.git $ cd skywire","title":"Clone"},{"location":"software/skywire/setup/linux/#build-and-install","text":"make install will install binaries to GOBIN . Hence it requires PATH to be set correctly. Follow the GO installation guide here . $ make build && make install","title":"Build and Install"},{"location":"software/skywire/setup/linux/#configure-skywire","text":"To generate a default config file, run: $ ./skywire-cli visor gen-config --is-hypervisor Start the visor with: $ ./skywire-visor -c skywire-config.json For more details check out the configuration section.","title":"Configure Skywire"},{"location":"software/skywire/setup/macos/","text":"Build Skywire requires a Golang version of 1.16 or higher. macOS Install To install the required dependencies if they were not installed before, run: $ brew install go git make Clone $ git clone https://github.com/skycoin/skywire.git $ cd skywire Build and Install make install will install binaries to GOBIN . Hence it requires PATH to be set correctly. Follow the GO installation guide here . $ make build && make install Configure Skywire To generate a default config file, run: $ ./skywire-cli visor gen-config --is-hypervisor Start the visor with: $ ./skywire-visor -c skywire-config.json For more details check out the configuration section.","title":"macOS"},{"location":"software/skywire/setup/macos/#build","text":"Skywire requires a Golang version of 1.16 or higher. macOS Install To install the required dependencies if they were not installed before, run: $ brew install go git make","title":"Build"},{"location":"software/skywire/setup/macos/#clone","text":"$ git clone https://github.com/skycoin/skywire.git $ cd skywire","title":"Clone"},{"location":"software/skywire/setup/macos/#build-and-install","text":"make install will install binaries to GOBIN . Hence it requires PATH to be set correctly. Follow the GO installation guide here . $ make build && make install","title":"Build and Install"},{"location":"software/skywire/setup/macos/#configure-skywire","text":"To generate a default config file, run: $ ./skywire-cli visor gen-config --is-hypervisor Start the visor with: $ ./skywire-visor -c skywire-config.json For more details check out the configuration section.","title":"Configure Skywire"},{"location":"software/skywire/setup/overview/","text":"","title":"Overview"},{"location":"software/skywire/setup/raspberrypi/","text":"","title":"Raspberrypi"},{"location":"software/skywire/setup/static-build/","text":"Static Build A statically built binary has all the required library code built in and it runs on about any system having same OS specifications as it was compiled on. Static binaries eliminate the dependency on external libraries. You can build static binaries on Linux Debian Install To install musl, run: $ apt-get install musl Arch Linux Install To install musl, run: $ sudo pacman -S musl To compile and install the binaries run: $ make build-static && make install-static","title":"Static Build"},{"location":"software/skywire/setup/static-build/#static-build","text":"A statically built binary has all the required library code built in and it runs on about any system having same OS specifications as it was compiled on. Static binaries eliminate the dependency on external libraries. You can build static binaries on Linux Debian Install To install musl, run: $ apt-get install musl Arch Linux Install To install musl, run: $ sudo pacman -S musl To compile and install the binaries run: $ make build-static && make install-static","title":"Static Build"},{"location":"software/skywire/setup/windows/","text":"Note Skywire visor is only supported by Windows 10 and Windows Server 2019. This process requires some manual operations at the moment. Run all the commands using Powershell (Administrator). Install Dependencies Windows Install To install make and gcc , run: mingw-get install mingw32-make gcc Requires mingw-get to be installed. Follow the guide here . Skywire requires a Golang version of 1.16 or higher. Follow the GO installation guide here . Download and install git from here . Clone git clone https://github.com/skycoin/skywire.git cd skywire Build To run the skywire visor on windows, you will need to build it first: make build-windows Configure Skywire To generate a config file, run: .\\skywire-cli.exe config gen -i -r -o .\\skywire-config.json skywire-config.json file will be created in the root directory of the project. To start the visor, run: .\\skywire-visor.exe -c .\\skywire-config.json","title":"Windows"},{"location":"software/skywire/setup/windows/#install-dependencies","text":"Windows Install To install make and gcc , run: mingw-get install mingw32-make gcc Requires mingw-get to be installed. Follow the guide here . Skywire requires a Golang version of 1.16 or higher. Follow the GO installation guide here . Download and install git from here .","title":"Install Dependencies"},{"location":"software/skywire/setup/windows/#clone","text":"git clone https://github.com/skycoin/skywire.git cd skywire","title":"Clone"},{"location":"software/skywire/setup/windows/#build","text":"To run the skywire visor on windows, you will need to build it first: make build-windows","title":"Build"},{"location":"software/skywire/setup/windows/#configure-skywire","text":"To generate a config file, run: .\\skywire-cli.exe config gen -i -r -o .\\skywire-config.json skywire-config.json file will be created in the root directory of the project. To start the visor, run: .\\skywire-visor.exe -c .\\skywire-config.json","title":"Configure Skywire"},{"location":"software/sys-admin/dmsg-server/","text":"dmsg Note dmsg-server needs to be run on a public IP . Hardware Requirements It is recommended for server to have minimum RAM of 2GB, if the connections go above 2500, RAM should be increased appropriately. fs.inotify.max_user_watches needs to be set relatively high. To check fs.inotify.max_user_watches value, run: cat /proc/sys/fs/inotify/max_user_watches To set fs.inotify.max_user_watches value, run: sudo sysctl -w fs.inotify.max_user_watches=<value> Clone $ git clone https://github.com/skycoin/dmsg.git $ cd dmsg Install Install redis and GO Debian To install redis: $ sudo apt install redis-server To install GO, follow the installation guide here Arch Linux To install redis: $ sudo pacman -S redis go Build To build dmsg-discovery and dmsg-server binaries, run: $ make build Start redis and ensure it is listening on port 6379: $ redis-server To start dmsg-discovery , run: $ ./bin/dmsg-discovery Edit config file (integration/configs/dmsgserver1.json) to add public ip { \"public_key\" : \"<public-key>\" , \"secret_key\" : \"<secret-key>\" , \"discovery\" : \"<discovery-address>\" , \"public_address\" : \"<public-IP>:<port>\" , \"local_address\" : \":<port>\" , \"log_level\" : \"info\" , \"max_sessions\" : 10 } To start dmsg-server , run. $ ./bin/dmsg-server ./integration/configs/dmsgserver1.json Run dmsg server using docker Note The docker setup instructions are beyond the scope of this article. Please refer to Docker documentation for installing it on your system. Build To build dmsg-server and dmsg-discovery images, run: $ ./docker/scripts/docker-push.sh -t develop -b To create a new docker network, run: $ docker network create -d bridge br-dmsg0 Run Run redis $ docker run --network=\"br-dmsg0\" --rm --name=redis -d -p 6379:6379 redis:alpine Run dmsg-discovery : $ docker run --rm --network=\"br-dmsg0\" --name=dmsg-discovery skycoinpro/dmsg-discovery:test --redis redis://redis:6379 To run dmsg-server with default config: $ docker run --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test To run dmsg-server with custom config: $ docker run -v <YOUR_CONFIG_PATH>:/etc/dmsg --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test /etc/dmsg/<YOUR_CONFIG_FILE_NAME>","title":"Dmsg Server"},{"location":"software/sys-admin/dmsg-server/#dmsg","text":"Note dmsg-server needs to be run on a public IP .","title":"dmsg"},{"location":"software/sys-admin/dmsg-server/#hardware-requirements","text":"It is recommended for server to have minimum RAM of 2GB, if the connections go above 2500, RAM should be increased appropriately. fs.inotify.max_user_watches needs to be set relatively high. To check fs.inotify.max_user_watches value, run: cat /proc/sys/fs/inotify/max_user_watches To set fs.inotify.max_user_watches value, run: sudo sysctl -w fs.inotify.max_user_watches=<value>","title":"Hardware Requirements"},{"location":"software/sys-admin/dmsg-server/#clone","text":"$ git clone https://github.com/skycoin/dmsg.git $ cd dmsg","title":"Clone"},{"location":"software/sys-admin/dmsg-server/#install","text":"Install redis and GO Debian To install redis: $ sudo apt install redis-server To install GO, follow the installation guide here Arch Linux To install redis: $ sudo pacman -S redis go","title":"Install"},{"location":"software/sys-admin/dmsg-server/#build","text":"To build dmsg-discovery and dmsg-server binaries, run: $ make build Start redis and ensure it is listening on port 6379: $ redis-server To start dmsg-discovery , run: $ ./bin/dmsg-discovery Edit config file (integration/configs/dmsgserver1.json) to add public ip { \"public_key\" : \"<public-key>\" , \"secret_key\" : \"<secret-key>\" , \"discovery\" : \"<discovery-address>\" , \"public_address\" : \"<public-IP>:<port>\" , \"local_address\" : \":<port>\" , \"log_level\" : \"info\" , \"max_sessions\" : 10 } To start dmsg-server , run. $ ./bin/dmsg-server ./integration/configs/dmsgserver1.json","title":"Build"},{"location":"software/sys-admin/dmsg-server/#run-dmsg-server-using-docker","text":"Note The docker setup instructions are beyond the scope of this article. Please refer to Docker documentation for installing it on your system.","title":"Run dmsg server using docker"},{"location":"software/sys-admin/dmsg-server/#build_1","text":"To build dmsg-server and dmsg-discovery images, run: $ ./docker/scripts/docker-push.sh -t develop -b To create a new docker network, run: $ docker network create -d bridge br-dmsg0","title":"Build"},{"location":"software/sys-admin/dmsg-server/#run","text":"Run redis $ docker run --network=\"br-dmsg0\" --rm --name=redis -d -p 6379:6379 redis:alpine Run dmsg-discovery : $ docker run --rm --network=\"br-dmsg0\" --name=dmsg-discovery skycoinpro/dmsg-discovery:test --redis redis://redis:6379 To run dmsg-server with default config: $ docker run --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test To run dmsg-server with custom config: $ docker run -v <YOUR_CONFIG_PATH>:/etc/dmsg --network=\"br-dmsg0\" --rm --name=dmsg-server skycoinpro/dmsg-server:test /etc/dmsg/<YOUR_CONFIG_FILE_NAME>","title":"Run"},{"location":"software/sys-admin/public-visor/","text":"Note public visor needs to be run on a public IP . Hardware Requirements It is recommended for server to have minimum RAM of 2GB, if the connections go above 2500, RAM should be increased appropriately. fs.inotify.max_user_watches needs to be set relatively high. Install Skywire Skywire requires a Golang version of 1.16 or higher. Debian Install To install the required dependencies if they were not installed before, run: $ sudo apt install git make To install GO, follow the installation guide here Arch Linux Install To install the required dependencies if they were not installed before, run: $ sudo pacman -S go git make Clone $ git clone https://github.com/skycoin/skywire.git $ cd skywire Build and Install make install will install binaries to GOBIN . Hence it requires PATH to be set correctly. Follow the GO installation guide here . $ make build && make install Configure Skywire To generate a default config file, run: $ ./skywire-cli visor gen-config --is-hypervisor Make visor public To make the visor public, change \"is_public\": false to \"is_public\": true in the skywire-config.json file. \"is_public\": true Save the changes. Start the visor with: $ ./skywire-visor -c skywire-config.json","title":"Public Visor"},{"location":"software/sys-admin/public-visor/#hardware-requirements","text":"It is recommended for server to have minimum RAM of 2GB, if the connections go above 2500, RAM should be increased appropriately. fs.inotify.max_user_watches needs to be set relatively high.","title":"Hardware Requirements"},{"location":"software/sys-admin/public-visor/#install-skywire","text":"Skywire requires a Golang version of 1.16 or higher. Debian Install To install the required dependencies if they were not installed before, run: $ sudo apt install git make To install GO, follow the installation guide here Arch Linux Install To install the required dependencies if they were not installed before, run: $ sudo pacman -S go git make","title":"Install Skywire"},{"location":"software/sys-admin/public-visor/#clone","text":"$ git clone https://github.com/skycoin/skywire.git $ cd skywire","title":"Clone"},{"location":"software/sys-admin/public-visor/#build-and-install","text":"make install will install binaries to GOBIN . Hence it requires PATH to be set correctly. Follow the GO installation guide here . $ make build && make install","title":"Build and Install"},{"location":"software/sys-admin/public-visor/#configure-skywire","text":"To generate a default config file, run: $ ./skywire-cli visor gen-config --is-hypervisor","title":"Configure Skywire"},{"location":"software/sys-admin/public-visor/#make-visor-public","text":"To make the visor public, change \"is_public\": false to \"is_public\": true in the skywire-config.json file. \"is_public\": true Save the changes. Start the visor with: $ ./skywire-visor -c skywire-config.json","title":"Make visor public"},{"location":"software/sys-admin/vpn-server/","text":"Skywire VPN Server Note For ease of setting up a connection to your VPN server, it is recommended to deploy the VPN server on a machine with a public IP. This will allow clients to establish stcpr transports which use a simple TCP connection instead of relayed connections over dmsg . Introduction This guide explains the setup procedure and includes operating instructions of the Skywire VPN Server. Note The configuration & starting/stopping of the Skywire VPN Server can also be performed using the Skywire HypervisorUI via the Apps page of the respective Visor. Installation Dependencies Skywire VPN Server requires Golang v1.16 or higher. Debian Install To install the dependencies required by Skywire VPN Server, run: $ sudo apt install git iproute2 To install GO, follow the installation guide here Arch Linux Install To install the dependencies required by Skywire VPN Server, run: $ sudo pacman -S go git iproute2 Skywire Visor Skywire VPN Server requires Skywire Visor to be installed, follow the guide here . Configure The Skywire VPN server can be configured to require a passcode for authentication of clients or can be freely accessible without passcode. Note VPN server needs to be freely accessible without passcode to be publicly advertised in Skycoin's service discovery. To set a passcode, edit the skywire-config.json file and pass the following arguments: { \"name\": \"vpn-server\", \"auto_start\": false, \"port\": 44, \"args\":[\"-passcode\",\"<your-passcode>\", \"-secure\", \"true\"] } VPN server needs to be started manually after the Visor was started. To start the VPN server automatically upon the startup of Skywire Visor, set \"auto_start\": false to \"auto_start\": true . The \"-secure\" flag prevents VPN client users from SSH'ing into the VPN-server's machine. It defaults to true. Operating Skywire VPN Server The following assumes that you take care of detaching processes from the terminal yourself. In order to run the Skywire VPN server, first run the Visor: $ sudo ./skywire-visor skywire-config.json Note The VPN server requires root privileges to setup a TUN interface and configure the systems routing rules. To start the VPN Server, run: $ ./skywire-cli visor start-app vpn-server To stop the VPN Server, stop the visor or run: $ ./skywire-cli visor stop-app vpn-server","title":"VPN Server"},{"location":"software/sys-admin/vpn-server/#skywire-vpn-server","text":"Note For ease of setting up a connection to your VPN server, it is recommended to deploy the VPN server on a machine with a public IP. This will allow clients to establish stcpr transports which use a simple TCP connection instead of relayed connections over dmsg .","title":"Skywire VPN Server"},{"location":"software/sys-admin/vpn-server/#introduction","text":"This guide explains the setup procedure and includes operating instructions of the Skywire VPN Server. Note The configuration & starting/stopping of the Skywire VPN Server can also be performed using the Skywire HypervisorUI via the Apps page of the respective Visor.","title":"Introduction"},{"location":"software/sys-admin/vpn-server/#installation","text":"","title":"Installation"},{"location":"software/sys-admin/vpn-server/#dependencies","text":"Skywire VPN Server requires Golang v1.16 or higher. Debian Install To install the dependencies required by Skywire VPN Server, run: $ sudo apt install git iproute2 To install GO, follow the installation guide here Arch Linux Install To install the dependencies required by Skywire VPN Server, run: $ sudo pacman -S go git iproute2","title":"Dependencies"},{"location":"software/sys-admin/vpn-server/#skywire-visor","text":"Skywire VPN Server requires Skywire Visor to be installed, follow the guide here .","title":"Skywire Visor"},{"location":"software/sys-admin/vpn-server/#configure","text":"The Skywire VPN server can be configured to require a passcode for authentication of clients or can be freely accessible without passcode. Note VPN server needs to be freely accessible without passcode to be publicly advertised in Skycoin's service discovery. To set a passcode, edit the skywire-config.json file and pass the following arguments: { \"name\": \"vpn-server\", \"auto_start\": false, \"port\": 44, \"args\":[\"-passcode\",\"<your-passcode>\", \"-secure\", \"true\"] } VPN server needs to be started manually after the Visor was started. To start the VPN server automatically upon the startup of Skywire Visor, set \"auto_start\": false to \"auto_start\": true . The \"-secure\" flag prevents VPN client users from SSH'ing into the VPN-server's machine. It defaults to true.","title":"Configure"},{"location":"software/sys-admin/vpn-server/#operating-skywire-vpn-server","text":"The following assumes that you take care of detaching processes from the terminal yourself. In order to run the Skywire VPN server, first run the Visor: $ sudo ./skywire-visor skywire-config.json Note The VPN server requires root privileges to setup a TUN interface and configure the systems routing rules. To start the VPN Server, run: $ ./skywire-cli visor start-app vpn-server To stop the VPN Server, stop the visor or run: $ ./skywire-cli visor stop-app vpn-server","title":"Operating Skywire VPN Server"}]}